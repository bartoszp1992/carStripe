
carStripe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f4c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08006008  08006008  00016008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060ec  080060ec  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080060ec  080060ec  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080060ec  080060ec  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060ec  080060ec  000160ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060f0  080060f0  000160f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080060f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000438  2000005c  08006150  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  08006150  00020494  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dcf8  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000290e  00000000  00000000  0002ddbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db8  00000000  00000000  000306d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a6f  00000000  00000000  00031488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019d88  00000000  00000000  00031ef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001113c  00000000  00000000  0004bc7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009e08e  00000000  00000000  0005cdbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000035f8  00000000  00000000  000fae4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000fe444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000005c 	.word	0x2000005c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005ff0 	.word	0x08005ff0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000060 	.word	0x20000060
 8000100:	08005ff0 	.word	0x08005ff0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_cfrcmple>:
 80003f0:	4684      	mov	ip, r0
 80003f2:	0008      	movs	r0, r1
 80003f4:	4661      	mov	r1, ip
 80003f6:	e7ff      	b.n	80003f8 <__aeabi_cfcmpeq>

080003f8 <__aeabi_cfcmpeq>:
 80003f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fa:	f000 fb71 	bl	8000ae0 <__lesf2>
 80003fe:	2800      	cmp	r0, #0
 8000400:	d401      	bmi.n	8000406 <__aeabi_cfcmpeq+0xe>
 8000402:	2100      	movs	r1, #0
 8000404:	42c8      	cmn	r0, r1
 8000406:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000408 <__aeabi_fcmpeq>:
 8000408:	b510      	push	{r4, lr}
 800040a:	f000 fafd 	bl	8000a08 <__eqsf2>
 800040e:	4240      	negs	r0, r0
 8000410:	3001      	adds	r0, #1
 8000412:	bd10      	pop	{r4, pc}

08000414 <__aeabi_fcmplt>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 fb63 	bl	8000ae0 <__lesf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	db01      	blt.n	8000422 <__aeabi_fcmplt+0xe>
 800041e:	2000      	movs	r0, #0
 8000420:	bd10      	pop	{r4, pc}
 8000422:	2001      	movs	r0, #1
 8000424:	bd10      	pop	{r4, pc}
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_fcmple>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 fb59 	bl	8000ae0 <__lesf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	dd01      	ble.n	8000436 <__aeabi_fcmple+0xe>
 8000432:	2000      	movs	r0, #0
 8000434:	bd10      	pop	{r4, pc}
 8000436:	2001      	movs	r0, #1
 8000438:	bd10      	pop	{r4, pc}
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_fcmpgt>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 fb09 	bl	8000a54 <__gesf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	dc01      	bgt.n	800044a <__aeabi_fcmpgt+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_fcmpge>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 faff 	bl	8000a54 <__gesf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	da01      	bge.n	800045e <__aeabi_fcmpge+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_f2uiz>:
 8000464:	219e      	movs	r1, #158	; 0x9e
 8000466:	b510      	push	{r4, lr}
 8000468:	05c9      	lsls	r1, r1, #23
 800046a:	1c04      	adds	r4, r0, #0
 800046c:	f7ff fff0 	bl	8000450 <__aeabi_fcmpge>
 8000470:	2800      	cmp	r0, #0
 8000472:	d103      	bne.n	800047c <__aeabi_f2uiz+0x18>
 8000474:	1c20      	adds	r0, r4, #0
 8000476:	f000 fe7b 	bl	8001170 <__aeabi_f2iz>
 800047a:	bd10      	pop	{r4, pc}
 800047c:	219e      	movs	r1, #158	; 0x9e
 800047e:	1c20      	adds	r0, r4, #0
 8000480:	05c9      	lsls	r1, r1, #23
 8000482:	f000 fcbf 	bl	8000e04 <__aeabi_fsub>
 8000486:	f000 fe73 	bl	8001170 <__aeabi_f2iz>
 800048a:	2380      	movs	r3, #128	; 0x80
 800048c:	061b      	lsls	r3, r3, #24
 800048e:	469c      	mov	ip, r3
 8000490:	4460      	add	r0, ip
 8000492:	e7f2      	b.n	800047a <__aeabi_f2uiz+0x16>

08000494 <__aeabi_fadd>:
 8000494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000496:	4647      	mov	r7, r8
 8000498:	46ce      	mov	lr, r9
 800049a:	024a      	lsls	r2, r1, #9
 800049c:	0243      	lsls	r3, r0, #9
 800049e:	0045      	lsls	r5, r0, #1
 80004a0:	0fc4      	lsrs	r4, r0, #31
 80004a2:	0a50      	lsrs	r0, r2, #9
 80004a4:	4680      	mov	r8, r0
 80004a6:	0048      	lsls	r0, r1, #1
 80004a8:	0a5b      	lsrs	r3, r3, #9
 80004aa:	0e00      	lsrs	r0, r0, #24
 80004ac:	0992      	lsrs	r2, r2, #6
 80004ae:	4694      	mov	ip, r2
 80004b0:	b580      	push	{r7, lr}
 80004b2:	001e      	movs	r6, r3
 80004b4:	4681      	mov	r9, r0
 80004b6:	0002      	movs	r2, r0
 80004b8:	0e2d      	lsrs	r5, r5, #24
 80004ba:	00df      	lsls	r7, r3, #3
 80004bc:	0fc9      	lsrs	r1, r1, #31
 80004be:	428c      	cmp	r4, r1
 80004c0:	d024      	beq.n	800050c <__aeabi_fadd+0x78>
 80004c2:	1a28      	subs	r0, r5, r0
 80004c4:	2800      	cmp	r0, #0
 80004c6:	dd0e      	ble.n	80004e6 <__aeabi_fadd+0x52>
 80004c8:	2a00      	cmp	r2, #0
 80004ca:	d13e      	bne.n	800054a <__aeabi_fadd+0xb6>
 80004cc:	4662      	mov	r2, ip
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	d100      	bne.n	80004d4 <__aeabi_fadd+0x40>
 80004d2:	e0fd      	b.n	80006d0 <__aeabi_fadd+0x23c>
 80004d4:	1e42      	subs	r2, r0, #1
 80004d6:	2801      	cmp	r0, #1
 80004d8:	d100      	bne.n	80004dc <__aeabi_fadd+0x48>
 80004da:	e137      	b.n	800074c <__aeabi_fadd+0x2b8>
 80004dc:	28ff      	cmp	r0, #255	; 0xff
 80004de:	d100      	bne.n	80004e2 <__aeabi_fadd+0x4e>
 80004e0:	e0a9      	b.n	8000636 <__aeabi_fadd+0x1a2>
 80004e2:	0010      	movs	r0, r2
 80004e4:	e039      	b.n	800055a <__aeabi_fadd+0xc6>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	d063      	beq.n	80005b2 <__aeabi_fadd+0x11e>
 80004ea:	464b      	mov	r3, r9
 80004ec:	1b52      	subs	r2, r2, r5
 80004ee:	2d00      	cmp	r5, #0
 80004f0:	d000      	beq.n	80004f4 <__aeabi_fadd+0x60>
 80004f2:	e0e0      	b.n	80006b6 <__aeabi_fadd+0x222>
 80004f4:	2f00      	cmp	r7, #0
 80004f6:	d100      	bne.n	80004fa <__aeabi_fadd+0x66>
 80004f8:	e0ce      	b.n	8000698 <__aeabi_fadd+0x204>
 80004fa:	1e53      	subs	r3, r2, #1
 80004fc:	2a01      	cmp	r2, #1
 80004fe:	d100      	bne.n	8000502 <__aeabi_fadd+0x6e>
 8000500:	e155      	b.n	80007ae <__aeabi_fadd+0x31a>
 8000502:	2aff      	cmp	r2, #255	; 0xff
 8000504:	d100      	bne.n	8000508 <__aeabi_fadd+0x74>
 8000506:	e094      	b.n	8000632 <__aeabi_fadd+0x19e>
 8000508:	001a      	movs	r2, r3
 800050a:	e0d9      	b.n	80006c0 <__aeabi_fadd+0x22c>
 800050c:	1a2a      	subs	r2, r5, r0
 800050e:	2a00      	cmp	r2, #0
 8000510:	dc00      	bgt.n	8000514 <__aeabi_fadd+0x80>
 8000512:	e099      	b.n	8000648 <__aeabi_fadd+0x1b4>
 8000514:	2800      	cmp	r0, #0
 8000516:	d062      	beq.n	80005de <__aeabi_fadd+0x14a>
 8000518:	2dff      	cmp	r5, #255	; 0xff
 800051a:	d100      	bne.n	800051e <__aeabi_fadd+0x8a>
 800051c:	e08b      	b.n	8000636 <__aeabi_fadd+0x1a2>
 800051e:	2380      	movs	r3, #128	; 0x80
 8000520:	4661      	mov	r1, ip
 8000522:	04db      	lsls	r3, r3, #19
 8000524:	4319      	orrs	r1, r3
 8000526:	468c      	mov	ip, r1
 8000528:	2a1b      	cmp	r2, #27
 800052a:	dc00      	bgt.n	800052e <__aeabi_fadd+0x9a>
 800052c:	e0d2      	b.n	80006d4 <__aeabi_fadd+0x240>
 800052e:	2301      	movs	r3, #1
 8000530:	19db      	adds	r3, r3, r7
 8000532:	015a      	lsls	r2, r3, #5
 8000534:	d56a      	bpl.n	800060c <__aeabi_fadd+0x178>
 8000536:	3501      	adds	r5, #1
 8000538:	2dff      	cmp	r5, #255	; 0xff
 800053a:	d05b      	beq.n	80005f4 <__aeabi_fadd+0x160>
 800053c:	2201      	movs	r2, #1
 800053e:	49a3      	ldr	r1, [pc, #652]	; (80007cc <__aeabi_fadd+0x338>)
 8000540:	401a      	ands	r2, r3
 8000542:	085b      	lsrs	r3, r3, #1
 8000544:	400b      	ands	r3, r1
 8000546:	4313      	orrs	r3, r2
 8000548:	e01c      	b.n	8000584 <__aeabi_fadd+0xf0>
 800054a:	2dff      	cmp	r5, #255	; 0xff
 800054c:	d100      	bne.n	8000550 <__aeabi_fadd+0xbc>
 800054e:	e072      	b.n	8000636 <__aeabi_fadd+0x1a2>
 8000550:	2380      	movs	r3, #128	; 0x80
 8000552:	4662      	mov	r2, ip
 8000554:	04db      	lsls	r3, r3, #19
 8000556:	431a      	orrs	r2, r3
 8000558:	4694      	mov	ip, r2
 800055a:	281b      	cmp	r0, #27
 800055c:	dc00      	bgt.n	8000560 <__aeabi_fadd+0xcc>
 800055e:	e090      	b.n	8000682 <__aeabi_fadd+0x1ee>
 8000560:	2301      	movs	r3, #1
 8000562:	1afb      	subs	r3, r7, r3
 8000564:	015a      	lsls	r2, r3, #5
 8000566:	d551      	bpl.n	800060c <__aeabi_fadd+0x178>
 8000568:	019b      	lsls	r3, r3, #6
 800056a:	099e      	lsrs	r6, r3, #6
 800056c:	0030      	movs	r0, r6
 800056e:	f001 fd79 	bl	8002064 <__clzsi2>
 8000572:	0033      	movs	r3, r6
 8000574:	3805      	subs	r0, #5
 8000576:	4083      	lsls	r3, r0
 8000578:	4285      	cmp	r5, r0
 800057a:	dc00      	bgt.n	800057e <__aeabi_fadd+0xea>
 800057c:	e075      	b.n	800066a <__aeabi_fadd+0x1d6>
 800057e:	4a94      	ldr	r2, [pc, #592]	; (80007d0 <__aeabi_fadd+0x33c>)
 8000580:	1a2d      	subs	r5, r5, r0
 8000582:	4013      	ands	r3, r2
 8000584:	075a      	lsls	r2, r3, #29
 8000586:	d004      	beq.n	8000592 <__aeabi_fadd+0xfe>
 8000588:	220f      	movs	r2, #15
 800058a:	401a      	ands	r2, r3
 800058c:	2a04      	cmp	r2, #4
 800058e:	d000      	beq.n	8000592 <__aeabi_fadd+0xfe>
 8000590:	3304      	adds	r3, #4
 8000592:	015a      	lsls	r2, r3, #5
 8000594:	d53c      	bpl.n	8000610 <__aeabi_fadd+0x17c>
 8000596:	1c68      	adds	r0, r5, #1
 8000598:	2dfe      	cmp	r5, #254	; 0xfe
 800059a:	d02b      	beq.n	80005f4 <__aeabi_fadd+0x160>
 800059c:	019b      	lsls	r3, r3, #6
 800059e:	0a5e      	lsrs	r6, r3, #9
 80005a0:	b2c0      	uxtb	r0, r0
 80005a2:	05c0      	lsls	r0, r0, #23
 80005a4:	4330      	orrs	r0, r6
 80005a6:	07e4      	lsls	r4, r4, #31
 80005a8:	4320      	orrs	r0, r4
 80005aa:	bcc0      	pop	{r6, r7}
 80005ac:	46b9      	mov	r9, r7
 80005ae:	46b0      	mov	r8, r6
 80005b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005b2:	20fe      	movs	r0, #254	; 0xfe
 80005b4:	1c6a      	adds	r2, r5, #1
 80005b6:	4210      	tst	r0, r2
 80005b8:	d172      	bne.n	80006a0 <__aeabi_fadd+0x20c>
 80005ba:	2d00      	cmp	r5, #0
 80005bc:	d000      	beq.n	80005c0 <__aeabi_fadd+0x12c>
 80005be:	e0ae      	b.n	800071e <__aeabi_fadd+0x28a>
 80005c0:	2f00      	cmp	r7, #0
 80005c2:	d100      	bne.n	80005c6 <__aeabi_fadd+0x132>
 80005c4:	e0ec      	b.n	80007a0 <__aeabi_fadd+0x30c>
 80005c6:	4663      	mov	r3, ip
 80005c8:	2000      	movs	r0, #0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d0e9      	beq.n	80005a2 <__aeabi_fadd+0x10e>
 80005ce:	1afb      	subs	r3, r7, r3
 80005d0:	015a      	lsls	r2, r3, #5
 80005d2:	d400      	bmi.n	80005d6 <__aeabi_fadd+0x142>
 80005d4:	e0f3      	b.n	80007be <__aeabi_fadd+0x32a>
 80005d6:	4663      	mov	r3, ip
 80005d8:	000c      	movs	r4, r1
 80005da:	1bdb      	subs	r3, r3, r7
 80005dc:	e7d2      	b.n	8000584 <__aeabi_fadd+0xf0>
 80005de:	4661      	mov	r1, ip
 80005e0:	2900      	cmp	r1, #0
 80005e2:	d05b      	beq.n	800069c <__aeabi_fadd+0x208>
 80005e4:	1e51      	subs	r1, r2, #1
 80005e6:	2a01      	cmp	r2, #1
 80005e8:	d100      	bne.n	80005ec <__aeabi_fadd+0x158>
 80005ea:	e0a7      	b.n	800073c <__aeabi_fadd+0x2a8>
 80005ec:	2aff      	cmp	r2, #255	; 0xff
 80005ee:	d022      	beq.n	8000636 <__aeabi_fadd+0x1a2>
 80005f0:	000a      	movs	r2, r1
 80005f2:	e799      	b.n	8000528 <__aeabi_fadd+0x94>
 80005f4:	20ff      	movs	r0, #255	; 0xff
 80005f6:	2600      	movs	r6, #0
 80005f8:	e7d3      	b.n	80005a2 <__aeabi_fadd+0x10e>
 80005fa:	21fe      	movs	r1, #254	; 0xfe
 80005fc:	1c6a      	adds	r2, r5, #1
 80005fe:	4211      	tst	r1, r2
 8000600:	d073      	beq.n	80006ea <__aeabi_fadd+0x256>
 8000602:	2aff      	cmp	r2, #255	; 0xff
 8000604:	d0f6      	beq.n	80005f4 <__aeabi_fadd+0x160>
 8000606:	0015      	movs	r5, r2
 8000608:	4467      	add	r7, ip
 800060a:	087b      	lsrs	r3, r7, #1
 800060c:	075a      	lsls	r2, r3, #29
 800060e:	d1bb      	bne.n	8000588 <__aeabi_fadd+0xf4>
 8000610:	08db      	lsrs	r3, r3, #3
 8000612:	2dff      	cmp	r5, #255	; 0xff
 8000614:	d00f      	beq.n	8000636 <__aeabi_fadd+0x1a2>
 8000616:	025b      	lsls	r3, r3, #9
 8000618:	0a5e      	lsrs	r6, r3, #9
 800061a:	b2e8      	uxtb	r0, r5
 800061c:	e7c1      	b.n	80005a2 <__aeabi_fadd+0x10e>
 800061e:	4662      	mov	r2, ip
 8000620:	2a00      	cmp	r2, #0
 8000622:	d008      	beq.n	8000636 <__aeabi_fadd+0x1a2>
 8000624:	2280      	movs	r2, #128	; 0x80
 8000626:	03d2      	lsls	r2, r2, #15
 8000628:	4213      	tst	r3, r2
 800062a:	d004      	beq.n	8000636 <__aeabi_fadd+0x1a2>
 800062c:	4640      	mov	r0, r8
 800062e:	4210      	tst	r0, r2
 8000630:	d101      	bne.n	8000636 <__aeabi_fadd+0x1a2>
 8000632:	000c      	movs	r4, r1
 8000634:	4643      	mov	r3, r8
 8000636:	2b00      	cmp	r3, #0
 8000638:	d0dc      	beq.n	80005f4 <__aeabi_fadd+0x160>
 800063a:	2680      	movs	r6, #128	; 0x80
 800063c:	03f6      	lsls	r6, r6, #15
 800063e:	431e      	orrs	r6, r3
 8000640:	0276      	lsls	r6, r6, #9
 8000642:	20ff      	movs	r0, #255	; 0xff
 8000644:	0a76      	lsrs	r6, r6, #9
 8000646:	e7ac      	b.n	80005a2 <__aeabi_fadd+0x10e>
 8000648:	2a00      	cmp	r2, #0
 800064a:	d0d6      	beq.n	80005fa <__aeabi_fadd+0x166>
 800064c:	1b42      	subs	r2, r0, r5
 800064e:	2d00      	cmp	r5, #0
 8000650:	d05c      	beq.n	800070c <__aeabi_fadd+0x278>
 8000652:	28ff      	cmp	r0, #255	; 0xff
 8000654:	d0ee      	beq.n	8000634 <__aeabi_fadd+0x1a0>
 8000656:	2380      	movs	r3, #128	; 0x80
 8000658:	04db      	lsls	r3, r3, #19
 800065a:	431f      	orrs	r7, r3
 800065c:	2a1b      	cmp	r2, #27
 800065e:	dc00      	bgt.n	8000662 <__aeabi_fadd+0x1ce>
 8000660:	e082      	b.n	8000768 <__aeabi_fadd+0x2d4>
 8000662:	2301      	movs	r3, #1
 8000664:	464d      	mov	r5, r9
 8000666:	4463      	add	r3, ip
 8000668:	e763      	b.n	8000532 <__aeabi_fadd+0x9e>
 800066a:	2220      	movs	r2, #32
 800066c:	1b40      	subs	r0, r0, r5
 800066e:	3001      	adds	r0, #1
 8000670:	1a12      	subs	r2, r2, r0
 8000672:	0019      	movs	r1, r3
 8000674:	4093      	lsls	r3, r2
 8000676:	40c1      	lsrs	r1, r0
 8000678:	1e5a      	subs	r2, r3, #1
 800067a:	4193      	sbcs	r3, r2
 800067c:	2500      	movs	r5, #0
 800067e:	430b      	orrs	r3, r1
 8000680:	e780      	b.n	8000584 <__aeabi_fadd+0xf0>
 8000682:	2320      	movs	r3, #32
 8000684:	4661      	mov	r1, ip
 8000686:	1a1b      	subs	r3, r3, r0
 8000688:	4099      	lsls	r1, r3
 800068a:	4662      	mov	r2, ip
 800068c:	000b      	movs	r3, r1
 800068e:	40c2      	lsrs	r2, r0
 8000690:	1e59      	subs	r1, r3, #1
 8000692:	418b      	sbcs	r3, r1
 8000694:	4313      	orrs	r3, r2
 8000696:	e764      	b.n	8000562 <__aeabi_fadd+0xce>
 8000698:	000c      	movs	r4, r1
 800069a:	4643      	mov	r3, r8
 800069c:	0015      	movs	r5, r2
 800069e:	e7b8      	b.n	8000612 <__aeabi_fadd+0x17e>
 80006a0:	4663      	mov	r3, ip
 80006a2:	1afe      	subs	r6, r7, r3
 80006a4:	0173      	lsls	r3, r6, #5
 80006a6:	d445      	bmi.n	8000734 <__aeabi_fadd+0x2a0>
 80006a8:	2e00      	cmp	r6, #0
 80006aa:	d000      	beq.n	80006ae <__aeabi_fadd+0x21a>
 80006ac:	e75e      	b.n	800056c <__aeabi_fadd+0xd8>
 80006ae:	2400      	movs	r4, #0
 80006b0:	2000      	movs	r0, #0
 80006b2:	2600      	movs	r6, #0
 80006b4:	e775      	b.n	80005a2 <__aeabi_fadd+0x10e>
 80006b6:	2bff      	cmp	r3, #255	; 0xff
 80006b8:	d0bb      	beq.n	8000632 <__aeabi_fadd+0x19e>
 80006ba:	2380      	movs	r3, #128	; 0x80
 80006bc:	04db      	lsls	r3, r3, #19
 80006be:	431f      	orrs	r7, r3
 80006c0:	2a1b      	cmp	r2, #27
 80006c2:	dd47      	ble.n	8000754 <__aeabi_fadd+0x2c0>
 80006c4:	2301      	movs	r3, #1
 80006c6:	4662      	mov	r2, ip
 80006c8:	000c      	movs	r4, r1
 80006ca:	464d      	mov	r5, r9
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	e749      	b.n	8000564 <__aeabi_fadd+0xd0>
 80006d0:	0005      	movs	r5, r0
 80006d2:	e79e      	b.n	8000612 <__aeabi_fadd+0x17e>
 80006d4:	4661      	mov	r1, ip
 80006d6:	2320      	movs	r3, #32
 80006d8:	40d1      	lsrs	r1, r2
 80006da:	1a9b      	subs	r3, r3, r2
 80006dc:	4662      	mov	r2, ip
 80006de:	409a      	lsls	r2, r3
 80006e0:	0013      	movs	r3, r2
 80006e2:	1e5a      	subs	r2, r3, #1
 80006e4:	4193      	sbcs	r3, r2
 80006e6:	430b      	orrs	r3, r1
 80006e8:	e722      	b.n	8000530 <__aeabi_fadd+0x9c>
 80006ea:	2d00      	cmp	r5, #0
 80006ec:	d146      	bne.n	800077c <__aeabi_fadd+0x2e8>
 80006ee:	2f00      	cmp	r7, #0
 80006f0:	d062      	beq.n	80007b8 <__aeabi_fadd+0x324>
 80006f2:	4663      	mov	r3, ip
 80006f4:	2000      	movs	r0, #0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d100      	bne.n	80006fc <__aeabi_fadd+0x268>
 80006fa:	e752      	b.n	80005a2 <__aeabi_fadd+0x10e>
 80006fc:	003b      	movs	r3, r7
 80006fe:	4463      	add	r3, ip
 8000700:	015a      	lsls	r2, r3, #5
 8000702:	d583      	bpl.n	800060c <__aeabi_fadd+0x178>
 8000704:	4a32      	ldr	r2, [pc, #200]	; (80007d0 <__aeabi_fadd+0x33c>)
 8000706:	3501      	adds	r5, #1
 8000708:	4013      	ands	r3, r2
 800070a:	e77f      	b.n	800060c <__aeabi_fadd+0x178>
 800070c:	2f00      	cmp	r7, #0
 800070e:	d0c4      	beq.n	800069a <__aeabi_fadd+0x206>
 8000710:	1e53      	subs	r3, r2, #1
 8000712:	2a01      	cmp	r2, #1
 8000714:	d012      	beq.n	800073c <__aeabi_fadd+0x2a8>
 8000716:	2aff      	cmp	r2, #255	; 0xff
 8000718:	d08c      	beq.n	8000634 <__aeabi_fadd+0x1a0>
 800071a:	001a      	movs	r2, r3
 800071c:	e79e      	b.n	800065c <__aeabi_fadd+0x1c8>
 800071e:	2f00      	cmp	r7, #0
 8000720:	d000      	beq.n	8000724 <__aeabi_fadd+0x290>
 8000722:	e77c      	b.n	800061e <__aeabi_fadd+0x18a>
 8000724:	4663      	mov	r3, ip
 8000726:	2b00      	cmp	r3, #0
 8000728:	d183      	bne.n	8000632 <__aeabi_fadd+0x19e>
 800072a:	2680      	movs	r6, #128	; 0x80
 800072c:	2400      	movs	r4, #0
 800072e:	20ff      	movs	r0, #255	; 0xff
 8000730:	03f6      	lsls	r6, r6, #15
 8000732:	e736      	b.n	80005a2 <__aeabi_fadd+0x10e>
 8000734:	4663      	mov	r3, ip
 8000736:	000c      	movs	r4, r1
 8000738:	1bde      	subs	r6, r3, r7
 800073a:	e717      	b.n	800056c <__aeabi_fadd+0xd8>
 800073c:	003b      	movs	r3, r7
 800073e:	4463      	add	r3, ip
 8000740:	2501      	movs	r5, #1
 8000742:	015a      	lsls	r2, r3, #5
 8000744:	d400      	bmi.n	8000748 <__aeabi_fadd+0x2b4>
 8000746:	e761      	b.n	800060c <__aeabi_fadd+0x178>
 8000748:	2502      	movs	r5, #2
 800074a:	e6f7      	b.n	800053c <__aeabi_fadd+0xa8>
 800074c:	4663      	mov	r3, ip
 800074e:	2501      	movs	r5, #1
 8000750:	1afb      	subs	r3, r7, r3
 8000752:	e707      	b.n	8000564 <__aeabi_fadd+0xd0>
 8000754:	2320      	movs	r3, #32
 8000756:	1a9b      	subs	r3, r3, r2
 8000758:	0038      	movs	r0, r7
 800075a:	409f      	lsls	r7, r3
 800075c:	003b      	movs	r3, r7
 800075e:	40d0      	lsrs	r0, r2
 8000760:	1e5a      	subs	r2, r3, #1
 8000762:	4193      	sbcs	r3, r2
 8000764:	4303      	orrs	r3, r0
 8000766:	e7ae      	b.n	80006c6 <__aeabi_fadd+0x232>
 8000768:	2320      	movs	r3, #32
 800076a:	1a9b      	subs	r3, r3, r2
 800076c:	0039      	movs	r1, r7
 800076e:	409f      	lsls	r7, r3
 8000770:	003b      	movs	r3, r7
 8000772:	40d1      	lsrs	r1, r2
 8000774:	1e5a      	subs	r2, r3, #1
 8000776:	4193      	sbcs	r3, r2
 8000778:	430b      	orrs	r3, r1
 800077a:	e773      	b.n	8000664 <__aeabi_fadd+0x1d0>
 800077c:	2f00      	cmp	r7, #0
 800077e:	d100      	bne.n	8000782 <__aeabi_fadd+0x2ee>
 8000780:	e758      	b.n	8000634 <__aeabi_fadd+0x1a0>
 8000782:	4662      	mov	r2, ip
 8000784:	2a00      	cmp	r2, #0
 8000786:	d100      	bne.n	800078a <__aeabi_fadd+0x2f6>
 8000788:	e755      	b.n	8000636 <__aeabi_fadd+0x1a2>
 800078a:	2280      	movs	r2, #128	; 0x80
 800078c:	03d2      	lsls	r2, r2, #15
 800078e:	4213      	tst	r3, r2
 8000790:	d100      	bne.n	8000794 <__aeabi_fadd+0x300>
 8000792:	e750      	b.n	8000636 <__aeabi_fadd+0x1a2>
 8000794:	4641      	mov	r1, r8
 8000796:	4211      	tst	r1, r2
 8000798:	d000      	beq.n	800079c <__aeabi_fadd+0x308>
 800079a:	e74c      	b.n	8000636 <__aeabi_fadd+0x1a2>
 800079c:	4643      	mov	r3, r8
 800079e:	e74a      	b.n	8000636 <__aeabi_fadd+0x1a2>
 80007a0:	4663      	mov	r3, ip
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d083      	beq.n	80006ae <__aeabi_fadd+0x21a>
 80007a6:	000c      	movs	r4, r1
 80007a8:	4646      	mov	r6, r8
 80007aa:	2000      	movs	r0, #0
 80007ac:	e6f9      	b.n	80005a2 <__aeabi_fadd+0x10e>
 80007ae:	4663      	mov	r3, ip
 80007b0:	000c      	movs	r4, r1
 80007b2:	1bdb      	subs	r3, r3, r7
 80007b4:	3501      	adds	r5, #1
 80007b6:	e6d5      	b.n	8000564 <__aeabi_fadd+0xd0>
 80007b8:	4646      	mov	r6, r8
 80007ba:	2000      	movs	r0, #0
 80007bc:	e6f1      	b.n	80005a2 <__aeabi_fadd+0x10e>
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d000      	beq.n	80007c4 <__aeabi_fadd+0x330>
 80007c2:	e723      	b.n	800060c <__aeabi_fadd+0x178>
 80007c4:	2400      	movs	r4, #0
 80007c6:	2600      	movs	r6, #0
 80007c8:	e6eb      	b.n	80005a2 <__aeabi_fadd+0x10e>
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	7dffffff 	.word	0x7dffffff
 80007d0:	fbffffff 	.word	0xfbffffff

080007d4 <__aeabi_fdiv>:
 80007d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007d6:	464f      	mov	r7, r9
 80007d8:	4646      	mov	r6, r8
 80007da:	46d6      	mov	lr, sl
 80007dc:	0245      	lsls	r5, r0, #9
 80007de:	b5c0      	push	{r6, r7, lr}
 80007e0:	0047      	lsls	r7, r0, #1
 80007e2:	1c0c      	adds	r4, r1, #0
 80007e4:	0a6d      	lsrs	r5, r5, #9
 80007e6:	0e3f      	lsrs	r7, r7, #24
 80007e8:	0fc6      	lsrs	r6, r0, #31
 80007ea:	2f00      	cmp	r7, #0
 80007ec:	d100      	bne.n	80007f0 <__aeabi_fdiv+0x1c>
 80007ee:	e06f      	b.n	80008d0 <__aeabi_fdiv+0xfc>
 80007f0:	2fff      	cmp	r7, #255	; 0xff
 80007f2:	d100      	bne.n	80007f6 <__aeabi_fdiv+0x22>
 80007f4:	e074      	b.n	80008e0 <__aeabi_fdiv+0x10c>
 80007f6:	2300      	movs	r3, #0
 80007f8:	2280      	movs	r2, #128	; 0x80
 80007fa:	4699      	mov	r9, r3
 80007fc:	469a      	mov	sl, r3
 80007fe:	00ed      	lsls	r5, r5, #3
 8000800:	04d2      	lsls	r2, r2, #19
 8000802:	4315      	orrs	r5, r2
 8000804:	3f7f      	subs	r7, #127	; 0x7f
 8000806:	0263      	lsls	r3, r4, #9
 8000808:	0a5b      	lsrs	r3, r3, #9
 800080a:	4698      	mov	r8, r3
 800080c:	0063      	lsls	r3, r4, #1
 800080e:	0e1b      	lsrs	r3, r3, #24
 8000810:	0fe4      	lsrs	r4, r4, #31
 8000812:	2b00      	cmp	r3, #0
 8000814:	d04d      	beq.n	80008b2 <__aeabi_fdiv+0xde>
 8000816:	2bff      	cmp	r3, #255	; 0xff
 8000818:	d045      	beq.n	80008a6 <__aeabi_fdiv+0xd2>
 800081a:	4642      	mov	r2, r8
 800081c:	2180      	movs	r1, #128	; 0x80
 800081e:	00d2      	lsls	r2, r2, #3
 8000820:	04c9      	lsls	r1, r1, #19
 8000822:	4311      	orrs	r1, r2
 8000824:	4688      	mov	r8, r1
 8000826:	2200      	movs	r2, #0
 8000828:	3b7f      	subs	r3, #127	; 0x7f
 800082a:	0031      	movs	r1, r6
 800082c:	1aff      	subs	r7, r7, r3
 800082e:	464b      	mov	r3, r9
 8000830:	4061      	eors	r1, r4
 8000832:	b2c9      	uxtb	r1, r1
 8000834:	2b0f      	cmp	r3, #15
 8000836:	d900      	bls.n	800083a <__aeabi_fdiv+0x66>
 8000838:	e0b8      	b.n	80009ac <__aeabi_fdiv+0x1d8>
 800083a:	4870      	ldr	r0, [pc, #448]	; (80009fc <__aeabi_fdiv+0x228>)
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	58c3      	ldr	r3, [r0, r3]
 8000840:	469f      	mov	pc, r3
 8000842:	2300      	movs	r3, #0
 8000844:	4698      	mov	r8, r3
 8000846:	0026      	movs	r6, r4
 8000848:	4645      	mov	r5, r8
 800084a:	4692      	mov	sl, r2
 800084c:	4653      	mov	r3, sl
 800084e:	2b02      	cmp	r3, #2
 8000850:	d100      	bne.n	8000854 <__aeabi_fdiv+0x80>
 8000852:	e08d      	b.n	8000970 <__aeabi_fdiv+0x19c>
 8000854:	2b03      	cmp	r3, #3
 8000856:	d100      	bne.n	800085a <__aeabi_fdiv+0x86>
 8000858:	e0a1      	b.n	800099e <__aeabi_fdiv+0x1ca>
 800085a:	2b01      	cmp	r3, #1
 800085c:	d018      	beq.n	8000890 <__aeabi_fdiv+0xbc>
 800085e:	003b      	movs	r3, r7
 8000860:	337f      	adds	r3, #127	; 0x7f
 8000862:	2b00      	cmp	r3, #0
 8000864:	dd6d      	ble.n	8000942 <__aeabi_fdiv+0x16e>
 8000866:	076a      	lsls	r2, r5, #29
 8000868:	d004      	beq.n	8000874 <__aeabi_fdiv+0xa0>
 800086a:	220f      	movs	r2, #15
 800086c:	402a      	ands	r2, r5
 800086e:	2a04      	cmp	r2, #4
 8000870:	d000      	beq.n	8000874 <__aeabi_fdiv+0xa0>
 8000872:	3504      	adds	r5, #4
 8000874:	012a      	lsls	r2, r5, #4
 8000876:	d503      	bpl.n	8000880 <__aeabi_fdiv+0xac>
 8000878:	4b61      	ldr	r3, [pc, #388]	; (8000a00 <__aeabi_fdiv+0x22c>)
 800087a:	401d      	ands	r5, r3
 800087c:	003b      	movs	r3, r7
 800087e:	3380      	adds	r3, #128	; 0x80
 8000880:	2bfe      	cmp	r3, #254	; 0xfe
 8000882:	dd00      	ble.n	8000886 <__aeabi_fdiv+0xb2>
 8000884:	e074      	b.n	8000970 <__aeabi_fdiv+0x19c>
 8000886:	01aa      	lsls	r2, r5, #6
 8000888:	0a52      	lsrs	r2, r2, #9
 800088a:	b2d8      	uxtb	r0, r3
 800088c:	e002      	b.n	8000894 <__aeabi_fdiv+0xc0>
 800088e:	000e      	movs	r6, r1
 8000890:	2000      	movs	r0, #0
 8000892:	2200      	movs	r2, #0
 8000894:	05c0      	lsls	r0, r0, #23
 8000896:	07f6      	lsls	r6, r6, #31
 8000898:	4310      	orrs	r0, r2
 800089a:	4330      	orrs	r0, r6
 800089c:	bce0      	pop	{r5, r6, r7}
 800089e:	46ba      	mov	sl, r7
 80008a0:	46b1      	mov	r9, r6
 80008a2:	46a8      	mov	r8, r5
 80008a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008a6:	4643      	mov	r3, r8
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d13f      	bne.n	800092c <__aeabi_fdiv+0x158>
 80008ac:	2202      	movs	r2, #2
 80008ae:	3fff      	subs	r7, #255	; 0xff
 80008b0:	e003      	b.n	80008ba <__aeabi_fdiv+0xe6>
 80008b2:	4643      	mov	r3, r8
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d12d      	bne.n	8000914 <__aeabi_fdiv+0x140>
 80008b8:	2201      	movs	r2, #1
 80008ba:	0031      	movs	r1, r6
 80008bc:	464b      	mov	r3, r9
 80008be:	4061      	eors	r1, r4
 80008c0:	b2c9      	uxtb	r1, r1
 80008c2:	4313      	orrs	r3, r2
 80008c4:	2b0f      	cmp	r3, #15
 80008c6:	d838      	bhi.n	800093a <__aeabi_fdiv+0x166>
 80008c8:	484e      	ldr	r0, [pc, #312]	; (8000a04 <__aeabi_fdiv+0x230>)
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	58c3      	ldr	r3, [r0, r3]
 80008ce:	469f      	mov	pc, r3
 80008d0:	2d00      	cmp	r5, #0
 80008d2:	d113      	bne.n	80008fc <__aeabi_fdiv+0x128>
 80008d4:	2304      	movs	r3, #4
 80008d6:	4699      	mov	r9, r3
 80008d8:	3b03      	subs	r3, #3
 80008da:	2700      	movs	r7, #0
 80008dc:	469a      	mov	sl, r3
 80008de:	e792      	b.n	8000806 <__aeabi_fdiv+0x32>
 80008e0:	2d00      	cmp	r5, #0
 80008e2:	d105      	bne.n	80008f0 <__aeabi_fdiv+0x11c>
 80008e4:	2308      	movs	r3, #8
 80008e6:	4699      	mov	r9, r3
 80008e8:	3b06      	subs	r3, #6
 80008ea:	27ff      	movs	r7, #255	; 0xff
 80008ec:	469a      	mov	sl, r3
 80008ee:	e78a      	b.n	8000806 <__aeabi_fdiv+0x32>
 80008f0:	230c      	movs	r3, #12
 80008f2:	4699      	mov	r9, r3
 80008f4:	3b09      	subs	r3, #9
 80008f6:	27ff      	movs	r7, #255	; 0xff
 80008f8:	469a      	mov	sl, r3
 80008fa:	e784      	b.n	8000806 <__aeabi_fdiv+0x32>
 80008fc:	0028      	movs	r0, r5
 80008fe:	f001 fbb1 	bl	8002064 <__clzsi2>
 8000902:	2776      	movs	r7, #118	; 0x76
 8000904:	1f43      	subs	r3, r0, #5
 8000906:	409d      	lsls	r5, r3
 8000908:	2300      	movs	r3, #0
 800090a:	427f      	negs	r7, r7
 800090c:	4699      	mov	r9, r3
 800090e:	469a      	mov	sl, r3
 8000910:	1a3f      	subs	r7, r7, r0
 8000912:	e778      	b.n	8000806 <__aeabi_fdiv+0x32>
 8000914:	4640      	mov	r0, r8
 8000916:	f001 fba5 	bl	8002064 <__clzsi2>
 800091a:	4642      	mov	r2, r8
 800091c:	1f43      	subs	r3, r0, #5
 800091e:	409a      	lsls	r2, r3
 8000920:	2376      	movs	r3, #118	; 0x76
 8000922:	425b      	negs	r3, r3
 8000924:	4690      	mov	r8, r2
 8000926:	1a1b      	subs	r3, r3, r0
 8000928:	2200      	movs	r2, #0
 800092a:	e77e      	b.n	800082a <__aeabi_fdiv+0x56>
 800092c:	2303      	movs	r3, #3
 800092e:	464a      	mov	r2, r9
 8000930:	431a      	orrs	r2, r3
 8000932:	4691      	mov	r9, r2
 8000934:	33fc      	adds	r3, #252	; 0xfc
 8000936:	2203      	movs	r2, #3
 8000938:	e777      	b.n	800082a <__aeabi_fdiv+0x56>
 800093a:	000e      	movs	r6, r1
 800093c:	20ff      	movs	r0, #255	; 0xff
 800093e:	2200      	movs	r2, #0
 8000940:	e7a8      	b.n	8000894 <__aeabi_fdiv+0xc0>
 8000942:	2201      	movs	r2, #1
 8000944:	1ad3      	subs	r3, r2, r3
 8000946:	2b1b      	cmp	r3, #27
 8000948:	dca2      	bgt.n	8000890 <__aeabi_fdiv+0xbc>
 800094a:	379e      	adds	r7, #158	; 0x9e
 800094c:	002a      	movs	r2, r5
 800094e:	40bd      	lsls	r5, r7
 8000950:	40da      	lsrs	r2, r3
 8000952:	1e6b      	subs	r3, r5, #1
 8000954:	419d      	sbcs	r5, r3
 8000956:	4315      	orrs	r5, r2
 8000958:	076a      	lsls	r2, r5, #29
 800095a:	d004      	beq.n	8000966 <__aeabi_fdiv+0x192>
 800095c:	220f      	movs	r2, #15
 800095e:	402a      	ands	r2, r5
 8000960:	2a04      	cmp	r2, #4
 8000962:	d000      	beq.n	8000966 <__aeabi_fdiv+0x192>
 8000964:	3504      	adds	r5, #4
 8000966:	016a      	lsls	r2, r5, #5
 8000968:	d544      	bpl.n	80009f4 <__aeabi_fdiv+0x220>
 800096a:	2001      	movs	r0, #1
 800096c:	2200      	movs	r2, #0
 800096e:	e791      	b.n	8000894 <__aeabi_fdiv+0xc0>
 8000970:	20ff      	movs	r0, #255	; 0xff
 8000972:	2200      	movs	r2, #0
 8000974:	e78e      	b.n	8000894 <__aeabi_fdiv+0xc0>
 8000976:	2280      	movs	r2, #128	; 0x80
 8000978:	2600      	movs	r6, #0
 800097a:	20ff      	movs	r0, #255	; 0xff
 800097c:	03d2      	lsls	r2, r2, #15
 800097e:	e789      	b.n	8000894 <__aeabi_fdiv+0xc0>
 8000980:	2300      	movs	r3, #0
 8000982:	4698      	mov	r8, r3
 8000984:	2280      	movs	r2, #128	; 0x80
 8000986:	03d2      	lsls	r2, r2, #15
 8000988:	4215      	tst	r5, r2
 800098a:	d008      	beq.n	800099e <__aeabi_fdiv+0x1ca>
 800098c:	4643      	mov	r3, r8
 800098e:	4213      	tst	r3, r2
 8000990:	d105      	bne.n	800099e <__aeabi_fdiv+0x1ca>
 8000992:	431a      	orrs	r2, r3
 8000994:	0252      	lsls	r2, r2, #9
 8000996:	0026      	movs	r6, r4
 8000998:	20ff      	movs	r0, #255	; 0xff
 800099a:	0a52      	lsrs	r2, r2, #9
 800099c:	e77a      	b.n	8000894 <__aeabi_fdiv+0xc0>
 800099e:	2280      	movs	r2, #128	; 0x80
 80009a0:	03d2      	lsls	r2, r2, #15
 80009a2:	432a      	orrs	r2, r5
 80009a4:	0252      	lsls	r2, r2, #9
 80009a6:	20ff      	movs	r0, #255	; 0xff
 80009a8:	0a52      	lsrs	r2, r2, #9
 80009aa:	e773      	b.n	8000894 <__aeabi_fdiv+0xc0>
 80009ac:	4642      	mov	r2, r8
 80009ae:	016b      	lsls	r3, r5, #5
 80009b0:	0155      	lsls	r5, r2, #5
 80009b2:	42ab      	cmp	r3, r5
 80009b4:	d21a      	bcs.n	80009ec <__aeabi_fdiv+0x218>
 80009b6:	201b      	movs	r0, #27
 80009b8:	2200      	movs	r2, #0
 80009ba:	3f01      	subs	r7, #1
 80009bc:	2601      	movs	r6, #1
 80009be:	001c      	movs	r4, r3
 80009c0:	0052      	lsls	r2, r2, #1
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	2c00      	cmp	r4, #0
 80009c6:	db01      	blt.n	80009cc <__aeabi_fdiv+0x1f8>
 80009c8:	429d      	cmp	r5, r3
 80009ca:	d801      	bhi.n	80009d0 <__aeabi_fdiv+0x1fc>
 80009cc:	1b5b      	subs	r3, r3, r5
 80009ce:	4332      	orrs	r2, r6
 80009d0:	3801      	subs	r0, #1
 80009d2:	2800      	cmp	r0, #0
 80009d4:	d1f3      	bne.n	80009be <__aeabi_fdiv+0x1ea>
 80009d6:	1e58      	subs	r0, r3, #1
 80009d8:	4183      	sbcs	r3, r0
 80009da:	4313      	orrs	r3, r2
 80009dc:	001d      	movs	r5, r3
 80009de:	003b      	movs	r3, r7
 80009e0:	337f      	adds	r3, #127	; 0x7f
 80009e2:	000e      	movs	r6, r1
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	dd00      	ble.n	80009ea <__aeabi_fdiv+0x216>
 80009e8:	e73d      	b.n	8000866 <__aeabi_fdiv+0x92>
 80009ea:	e7aa      	b.n	8000942 <__aeabi_fdiv+0x16e>
 80009ec:	201a      	movs	r0, #26
 80009ee:	2201      	movs	r2, #1
 80009f0:	1b5b      	subs	r3, r3, r5
 80009f2:	e7e3      	b.n	80009bc <__aeabi_fdiv+0x1e8>
 80009f4:	01aa      	lsls	r2, r5, #6
 80009f6:	2000      	movs	r0, #0
 80009f8:	0a52      	lsrs	r2, r2, #9
 80009fa:	e74b      	b.n	8000894 <__aeabi_fdiv+0xc0>
 80009fc:	08006008 	.word	0x08006008
 8000a00:	f7ffffff 	.word	0xf7ffffff
 8000a04:	08006048 	.word	0x08006048

08000a08 <__eqsf2>:
 8000a08:	b570      	push	{r4, r5, r6, lr}
 8000a0a:	0042      	lsls	r2, r0, #1
 8000a0c:	0245      	lsls	r5, r0, #9
 8000a0e:	024e      	lsls	r6, r1, #9
 8000a10:	004c      	lsls	r4, r1, #1
 8000a12:	0fc3      	lsrs	r3, r0, #31
 8000a14:	0a6d      	lsrs	r5, r5, #9
 8000a16:	2001      	movs	r0, #1
 8000a18:	0e12      	lsrs	r2, r2, #24
 8000a1a:	0a76      	lsrs	r6, r6, #9
 8000a1c:	0e24      	lsrs	r4, r4, #24
 8000a1e:	0fc9      	lsrs	r1, r1, #31
 8000a20:	2aff      	cmp	r2, #255	; 0xff
 8000a22:	d006      	beq.n	8000a32 <__eqsf2+0x2a>
 8000a24:	2cff      	cmp	r4, #255	; 0xff
 8000a26:	d003      	beq.n	8000a30 <__eqsf2+0x28>
 8000a28:	42a2      	cmp	r2, r4
 8000a2a:	d101      	bne.n	8000a30 <__eqsf2+0x28>
 8000a2c:	42b5      	cmp	r5, r6
 8000a2e:	d006      	beq.n	8000a3e <__eqsf2+0x36>
 8000a30:	bd70      	pop	{r4, r5, r6, pc}
 8000a32:	2d00      	cmp	r5, #0
 8000a34:	d1fc      	bne.n	8000a30 <__eqsf2+0x28>
 8000a36:	2cff      	cmp	r4, #255	; 0xff
 8000a38:	d1fa      	bne.n	8000a30 <__eqsf2+0x28>
 8000a3a:	2e00      	cmp	r6, #0
 8000a3c:	d1f8      	bne.n	8000a30 <__eqsf2+0x28>
 8000a3e:	428b      	cmp	r3, r1
 8000a40:	d006      	beq.n	8000a50 <__eqsf2+0x48>
 8000a42:	2001      	movs	r0, #1
 8000a44:	2a00      	cmp	r2, #0
 8000a46:	d1f3      	bne.n	8000a30 <__eqsf2+0x28>
 8000a48:	0028      	movs	r0, r5
 8000a4a:	1e43      	subs	r3, r0, #1
 8000a4c:	4198      	sbcs	r0, r3
 8000a4e:	e7ef      	b.n	8000a30 <__eqsf2+0x28>
 8000a50:	2000      	movs	r0, #0
 8000a52:	e7ed      	b.n	8000a30 <__eqsf2+0x28>

08000a54 <__gesf2>:
 8000a54:	b570      	push	{r4, r5, r6, lr}
 8000a56:	0042      	lsls	r2, r0, #1
 8000a58:	0245      	lsls	r5, r0, #9
 8000a5a:	024e      	lsls	r6, r1, #9
 8000a5c:	004c      	lsls	r4, r1, #1
 8000a5e:	0fc3      	lsrs	r3, r0, #31
 8000a60:	0a6d      	lsrs	r5, r5, #9
 8000a62:	0e12      	lsrs	r2, r2, #24
 8000a64:	0a76      	lsrs	r6, r6, #9
 8000a66:	0e24      	lsrs	r4, r4, #24
 8000a68:	0fc8      	lsrs	r0, r1, #31
 8000a6a:	2aff      	cmp	r2, #255	; 0xff
 8000a6c:	d01b      	beq.n	8000aa6 <__gesf2+0x52>
 8000a6e:	2cff      	cmp	r4, #255	; 0xff
 8000a70:	d00e      	beq.n	8000a90 <__gesf2+0x3c>
 8000a72:	2a00      	cmp	r2, #0
 8000a74:	d11b      	bne.n	8000aae <__gesf2+0x5a>
 8000a76:	2c00      	cmp	r4, #0
 8000a78:	d101      	bne.n	8000a7e <__gesf2+0x2a>
 8000a7a:	2e00      	cmp	r6, #0
 8000a7c:	d01c      	beq.n	8000ab8 <__gesf2+0x64>
 8000a7e:	2d00      	cmp	r5, #0
 8000a80:	d00c      	beq.n	8000a9c <__gesf2+0x48>
 8000a82:	4283      	cmp	r3, r0
 8000a84:	d01c      	beq.n	8000ac0 <__gesf2+0x6c>
 8000a86:	2102      	movs	r1, #2
 8000a88:	1e58      	subs	r0, r3, #1
 8000a8a:	4008      	ands	r0, r1
 8000a8c:	3801      	subs	r0, #1
 8000a8e:	bd70      	pop	{r4, r5, r6, pc}
 8000a90:	2e00      	cmp	r6, #0
 8000a92:	d122      	bne.n	8000ada <__gesf2+0x86>
 8000a94:	2a00      	cmp	r2, #0
 8000a96:	d1f4      	bne.n	8000a82 <__gesf2+0x2e>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d1f2      	bne.n	8000a82 <__gesf2+0x2e>
 8000a9c:	2800      	cmp	r0, #0
 8000a9e:	d1f6      	bne.n	8000a8e <__gesf2+0x3a>
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	4240      	negs	r0, r0
 8000aa4:	e7f3      	b.n	8000a8e <__gesf2+0x3a>
 8000aa6:	2d00      	cmp	r5, #0
 8000aa8:	d117      	bne.n	8000ada <__gesf2+0x86>
 8000aaa:	2cff      	cmp	r4, #255	; 0xff
 8000aac:	d0f0      	beq.n	8000a90 <__gesf2+0x3c>
 8000aae:	2c00      	cmp	r4, #0
 8000ab0:	d1e7      	bne.n	8000a82 <__gesf2+0x2e>
 8000ab2:	2e00      	cmp	r6, #0
 8000ab4:	d1e5      	bne.n	8000a82 <__gesf2+0x2e>
 8000ab6:	e7e6      	b.n	8000a86 <__gesf2+0x32>
 8000ab8:	2000      	movs	r0, #0
 8000aba:	2d00      	cmp	r5, #0
 8000abc:	d0e7      	beq.n	8000a8e <__gesf2+0x3a>
 8000abe:	e7e2      	b.n	8000a86 <__gesf2+0x32>
 8000ac0:	42a2      	cmp	r2, r4
 8000ac2:	dc05      	bgt.n	8000ad0 <__gesf2+0x7c>
 8000ac4:	dbea      	blt.n	8000a9c <__gesf2+0x48>
 8000ac6:	42b5      	cmp	r5, r6
 8000ac8:	d802      	bhi.n	8000ad0 <__gesf2+0x7c>
 8000aca:	d3e7      	bcc.n	8000a9c <__gesf2+0x48>
 8000acc:	2000      	movs	r0, #0
 8000ace:	e7de      	b.n	8000a8e <__gesf2+0x3a>
 8000ad0:	4243      	negs	r3, r0
 8000ad2:	4158      	adcs	r0, r3
 8000ad4:	0040      	lsls	r0, r0, #1
 8000ad6:	3801      	subs	r0, #1
 8000ad8:	e7d9      	b.n	8000a8e <__gesf2+0x3a>
 8000ada:	2002      	movs	r0, #2
 8000adc:	4240      	negs	r0, r0
 8000ade:	e7d6      	b.n	8000a8e <__gesf2+0x3a>

08000ae0 <__lesf2>:
 8000ae0:	b570      	push	{r4, r5, r6, lr}
 8000ae2:	0042      	lsls	r2, r0, #1
 8000ae4:	0245      	lsls	r5, r0, #9
 8000ae6:	024e      	lsls	r6, r1, #9
 8000ae8:	004c      	lsls	r4, r1, #1
 8000aea:	0fc3      	lsrs	r3, r0, #31
 8000aec:	0a6d      	lsrs	r5, r5, #9
 8000aee:	0e12      	lsrs	r2, r2, #24
 8000af0:	0a76      	lsrs	r6, r6, #9
 8000af2:	0e24      	lsrs	r4, r4, #24
 8000af4:	0fc8      	lsrs	r0, r1, #31
 8000af6:	2aff      	cmp	r2, #255	; 0xff
 8000af8:	d00b      	beq.n	8000b12 <__lesf2+0x32>
 8000afa:	2cff      	cmp	r4, #255	; 0xff
 8000afc:	d00d      	beq.n	8000b1a <__lesf2+0x3a>
 8000afe:	2a00      	cmp	r2, #0
 8000b00:	d11f      	bne.n	8000b42 <__lesf2+0x62>
 8000b02:	2c00      	cmp	r4, #0
 8000b04:	d116      	bne.n	8000b34 <__lesf2+0x54>
 8000b06:	2e00      	cmp	r6, #0
 8000b08:	d114      	bne.n	8000b34 <__lesf2+0x54>
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	2d00      	cmp	r5, #0
 8000b0e:	d010      	beq.n	8000b32 <__lesf2+0x52>
 8000b10:	e009      	b.n	8000b26 <__lesf2+0x46>
 8000b12:	2d00      	cmp	r5, #0
 8000b14:	d10c      	bne.n	8000b30 <__lesf2+0x50>
 8000b16:	2cff      	cmp	r4, #255	; 0xff
 8000b18:	d113      	bne.n	8000b42 <__lesf2+0x62>
 8000b1a:	2e00      	cmp	r6, #0
 8000b1c:	d108      	bne.n	8000b30 <__lesf2+0x50>
 8000b1e:	2a00      	cmp	r2, #0
 8000b20:	d008      	beq.n	8000b34 <__lesf2+0x54>
 8000b22:	4283      	cmp	r3, r0
 8000b24:	d012      	beq.n	8000b4c <__lesf2+0x6c>
 8000b26:	2102      	movs	r1, #2
 8000b28:	1e58      	subs	r0, r3, #1
 8000b2a:	4008      	ands	r0, r1
 8000b2c:	3801      	subs	r0, #1
 8000b2e:	e000      	b.n	8000b32 <__lesf2+0x52>
 8000b30:	2002      	movs	r0, #2
 8000b32:	bd70      	pop	{r4, r5, r6, pc}
 8000b34:	2d00      	cmp	r5, #0
 8000b36:	d1f4      	bne.n	8000b22 <__lesf2+0x42>
 8000b38:	2800      	cmp	r0, #0
 8000b3a:	d1fa      	bne.n	8000b32 <__lesf2+0x52>
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	4240      	negs	r0, r0
 8000b40:	e7f7      	b.n	8000b32 <__lesf2+0x52>
 8000b42:	2c00      	cmp	r4, #0
 8000b44:	d1ed      	bne.n	8000b22 <__lesf2+0x42>
 8000b46:	2e00      	cmp	r6, #0
 8000b48:	d1eb      	bne.n	8000b22 <__lesf2+0x42>
 8000b4a:	e7ec      	b.n	8000b26 <__lesf2+0x46>
 8000b4c:	42a2      	cmp	r2, r4
 8000b4e:	dc05      	bgt.n	8000b5c <__lesf2+0x7c>
 8000b50:	dbf2      	blt.n	8000b38 <__lesf2+0x58>
 8000b52:	42b5      	cmp	r5, r6
 8000b54:	d802      	bhi.n	8000b5c <__lesf2+0x7c>
 8000b56:	d3ef      	bcc.n	8000b38 <__lesf2+0x58>
 8000b58:	2000      	movs	r0, #0
 8000b5a:	e7ea      	b.n	8000b32 <__lesf2+0x52>
 8000b5c:	4243      	negs	r3, r0
 8000b5e:	4158      	adcs	r0, r3
 8000b60:	0040      	lsls	r0, r0, #1
 8000b62:	3801      	subs	r0, #1
 8000b64:	e7e5      	b.n	8000b32 <__lesf2+0x52>
 8000b66:	46c0      	nop			; (mov r8, r8)

08000b68 <__aeabi_fmul>:
 8000b68:	0243      	lsls	r3, r0, #9
 8000b6a:	0a5b      	lsrs	r3, r3, #9
 8000b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b6e:	464f      	mov	r7, r9
 8000b70:	4646      	mov	r6, r8
 8000b72:	4699      	mov	r9, r3
 8000b74:	46d6      	mov	lr, sl
 8000b76:	0fc3      	lsrs	r3, r0, #31
 8000b78:	0045      	lsls	r5, r0, #1
 8000b7a:	4698      	mov	r8, r3
 8000b7c:	b5c0      	push	{r6, r7, lr}
 8000b7e:	464b      	mov	r3, r9
 8000b80:	1c0f      	adds	r7, r1, #0
 8000b82:	0e2d      	lsrs	r5, r5, #24
 8000b84:	d100      	bne.n	8000b88 <__aeabi_fmul+0x20>
 8000b86:	e0cb      	b.n	8000d20 <__aeabi_fmul+0x1b8>
 8000b88:	2dff      	cmp	r5, #255	; 0xff
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fmul+0x26>
 8000b8c:	e0cf      	b.n	8000d2e <__aeabi_fmul+0x1c6>
 8000b8e:	2280      	movs	r2, #128	; 0x80
 8000b90:	00db      	lsls	r3, r3, #3
 8000b92:	04d2      	lsls	r2, r2, #19
 8000b94:	431a      	orrs	r2, r3
 8000b96:	2300      	movs	r3, #0
 8000b98:	4691      	mov	r9, r2
 8000b9a:	2600      	movs	r6, #0
 8000b9c:	469a      	mov	sl, r3
 8000b9e:	3d7f      	subs	r5, #127	; 0x7f
 8000ba0:	027c      	lsls	r4, r7, #9
 8000ba2:	007b      	lsls	r3, r7, #1
 8000ba4:	0a64      	lsrs	r4, r4, #9
 8000ba6:	0e1b      	lsrs	r3, r3, #24
 8000ba8:	0fff      	lsrs	r7, r7, #31
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d100      	bne.n	8000bb0 <__aeabi_fmul+0x48>
 8000bae:	e0a9      	b.n	8000d04 <__aeabi_fmul+0x19c>
 8000bb0:	2bff      	cmp	r3, #255	; 0xff
 8000bb2:	d011      	beq.n	8000bd8 <__aeabi_fmul+0x70>
 8000bb4:	2280      	movs	r2, #128	; 0x80
 8000bb6:	00e4      	lsls	r4, r4, #3
 8000bb8:	04d2      	lsls	r2, r2, #19
 8000bba:	4314      	orrs	r4, r2
 8000bbc:	4642      	mov	r2, r8
 8000bbe:	3b7f      	subs	r3, #127	; 0x7f
 8000bc0:	195b      	adds	r3, r3, r5
 8000bc2:	407a      	eors	r2, r7
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	b2d2      	uxtb	r2, r2
 8000bc8:	1c5d      	adds	r5, r3, #1
 8000bca:	2e0a      	cmp	r6, #10
 8000bcc:	dd13      	ble.n	8000bf6 <__aeabi_fmul+0x8e>
 8000bce:	003a      	movs	r2, r7
 8000bd0:	2e0b      	cmp	r6, #11
 8000bd2:	d047      	beq.n	8000c64 <__aeabi_fmul+0xfc>
 8000bd4:	4647      	mov	r7, r8
 8000bd6:	e03f      	b.n	8000c58 <__aeabi_fmul+0xf0>
 8000bd8:	002b      	movs	r3, r5
 8000bda:	33ff      	adds	r3, #255	; 0xff
 8000bdc:	2c00      	cmp	r4, #0
 8000bde:	d11e      	bne.n	8000c1e <__aeabi_fmul+0xb6>
 8000be0:	2202      	movs	r2, #2
 8000be2:	4316      	orrs	r6, r2
 8000be4:	4642      	mov	r2, r8
 8000be6:	3501      	adds	r5, #1
 8000be8:	407a      	eors	r2, r7
 8000bea:	b2d2      	uxtb	r2, r2
 8000bec:	35ff      	adds	r5, #255	; 0xff
 8000bee:	2e0a      	cmp	r6, #10
 8000bf0:	dd00      	ble.n	8000bf4 <__aeabi_fmul+0x8c>
 8000bf2:	e0e4      	b.n	8000dbe <__aeabi_fmul+0x256>
 8000bf4:	2002      	movs	r0, #2
 8000bf6:	2e02      	cmp	r6, #2
 8000bf8:	dc1c      	bgt.n	8000c34 <__aeabi_fmul+0xcc>
 8000bfa:	3e01      	subs	r6, #1
 8000bfc:	2e01      	cmp	r6, #1
 8000bfe:	d842      	bhi.n	8000c86 <__aeabi_fmul+0x11e>
 8000c00:	2802      	cmp	r0, #2
 8000c02:	d03d      	beq.n	8000c80 <__aeabi_fmul+0x118>
 8000c04:	2801      	cmp	r0, #1
 8000c06:	d166      	bne.n	8000cd6 <__aeabi_fmul+0x16e>
 8000c08:	2000      	movs	r0, #0
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	05c0      	lsls	r0, r0, #23
 8000c0e:	4308      	orrs	r0, r1
 8000c10:	07d2      	lsls	r2, r2, #31
 8000c12:	4310      	orrs	r0, r2
 8000c14:	bce0      	pop	{r5, r6, r7}
 8000c16:	46ba      	mov	sl, r7
 8000c18:	46b1      	mov	r9, r6
 8000c1a:	46a8      	mov	r8, r5
 8000c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c1e:	2203      	movs	r2, #3
 8000c20:	4316      	orrs	r6, r2
 8000c22:	4642      	mov	r2, r8
 8000c24:	3501      	adds	r5, #1
 8000c26:	407a      	eors	r2, r7
 8000c28:	b2d2      	uxtb	r2, r2
 8000c2a:	35ff      	adds	r5, #255	; 0xff
 8000c2c:	2e0a      	cmp	r6, #10
 8000c2e:	dd00      	ble.n	8000c32 <__aeabi_fmul+0xca>
 8000c30:	e0e4      	b.n	8000dfc <__aeabi_fmul+0x294>
 8000c32:	2003      	movs	r0, #3
 8000c34:	2101      	movs	r1, #1
 8000c36:	40b1      	lsls	r1, r6
 8000c38:	26a6      	movs	r6, #166	; 0xa6
 8000c3a:	00f6      	lsls	r6, r6, #3
 8000c3c:	4231      	tst	r1, r6
 8000c3e:	d10a      	bne.n	8000c56 <__aeabi_fmul+0xee>
 8000c40:	2690      	movs	r6, #144	; 0x90
 8000c42:	00b6      	lsls	r6, r6, #2
 8000c44:	4231      	tst	r1, r6
 8000c46:	d116      	bne.n	8000c76 <__aeabi_fmul+0x10e>
 8000c48:	3eb9      	subs	r6, #185	; 0xb9
 8000c4a:	3eff      	subs	r6, #255	; 0xff
 8000c4c:	420e      	tst	r6, r1
 8000c4e:	d01a      	beq.n	8000c86 <__aeabi_fmul+0x11e>
 8000c50:	46a1      	mov	r9, r4
 8000c52:	4682      	mov	sl, r0
 8000c54:	e000      	b.n	8000c58 <__aeabi_fmul+0xf0>
 8000c56:	0017      	movs	r7, r2
 8000c58:	4653      	mov	r3, sl
 8000c5a:	003a      	movs	r2, r7
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d00f      	beq.n	8000c80 <__aeabi_fmul+0x118>
 8000c60:	464c      	mov	r4, r9
 8000c62:	4650      	mov	r0, sl
 8000c64:	2803      	cmp	r0, #3
 8000c66:	d1cd      	bne.n	8000c04 <__aeabi_fmul+0x9c>
 8000c68:	2180      	movs	r1, #128	; 0x80
 8000c6a:	03c9      	lsls	r1, r1, #15
 8000c6c:	4321      	orrs	r1, r4
 8000c6e:	0249      	lsls	r1, r1, #9
 8000c70:	20ff      	movs	r0, #255	; 0xff
 8000c72:	0a49      	lsrs	r1, r1, #9
 8000c74:	e7ca      	b.n	8000c0c <__aeabi_fmul+0xa4>
 8000c76:	2180      	movs	r1, #128	; 0x80
 8000c78:	2200      	movs	r2, #0
 8000c7a:	20ff      	movs	r0, #255	; 0xff
 8000c7c:	03c9      	lsls	r1, r1, #15
 8000c7e:	e7c5      	b.n	8000c0c <__aeabi_fmul+0xa4>
 8000c80:	20ff      	movs	r0, #255	; 0xff
 8000c82:	2100      	movs	r1, #0
 8000c84:	e7c2      	b.n	8000c0c <__aeabi_fmul+0xa4>
 8000c86:	0c20      	lsrs	r0, r4, #16
 8000c88:	4649      	mov	r1, r9
 8000c8a:	0424      	lsls	r4, r4, #16
 8000c8c:	0c24      	lsrs	r4, r4, #16
 8000c8e:	0027      	movs	r7, r4
 8000c90:	0c0e      	lsrs	r6, r1, #16
 8000c92:	0409      	lsls	r1, r1, #16
 8000c94:	0c09      	lsrs	r1, r1, #16
 8000c96:	4374      	muls	r4, r6
 8000c98:	434f      	muls	r7, r1
 8000c9a:	4346      	muls	r6, r0
 8000c9c:	4348      	muls	r0, r1
 8000c9e:	0c39      	lsrs	r1, r7, #16
 8000ca0:	1900      	adds	r0, r0, r4
 8000ca2:	1809      	adds	r1, r1, r0
 8000ca4:	428c      	cmp	r4, r1
 8000ca6:	d903      	bls.n	8000cb0 <__aeabi_fmul+0x148>
 8000ca8:	2080      	movs	r0, #128	; 0x80
 8000caa:	0240      	lsls	r0, r0, #9
 8000cac:	4684      	mov	ip, r0
 8000cae:	4466      	add	r6, ip
 8000cb0:	043f      	lsls	r7, r7, #16
 8000cb2:	0408      	lsls	r0, r1, #16
 8000cb4:	0c3f      	lsrs	r7, r7, #16
 8000cb6:	19c0      	adds	r0, r0, r7
 8000cb8:	0184      	lsls	r4, r0, #6
 8000cba:	1e67      	subs	r7, r4, #1
 8000cbc:	41bc      	sbcs	r4, r7
 8000cbe:	0c09      	lsrs	r1, r1, #16
 8000cc0:	0e80      	lsrs	r0, r0, #26
 8000cc2:	1989      	adds	r1, r1, r6
 8000cc4:	4304      	orrs	r4, r0
 8000cc6:	0189      	lsls	r1, r1, #6
 8000cc8:	430c      	orrs	r4, r1
 8000cca:	0109      	lsls	r1, r1, #4
 8000ccc:	d571      	bpl.n	8000db2 <__aeabi_fmul+0x24a>
 8000cce:	2301      	movs	r3, #1
 8000cd0:	0861      	lsrs	r1, r4, #1
 8000cd2:	401c      	ands	r4, r3
 8000cd4:	430c      	orrs	r4, r1
 8000cd6:	002b      	movs	r3, r5
 8000cd8:	337f      	adds	r3, #127	; 0x7f
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	dd51      	ble.n	8000d82 <__aeabi_fmul+0x21a>
 8000cde:	0761      	lsls	r1, r4, #29
 8000ce0:	d004      	beq.n	8000cec <__aeabi_fmul+0x184>
 8000ce2:	210f      	movs	r1, #15
 8000ce4:	4021      	ands	r1, r4
 8000ce6:	2904      	cmp	r1, #4
 8000ce8:	d000      	beq.n	8000cec <__aeabi_fmul+0x184>
 8000cea:	3404      	adds	r4, #4
 8000cec:	0121      	lsls	r1, r4, #4
 8000cee:	d503      	bpl.n	8000cf8 <__aeabi_fmul+0x190>
 8000cf0:	4b43      	ldr	r3, [pc, #268]	; (8000e00 <__aeabi_fmul+0x298>)
 8000cf2:	401c      	ands	r4, r3
 8000cf4:	002b      	movs	r3, r5
 8000cf6:	3380      	adds	r3, #128	; 0x80
 8000cf8:	2bfe      	cmp	r3, #254	; 0xfe
 8000cfa:	dcc1      	bgt.n	8000c80 <__aeabi_fmul+0x118>
 8000cfc:	01a1      	lsls	r1, r4, #6
 8000cfe:	0a49      	lsrs	r1, r1, #9
 8000d00:	b2d8      	uxtb	r0, r3
 8000d02:	e783      	b.n	8000c0c <__aeabi_fmul+0xa4>
 8000d04:	2c00      	cmp	r4, #0
 8000d06:	d12c      	bne.n	8000d62 <__aeabi_fmul+0x1fa>
 8000d08:	2301      	movs	r3, #1
 8000d0a:	4642      	mov	r2, r8
 8000d0c:	431e      	orrs	r6, r3
 8000d0e:	002b      	movs	r3, r5
 8000d10:	407a      	eors	r2, r7
 8000d12:	2001      	movs	r0, #1
 8000d14:	b2d2      	uxtb	r2, r2
 8000d16:	1c5d      	adds	r5, r3, #1
 8000d18:	2e0a      	cmp	r6, #10
 8000d1a:	dd00      	ble.n	8000d1e <__aeabi_fmul+0x1b6>
 8000d1c:	e757      	b.n	8000bce <__aeabi_fmul+0x66>
 8000d1e:	e76a      	b.n	8000bf6 <__aeabi_fmul+0x8e>
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d110      	bne.n	8000d46 <__aeabi_fmul+0x1de>
 8000d24:	2301      	movs	r3, #1
 8000d26:	2604      	movs	r6, #4
 8000d28:	2500      	movs	r5, #0
 8000d2a:	469a      	mov	sl, r3
 8000d2c:	e738      	b.n	8000ba0 <__aeabi_fmul+0x38>
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d104      	bne.n	8000d3c <__aeabi_fmul+0x1d4>
 8000d32:	2302      	movs	r3, #2
 8000d34:	2608      	movs	r6, #8
 8000d36:	25ff      	movs	r5, #255	; 0xff
 8000d38:	469a      	mov	sl, r3
 8000d3a:	e731      	b.n	8000ba0 <__aeabi_fmul+0x38>
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	260c      	movs	r6, #12
 8000d40:	25ff      	movs	r5, #255	; 0xff
 8000d42:	469a      	mov	sl, r3
 8000d44:	e72c      	b.n	8000ba0 <__aeabi_fmul+0x38>
 8000d46:	4648      	mov	r0, r9
 8000d48:	f001 f98c 	bl	8002064 <__clzsi2>
 8000d4c:	464a      	mov	r2, r9
 8000d4e:	1f43      	subs	r3, r0, #5
 8000d50:	2576      	movs	r5, #118	; 0x76
 8000d52:	409a      	lsls	r2, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	426d      	negs	r5, r5
 8000d58:	4691      	mov	r9, r2
 8000d5a:	2600      	movs	r6, #0
 8000d5c:	469a      	mov	sl, r3
 8000d5e:	1a2d      	subs	r5, r5, r0
 8000d60:	e71e      	b.n	8000ba0 <__aeabi_fmul+0x38>
 8000d62:	0020      	movs	r0, r4
 8000d64:	f001 f97e 	bl	8002064 <__clzsi2>
 8000d68:	4642      	mov	r2, r8
 8000d6a:	1f43      	subs	r3, r0, #5
 8000d6c:	409c      	lsls	r4, r3
 8000d6e:	1a2b      	subs	r3, r5, r0
 8000d70:	3b76      	subs	r3, #118	; 0x76
 8000d72:	407a      	eors	r2, r7
 8000d74:	2000      	movs	r0, #0
 8000d76:	b2d2      	uxtb	r2, r2
 8000d78:	1c5d      	adds	r5, r3, #1
 8000d7a:	2e0a      	cmp	r6, #10
 8000d7c:	dd00      	ble.n	8000d80 <__aeabi_fmul+0x218>
 8000d7e:	e726      	b.n	8000bce <__aeabi_fmul+0x66>
 8000d80:	e739      	b.n	8000bf6 <__aeabi_fmul+0x8e>
 8000d82:	2101      	movs	r1, #1
 8000d84:	1acb      	subs	r3, r1, r3
 8000d86:	2b1b      	cmp	r3, #27
 8000d88:	dd00      	ble.n	8000d8c <__aeabi_fmul+0x224>
 8000d8a:	e73d      	b.n	8000c08 <__aeabi_fmul+0xa0>
 8000d8c:	359e      	adds	r5, #158	; 0x9e
 8000d8e:	0021      	movs	r1, r4
 8000d90:	40ac      	lsls	r4, r5
 8000d92:	40d9      	lsrs	r1, r3
 8000d94:	1e63      	subs	r3, r4, #1
 8000d96:	419c      	sbcs	r4, r3
 8000d98:	4321      	orrs	r1, r4
 8000d9a:	074b      	lsls	r3, r1, #29
 8000d9c:	d004      	beq.n	8000da8 <__aeabi_fmul+0x240>
 8000d9e:	230f      	movs	r3, #15
 8000da0:	400b      	ands	r3, r1
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	d000      	beq.n	8000da8 <__aeabi_fmul+0x240>
 8000da6:	3104      	adds	r1, #4
 8000da8:	014b      	lsls	r3, r1, #5
 8000daa:	d504      	bpl.n	8000db6 <__aeabi_fmul+0x24e>
 8000dac:	2001      	movs	r0, #1
 8000dae:	2100      	movs	r1, #0
 8000db0:	e72c      	b.n	8000c0c <__aeabi_fmul+0xa4>
 8000db2:	001d      	movs	r5, r3
 8000db4:	e78f      	b.n	8000cd6 <__aeabi_fmul+0x16e>
 8000db6:	0189      	lsls	r1, r1, #6
 8000db8:	2000      	movs	r0, #0
 8000dba:	0a49      	lsrs	r1, r1, #9
 8000dbc:	e726      	b.n	8000c0c <__aeabi_fmul+0xa4>
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	2e0f      	cmp	r6, #15
 8000dc2:	d10c      	bne.n	8000dde <__aeabi_fmul+0x276>
 8000dc4:	2180      	movs	r1, #128	; 0x80
 8000dc6:	464b      	mov	r3, r9
 8000dc8:	03c9      	lsls	r1, r1, #15
 8000dca:	420b      	tst	r3, r1
 8000dcc:	d00d      	beq.n	8000dea <__aeabi_fmul+0x282>
 8000dce:	420c      	tst	r4, r1
 8000dd0:	d10b      	bne.n	8000dea <__aeabi_fmul+0x282>
 8000dd2:	4321      	orrs	r1, r4
 8000dd4:	0249      	lsls	r1, r1, #9
 8000dd6:	003a      	movs	r2, r7
 8000dd8:	20ff      	movs	r0, #255	; 0xff
 8000dda:	0a49      	lsrs	r1, r1, #9
 8000ddc:	e716      	b.n	8000c0c <__aeabi_fmul+0xa4>
 8000dde:	2e0b      	cmp	r6, #11
 8000de0:	d000      	beq.n	8000de4 <__aeabi_fmul+0x27c>
 8000de2:	e6f7      	b.n	8000bd4 <__aeabi_fmul+0x6c>
 8000de4:	46a1      	mov	r9, r4
 8000de6:	469a      	mov	sl, r3
 8000de8:	e736      	b.n	8000c58 <__aeabi_fmul+0xf0>
 8000dea:	2180      	movs	r1, #128	; 0x80
 8000dec:	464b      	mov	r3, r9
 8000dee:	03c9      	lsls	r1, r1, #15
 8000df0:	4319      	orrs	r1, r3
 8000df2:	0249      	lsls	r1, r1, #9
 8000df4:	4642      	mov	r2, r8
 8000df6:	20ff      	movs	r0, #255	; 0xff
 8000df8:	0a49      	lsrs	r1, r1, #9
 8000dfa:	e707      	b.n	8000c0c <__aeabi_fmul+0xa4>
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	e7df      	b.n	8000dc0 <__aeabi_fmul+0x258>
 8000e00:	f7ffffff 	.word	0xf7ffffff

08000e04 <__aeabi_fsub>:
 8000e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e06:	46c6      	mov	lr, r8
 8000e08:	0243      	lsls	r3, r0, #9
 8000e0a:	0a5b      	lsrs	r3, r3, #9
 8000e0c:	0045      	lsls	r5, r0, #1
 8000e0e:	00da      	lsls	r2, r3, #3
 8000e10:	0fc4      	lsrs	r4, r0, #31
 8000e12:	0248      	lsls	r0, r1, #9
 8000e14:	004f      	lsls	r7, r1, #1
 8000e16:	4694      	mov	ip, r2
 8000e18:	0a42      	lsrs	r2, r0, #9
 8000e1a:	001e      	movs	r6, r3
 8000e1c:	4690      	mov	r8, r2
 8000e1e:	b500      	push	{lr}
 8000e20:	0e2d      	lsrs	r5, r5, #24
 8000e22:	0e3f      	lsrs	r7, r7, #24
 8000e24:	0fc9      	lsrs	r1, r1, #31
 8000e26:	0980      	lsrs	r0, r0, #6
 8000e28:	2fff      	cmp	r7, #255	; 0xff
 8000e2a:	d059      	beq.n	8000ee0 <__aeabi_fsub+0xdc>
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	4051      	eors	r1, r2
 8000e30:	428c      	cmp	r4, r1
 8000e32:	d039      	beq.n	8000ea8 <__aeabi_fsub+0xa4>
 8000e34:	1bea      	subs	r2, r5, r7
 8000e36:	2a00      	cmp	r2, #0
 8000e38:	dd58      	ble.n	8000eec <__aeabi_fsub+0xe8>
 8000e3a:	2f00      	cmp	r7, #0
 8000e3c:	d068      	beq.n	8000f10 <__aeabi_fsub+0x10c>
 8000e3e:	2dff      	cmp	r5, #255	; 0xff
 8000e40:	d100      	bne.n	8000e44 <__aeabi_fsub+0x40>
 8000e42:	e0d1      	b.n	8000fe8 <__aeabi_fsub+0x1e4>
 8000e44:	2380      	movs	r3, #128	; 0x80
 8000e46:	04db      	lsls	r3, r3, #19
 8000e48:	4318      	orrs	r0, r3
 8000e4a:	2a1b      	cmp	r2, #27
 8000e4c:	dc00      	bgt.n	8000e50 <__aeabi_fsub+0x4c>
 8000e4e:	e0e3      	b.n	8001018 <__aeabi_fsub+0x214>
 8000e50:	2301      	movs	r3, #1
 8000e52:	4662      	mov	r2, ip
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	015a      	lsls	r2, r3, #5
 8000e58:	d400      	bmi.n	8000e5c <__aeabi_fsub+0x58>
 8000e5a:	e0ac      	b.n	8000fb6 <__aeabi_fsub+0x1b2>
 8000e5c:	019b      	lsls	r3, r3, #6
 8000e5e:	099e      	lsrs	r6, r3, #6
 8000e60:	0030      	movs	r0, r6
 8000e62:	f001 f8ff 	bl	8002064 <__clzsi2>
 8000e66:	0033      	movs	r3, r6
 8000e68:	3805      	subs	r0, #5
 8000e6a:	4083      	lsls	r3, r0
 8000e6c:	4285      	cmp	r5, r0
 8000e6e:	dc00      	bgt.n	8000e72 <__aeabi_fsub+0x6e>
 8000e70:	e0c6      	b.n	8001000 <__aeabi_fsub+0x1fc>
 8000e72:	4ab2      	ldr	r2, [pc, #712]	; (800113c <__aeabi_fsub+0x338>)
 8000e74:	1a2d      	subs	r5, r5, r0
 8000e76:	4013      	ands	r3, r2
 8000e78:	075a      	lsls	r2, r3, #29
 8000e7a:	d004      	beq.n	8000e86 <__aeabi_fsub+0x82>
 8000e7c:	220f      	movs	r2, #15
 8000e7e:	401a      	ands	r2, r3
 8000e80:	2a04      	cmp	r2, #4
 8000e82:	d000      	beq.n	8000e86 <__aeabi_fsub+0x82>
 8000e84:	3304      	adds	r3, #4
 8000e86:	015a      	lsls	r2, r3, #5
 8000e88:	d400      	bmi.n	8000e8c <__aeabi_fsub+0x88>
 8000e8a:	e097      	b.n	8000fbc <__aeabi_fsub+0x1b8>
 8000e8c:	1c6a      	adds	r2, r5, #1
 8000e8e:	2dfe      	cmp	r5, #254	; 0xfe
 8000e90:	d100      	bne.n	8000e94 <__aeabi_fsub+0x90>
 8000e92:	e084      	b.n	8000f9e <__aeabi_fsub+0x19a>
 8000e94:	019b      	lsls	r3, r3, #6
 8000e96:	0a5e      	lsrs	r6, r3, #9
 8000e98:	b2d2      	uxtb	r2, r2
 8000e9a:	05d0      	lsls	r0, r2, #23
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	07e4      	lsls	r4, r4, #31
 8000ea0:	4320      	orrs	r0, r4
 8000ea2:	bc80      	pop	{r7}
 8000ea4:	46b8      	mov	r8, r7
 8000ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ea8:	1bea      	subs	r2, r5, r7
 8000eaa:	2a00      	cmp	r2, #0
 8000eac:	dd41      	ble.n	8000f32 <__aeabi_fsub+0x12e>
 8000eae:	2f00      	cmp	r7, #0
 8000eb0:	d06b      	beq.n	8000f8a <__aeabi_fsub+0x186>
 8000eb2:	2dff      	cmp	r5, #255	; 0xff
 8000eb4:	d100      	bne.n	8000eb8 <__aeabi_fsub+0xb4>
 8000eb6:	e097      	b.n	8000fe8 <__aeabi_fsub+0x1e4>
 8000eb8:	2380      	movs	r3, #128	; 0x80
 8000eba:	04db      	lsls	r3, r3, #19
 8000ebc:	4318      	orrs	r0, r3
 8000ebe:	2a1b      	cmp	r2, #27
 8000ec0:	dc00      	bgt.n	8000ec4 <__aeabi_fsub+0xc0>
 8000ec2:	e0cc      	b.n	800105e <__aeabi_fsub+0x25a>
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	4463      	add	r3, ip
 8000ec8:	015a      	lsls	r2, r3, #5
 8000eca:	d574      	bpl.n	8000fb6 <__aeabi_fsub+0x1b2>
 8000ecc:	3501      	adds	r5, #1
 8000ece:	2dff      	cmp	r5, #255	; 0xff
 8000ed0:	d065      	beq.n	8000f9e <__aeabi_fsub+0x19a>
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	499a      	ldr	r1, [pc, #616]	; (8001140 <__aeabi_fsub+0x33c>)
 8000ed6:	401a      	ands	r2, r3
 8000ed8:	085b      	lsrs	r3, r3, #1
 8000eda:	400b      	ands	r3, r1
 8000edc:	4313      	orrs	r3, r2
 8000ede:	e7cb      	b.n	8000e78 <__aeabi_fsub+0x74>
 8000ee0:	2800      	cmp	r0, #0
 8000ee2:	d01f      	beq.n	8000f24 <__aeabi_fsub+0x120>
 8000ee4:	428c      	cmp	r4, r1
 8000ee6:	d022      	beq.n	8000f2e <__aeabi_fsub+0x12a>
 8000ee8:	002a      	movs	r2, r5
 8000eea:	3aff      	subs	r2, #255	; 0xff
 8000eec:	2a00      	cmp	r2, #0
 8000eee:	d035      	beq.n	8000f5c <__aeabi_fsub+0x158>
 8000ef0:	1b7a      	subs	r2, r7, r5
 8000ef2:	2d00      	cmp	r5, #0
 8000ef4:	d000      	beq.n	8000ef8 <__aeabi_fsub+0xf4>
 8000ef6:	e099      	b.n	800102c <__aeabi_fsub+0x228>
 8000ef8:	4663      	mov	r3, ip
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d100      	bne.n	8000f00 <__aeabi_fsub+0xfc>
 8000efe:	e0dd      	b.n	80010bc <__aeabi_fsub+0x2b8>
 8000f00:	1e53      	subs	r3, r2, #1
 8000f02:	2a01      	cmp	r2, #1
 8000f04:	d100      	bne.n	8000f08 <__aeabi_fsub+0x104>
 8000f06:	e105      	b.n	8001114 <__aeabi_fsub+0x310>
 8000f08:	2aff      	cmp	r2, #255	; 0xff
 8000f0a:	d06b      	beq.n	8000fe4 <__aeabi_fsub+0x1e0>
 8000f0c:	001a      	movs	r2, r3
 8000f0e:	e094      	b.n	800103a <__aeabi_fsub+0x236>
 8000f10:	2800      	cmp	r0, #0
 8000f12:	d073      	beq.n	8000ffc <__aeabi_fsub+0x1f8>
 8000f14:	1e51      	subs	r1, r2, #1
 8000f16:	2a01      	cmp	r2, #1
 8000f18:	d100      	bne.n	8000f1c <__aeabi_fsub+0x118>
 8000f1a:	e0df      	b.n	80010dc <__aeabi_fsub+0x2d8>
 8000f1c:	2aff      	cmp	r2, #255	; 0xff
 8000f1e:	d063      	beq.n	8000fe8 <__aeabi_fsub+0x1e4>
 8000f20:	000a      	movs	r2, r1
 8000f22:	e792      	b.n	8000e4a <__aeabi_fsub+0x46>
 8000f24:	2201      	movs	r2, #1
 8000f26:	4051      	eors	r1, r2
 8000f28:	42a1      	cmp	r1, r4
 8000f2a:	d000      	beq.n	8000f2e <__aeabi_fsub+0x12a>
 8000f2c:	e782      	b.n	8000e34 <__aeabi_fsub+0x30>
 8000f2e:	002a      	movs	r2, r5
 8000f30:	3aff      	subs	r2, #255	; 0xff
 8000f32:	2a00      	cmp	r2, #0
 8000f34:	d036      	beq.n	8000fa4 <__aeabi_fsub+0x1a0>
 8000f36:	1b7a      	subs	r2, r7, r5
 8000f38:	2d00      	cmp	r5, #0
 8000f3a:	d100      	bne.n	8000f3e <__aeabi_fsub+0x13a>
 8000f3c:	e0aa      	b.n	8001094 <__aeabi_fsub+0x290>
 8000f3e:	2fff      	cmp	r7, #255	; 0xff
 8000f40:	d100      	bne.n	8000f44 <__aeabi_fsub+0x140>
 8000f42:	e0da      	b.n	80010fa <__aeabi_fsub+0x2f6>
 8000f44:	2380      	movs	r3, #128	; 0x80
 8000f46:	4661      	mov	r1, ip
 8000f48:	04db      	lsls	r3, r3, #19
 8000f4a:	4319      	orrs	r1, r3
 8000f4c:	468c      	mov	ip, r1
 8000f4e:	2a1b      	cmp	r2, #27
 8000f50:	dc00      	bgt.n	8000f54 <__aeabi_fsub+0x150>
 8000f52:	e0d4      	b.n	80010fe <__aeabi_fsub+0x2fa>
 8000f54:	2301      	movs	r3, #1
 8000f56:	003d      	movs	r5, r7
 8000f58:	181b      	adds	r3, r3, r0
 8000f5a:	e7b5      	b.n	8000ec8 <__aeabi_fsub+0xc4>
 8000f5c:	27fe      	movs	r7, #254	; 0xfe
 8000f5e:	1c6a      	adds	r2, r5, #1
 8000f60:	4217      	tst	r7, r2
 8000f62:	d171      	bne.n	8001048 <__aeabi_fsub+0x244>
 8000f64:	2d00      	cmp	r5, #0
 8000f66:	d000      	beq.n	8000f6a <__aeabi_fsub+0x166>
 8000f68:	e09e      	b.n	80010a8 <__aeabi_fsub+0x2a4>
 8000f6a:	4663      	mov	r3, ip
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d100      	bne.n	8000f72 <__aeabi_fsub+0x16e>
 8000f70:	e0d5      	b.n	800111e <__aeabi_fsub+0x31a>
 8000f72:	2200      	movs	r2, #0
 8000f74:	2800      	cmp	r0, #0
 8000f76:	d100      	bne.n	8000f7a <__aeabi_fsub+0x176>
 8000f78:	e78f      	b.n	8000e9a <__aeabi_fsub+0x96>
 8000f7a:	1a1b      	subs	r3, r3, r0
 8000f7c:	015e      	lsls	r6, r3, #5
 8000f7e:	d400      	bmi.n	8000f82 <__aeabi_fsub+0x17e>
 8000f80:	e0d6      	b.n	8001130 <__aeabi_fsub+0x32c>
 8000f82:	4663      	mov	r3, ip
 8000f84:	000c      	movs	r4, r1
 8000f86:	1ac3      	subs	r3, r0, r3
 8000f88:	e776      	b.n	8000e78 <__aeabi_fsub+0x74>
 8000f8a:	2800      	cmp	r0, #0
 8000f8c:	d036      	beq.n	8000ffc <__aeabi_fsub+0x1f8>
 8000f8e:	1e51      	subs	r1, r2, #1
 8000f90:	2a01      	cmp	r2, #1
 8000f92:	d100      	bne.n	8000f96 <__aeabi_fsub+0x192>
 8000f94:	e09a      	b.n	80010cc <__aeabi_fsub+0x2c8>
 8000f96:	2aff      	cmp	r2, #255	; 0xff
 8000f98:	d026      	beq.n	8000fe8 <__aeabi_fsub+0x1e4>
 8000f9a:	000a      	movs	r2, r1
 8000f9c:	e78f      	b.n	8000ebe <__aeabi_fsub+0xba>
 8000f9e:	22ff      	movs	r2, #255	; 0xff
 8000fa0:	2600      	movs	r6, #0
 8000fa2:	e77a      	b.n	8000e9a <__aeabi_fsub+0x96>
 8000fa4:	27fe      	movs	r7, #254	; 0xfe
 8000fa6:	1c6a      	adds	r2, r5, #1
 8000fa8:	4217      	tst	r7, r2
 8000faa:	d062      	beq.n	8001072 <__aeabi_fsub+0x26e>
 8000fac:	2aff      	cmp	r2, #255	; 0xff
 8000fae:	d0f6      	beq.n	8000f9e <__aeabi_fsub+0x19a>
 8000fb0:	0015      	movs	r5, r2
 8000fb2:	4460      	add	r0, ip
 8000fb4:	0843      	lsrs	r3, r0, #1
 8000fb6:	075a      	lsls	r2, r3, #29
 8000fb8:	d000      	beq.n	8000fbc <__aeabi_fsub+0x1b8>
 8000fba:	e75f      	b.n	8000e7c <__aeabi_fsub+0x78>
 8000fbc:	08db      	lsrs	r3, r3, #3
 8000fbe:	2dff      	cmp	r5, #255	; 0xff
 8000fc0:	d012      	beq.n	8000fe8 <__aeabi_fsub+0x1e4>
 8000fc2:	025b      	lsls	r3, r3, #9
 8000fc4:	0a5e      	lsrs	r6, r3, #9
 8000fc6:	b2ea      	uxtb	r2, r5
 8000fc8:	e767      	b.n	8000e9a <__aeabi_fsub+0x96>
 8000fca:	4662      	mov	r2, ip
 8000fcc:	2a00      	cmp	r2, #0
 8000fce:	d100      	bne.n	8000fd2 <__aeabi_fsub+0x1ce>
 8000fd0:	e093      	b.n	80010fa <__aeabi_fsub+0x2f6>
 8000fd2:	2800      	cmp	r0, #0
 8000fd4:	d008      	beq.n	8000fe8 <__aeabi_fsub+0x1e4>
 8000fd6:	2280      	movs	r2, #128	; 0x80
 8000fd8:	03d2      	lsls	r2, r2, #15
 8000fda:	4213      	tst	r3, r2
 8000fdc:	d004      	beq.n	8000fe8 <__aeabi_fsub+0x1e4>
 8000fde:	4640      	mov	r0, r8
 8000fe0:	4210      	tst	r0, r2
 8000fe2:	d101      	bne.n	8000fe8 <__aeabi_fsub+0x1e4>
 8000fe4:	000c      	movs	r4, r1
 8000fe6:	4643      	mov	r3, r8
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d0d8      	beq.n	8000f9e <__aeabi_fsub+0x19a>
 8000fec:	2680      	movs	r6, #128	; 0x80
 8000fee:	03f6      	lsls	r6, r6, #15
 8000ff0:	431e      	orrs	r6, r3
 8000ff2:	0276      	lsls	r6, r6, #9
 8000ff4:	22ff      	movs	r2, #255	; 0xff
 8000ff6:	0a76      	lsrs	r6, r6, #9
 8000ff8:	e74f      	b.n	8000e9a <__aeabi_fsub+0x96>
 8000ffa:	4643      	mov	r3, r8
 8000ffc:	0015      	movs	r5, r2
 8000ffe:	e7de      	b.n	8000fbe <__aeabi_fsub+0x1ba>
 8001000:	2220      	movs	r2, #32
 8001002:	1b40      	subs	r0, r0, r5
 8001004:	3001      	adds	r0, #1
 8001006:	1a12      	subs	r2, r2, r0
 8001008:	0019      	movs	r1, r3
 800100a:	4093      	lsls	r3, r2
 800100c:	40c1      	lsrs	r1, r0
 800100e:	1e5a      	subs	r2, r3, #1
 8001010:	4193      	sbcs	r3, r2
 8001012:	2500      	movs	r5, #0
 8001014:	430b      	orrs	r3, r1
 8001016:	e72f      	b.n	8000e78 <__aeabi_fsub+0x74>
 8001018:	2320      	movs	r3, #32
 800101a:	1a9b      	subs	r3, r3, r2
 800101c:	0001      	movs	r1, r0
 800101e:	4098      	lsls	r0, r3
 8001020:	0003      	movs	r3, r0
 8001022:	40d1      	lsrs	r1, r2
 8001024:	1e5a      	subs	r2, r3, #1
 8001026:	4193      	sbcs	r3, r2
 8001028:	430b      	orrs	r3, r1
 800102a:	e712      	b.n	8000e52 <__aeabi_fsub+0x4e>
 800102c:	2fff      	cmp	r7, #255	; 0xff
 800102e:	d0d9      	beq.n	8000fe4 <__aeabi_fsub+0x1e0>
 8001030:	2380      	movs	r3, #128	; 0x80
 8001032:	4664      	mov	r4, ip
 8001034:	04db      	lsls	r3, r3, #19
 8001036:	431c      	orrs	r4, r3
 8001038:	46a4      	mov	ip, r4
 800103a:	2a1b      	cmp	r2, #27
 800103c:	dd52      	ble.n	80010e4 <__aeabi_fsub+0x2e0>
 800103e:	2301      	movs	r3, #1
 8001040:	000c      	movs	r4, r1
 8001042:	003d      	movs	r5, r7
 8001044:	1ac3      	subs	r3, r0, r3
 8001046:	e706      	b.n	8000e56 <__aeabi_fsub+0x52>
 8001048:	4663      	mov	r3, ip
 800104a:	1a1e      	subs	r6, r3, r0
 800104c:	0173      	lsls	r3, r6, #5
 800104e:	d439      	bmi.n	80010c4 <__aeabi_fsub+0x2c0>
 8001050:	2e00      	cmp	r6, #0
 8001052:	d000      	beq.n	8001056 <__aeabi_fsub+0x252>
 8001054:	e704      	b.n	8000e60 <__aeabi_fsub+0x5c>
 8001056:	2400      	movs	r4, #0
 8001058:	2200      	movs	r2, #0
 800105a:	2600      	movs	r6, #0
 800105c:	e71d      	b.n	8000e9a <__aeabi_fsub+0x96>
 800105e:	2320      	movs	r3, #32
 8001060:	1a9b      	subs	r3, r3, r2
 8001062:	0001      	movs	r1, r0
 8001064:	4098      	lsls	r0, r3
 8001066:	0003      	movs	r3, r0
 8001068:	40d1      	lsrs	r1, r2
 800106a:	1e5a      	subs	r2, r3, #1
 800106c:	4193      	sbcs	r3, r2
 800106e:	430b      	orrs	r3, r1
 8001070:	e729      	b.n	8000ec6 <__aeabi_fsub+0xc2>
 8001072:	2d00      	cmp	r5, #0
 8001074:	d1a9      	bne.n	8000fca <__aeabi_fsub+0x1c6>
 8001076:	4663      	mov	r3, ip
 8001078:	2b00      	cmp	r3, #0
 800107a:	d056      	beq.n	800112a <__aeabi_fsub+0x326>
 800107c:	2200      	movs	r2, #0
 800107e:	2800      	cmp	r0, #0
 8001080:	d100      	bne.n	8001084 <__aeabi_fsub+0x280>
 8001082:	e70a      	b.n	8000e9a <__aeabi_fsub+0x96>
 8001084:	0003      	movs	r3, r0
 8001086:	4463      	add	r3, ip
 8001088:	015a      	lsls	r2, r3, #5
 800108a:	d594      	bpl.n	8000fb6 <__aeabi_fsub+0x1b2>
 800108c:	4a2b      	ldr	r2, [pc, #172]	; (800113c <__aeabi_fsub+0x338>)
 800108e:	3501      	adds	r5, #1
 8001090:	4013      	ands	r3, r2
 8001092:	e790      	b.n	8000fb6 <__aeabi_fsub+0x1b2>
 8001094:	4663      	mov	r3, ip
 8001096:	2b00      	cmp	r3, #0
 8001098:	d0af      	beq.n	8000ffa <__aeabi_fsub+0x1f6>
 800109a:	1e53      	subs	r3, r2, #1
 800109c:	2a01      	cmp	r2, #1
 800109e:	d015      	beq.n	80010cc <__aeabi_fsub+0x2c8>
 80010a0:	2aff      	cmp	r2, #255	; 0xff
 80010a2:	d02a      	beq.n	80010fa <__aeabi_fsub+0x2f6>
 80010a4:	001a      	movs	r2, r3
 80010a6:	e752      	b.n	8000f4e <__aeabi_fsub+0x14a>
 80010a8:	4662      	mov	r2, ip
 80010aa:	2a00      	cmp	r2, #0
 80010ac:	d191      	bne.n	8000fd2 <__aeabi_fsub+0x1ce>
 80010ae:	2800      	cmp	r0, #0
 80010b0:	d198      	bne.n	8000fe4 <__aeabi_fsub+0x1e0>
 80010b2:	2680      	movs	r6, #128	; 0x80
 80010b4:	2400      	movs	r4, #0
 80010b6:	22ff      	movs	r2, #255	; 0xff
 80010b8:	03f6      	lsls	r6, r6, #15
 80010ba:	e6ee      	b.n	8000e9a <__aeabi_fsub+0x96>
 80010bc:	000c      	movs	r4, r1
 80010be:	4643      	mov	r3, r8
 80010c0:	0015      	movs	r5, r2
 80010c2:	e77c      	b.n	8000fbe <__aeabi_fsub+0x1ba>
 80010c4:	4663      	mov	r3, ip
 80010c6:	000c      	movs	r4, r1
 80010c8:	1ac6      	subs	r6, r0, r3
 80010ca:	e6c9      	b.n	8000e60 <__aeabi_fsub+0x5c>
 80010cc:	0003      	movs	r3, r0
 80010ce:	4463      	add	r3, ip
 80010d0:	2501      	movs	r5, #1
 80010d2:	015a      	lsls	r2, r3, #5
 80010d4:	d400      	bmi.n	80010d8 <__aeabi_fsub+0x2d4>
 80010d6:	e76e      	b.n	8000fb6 <__aeabi_fsub+0x1b2>
 80010d8:	2502      	movs	r5, #2
 80010da:	e6fa      	b.n	8000ed2 <__aeabi_fsub+0xce>
 80010dc:	4663      	mov	r3, ip
 80010de:	2501      	movs	r5, #1
 80010e0:	1a1b      	subs	r3, r3, r0
 80010e2:	e6b8      	b.n	8000e56 <__aeabi_fsub+0x52>
 80010e4:	4664      	mov	r4, ip
 80010e6:	2320      	movs	r3, #32
 80010e8:	40d4      	lsrs	r4, r2
 80010ea:	1a9b      	subs	r3, r3, r2
 80010ec:	4662      	mov	r2, ip
 80010ee:	409a      	lsls	r2, r3
 80010f0:	0013      	movs	r3, r2
 80010f2:	1e5a      	subs	r2, r3, #1
 80010f4:	4193      	sbcs	r3, r2
 80010f6:	4323      	orrs	r3, r4
 80010f8:	e7a2      	b.n	8001040 <__aeabi_fsub+0x23c>
 80010fa:	4643      	mov	r3, r8
 80010fc:	e774      	b.n	8000fe8 <__aeabi_fsub+0x1e4>
 80010fe:	4661      	mov	r1, ip
 8001100:	2320      	movs	r3, #32
 8001102:	40d1      	lsrs	r1, r2
 8001104:	1a9b      	subs	r3, r3, r2
 8001106:	4662      	mov	r2, ip
 8001108:	409a      	lsls	r2, r3
 800110a:	0013      	movs	r3, r2
 800110c:	1e5a      	subs	r2, r3, #1
 800110e:	4193      	sbcs	r3, r2
 8001110:	430b      	orrs	r3, r1
 8001112:	e720      	b.n	8000f56 <__aeabi_fsub+0x152>
 8001114:	4663      	mov	r3, ip
 8001116:	000c      	movs	r4, r1
 8001118:	2501      	movs	r5, #1
 800111a:	1ac3      	subs	r3, r0, r3
 800111c:	e69b      	b.n	8000e56 <__aeabi_fsub+0x52>
 800111e:	2800      	cmp	r0, #0
 8001120:	d099      	beq.n	8001056 <__aeabi_fsub+0x252>
 8001122:	000c      	movs	r4, r1
 8001124:	4646      	mov	r6, r8
 8001126:	2200      	movs	r2, #0
 8001128:	e6b7      	b.n	8000e9a <__aeabi_fsub+0x96>
 800112a:	4646      	mov	r6, r8
 800112c:	2200      	movs	r2, #0
 800112e:	e6b4      	b.n	8000e9a <__aeabi_fsub+0x96>
 8001130:	2b00      	cmp	r3, #0
 8001132:	d000      	beq.n	8001136 <__aeabi_fsub+0x332>
 8001134:	e73f      	b.n	8000fb6 <__aeabi_fsub+0x1b2>
 8001136:	2400      	movs	r4, #0
 8001138:	2600      	movs	r6, #0
 800113a:	e6ae      	b.n	8000e9a <__aeabi_fsub+0x96>
 800113c:	fbffffff 	.word	0xfbffffff
 8001140:	7dffffff 	.word	0x7dffffff

08001144 <__aeabi_fcmpun>:
 8001144:	0243      	lsls	r3, r0, #9
 8001146:	024a      	lsls	r2, r1, #9
 8001148:	0040      	lsls	r0, r0, #1
 800114a:	0049      	lsls	r1, r1, #1
 800114c:	0a5b      	lsrs	r3, r3, #9
 800114e:	0a52      	lsrs	r2, r2, #9
 8001150:	0e09      	lsrs	r1, r1, #24
 8001152:	0e00      	lsrs	r0, r0, #24
 8001154:	28ff      	cmp	r0, #255	; 0xff
 8001156:	d006      	beq.n	8001166 <__aeabi_fcmpun+0x22>
 8001158:	2000      	movs	r0, #0
 800115a:	29ff      	cmp	r1, #255	; 0xff
 800115c:	d102      	bne.n	8001164 <__aeabi_fcmpun+0x20>
 800115e:	1e53      	subs	r3, r2, #1
 8001160:	419a      	sbcs	r2, r3
 8001162:	0010      	movs	r0, r2
 8001164:	4770      	bx	lr
 8001166:	38fe      	subs	r0, #254	; 0xfe
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1fb      	bne.n	8001164 <__aeabi_fcmpun+0x20>
 800116c:	e7f4      	b.n	8001158 <__aeabi_fcmpun+0x14>
 800116e:	46c0      	nop			; (mov r8, r8)

08001170 <__aeabi_f2iz>:
 8001170:	0241      	lsls	r1, r0, #9
 8001172:	0042      	lsls	r2, r0, #1
 8001174:	0fc3      	lsrs	r3, r0, #31
 8001176:	0a49      	lsrs	r1, r1, #9
 8001178:	2000      	movs	r0, #0
 800117a:	0e12      	lsrs	r2, r2, #24
 800117c:	2a7e      	cmp	r2, #126	; 0x7e
 800117e:	dd03      	ble.n	8001188 <__aeabi_f2iz+0x18>
 8001180:	2a9d      	cmp	r2, #157	; 0x9d
 8001182:	dd02      	ble.n	800118a <__aeabi_f2iz+0x1a>
 8001184:	4a09      	ldr	r2, [pc, #36]	; (80011ac <__aeabi_f2iz+0x3c>)
 8001186:	1898      	adds	r0, r3, r2
 8001188:	4770      	bx	lr
 800118a:	2080      	movs	r0, #128	; 0x80
 800118c:	0400      	lsls	r0, r0, #16
 800118e:	4301      	orrs	r1, r0
 8001190:	2a95      	cmp	r2, #149	; 0x95
 8001192:	dc07      	bgt.n	80011a4 <__aeabi_f2iz+0x34>
 8001194:	2096      	movs	r0, #150	; 0x96
 8001196:	1a82      	subs	r2, r0, r2
 8001198:	40d1      	lsrs	r1, r2
 800119a:	4248      	negs	r0, r1
 800119c:	2b00      	cmp	r3, #0
 800119e:	d1f3      	bne.n	8001188 <__aeabi_f2iz+0x18>
 80011a0:	0008      	movs	r0, r1
 80011a2:	e7f1      	b.n	8001188 <__aeabi_f2iz+0x18>
 80011a4:	3a96      	subs	r2, #150	; 0x96
 80011a6:	4091      	lsls	r1, r2
 80011a8:	e7f7      	b.n	800119a <__aeabi_f2iz+0x2a>
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	7fffffff 	.word	0x7fffffff

080011b0 <__aeabi_ui2f>:
 80011b0:	b570      	push	{r4, r5, r6, lr}
 80011b2:	1e04      	subs	r4, r0, #0
 80011b4:	d00e      	beq.n	80011d4 <__aeabi_ui2f+0x24>
 80011b6:	f000 ff55 	bl	8002064 <__clzsi2>
 80011ba:	239e      	movs	r3, #158	; 0x9e
 80011bc:	0001      	movs	r1, r0
 80011be:	1a1b      	subs	r3, r3, r0
 80011c0:	2b96      	cmp	r3, #150	; 0x96
 80011c2:	dc0c      	bgt.n	80011de <__aeabi_ui2f+0x2e>
 80011c4:	2808      	cmp	r0, #8
 80011c6:	d02c      	beq.n	8001222 <__aeabi_ui2f+0x72>
 80011c8:	3908      	subs	r1, #8
 80011ca:	408c      	lsls	r4, r1
 80011cc:	0264      	lsls	r4, r4, #9
 80011ce:	0a64      	lsrs	r4, r4, #9
 80011d0:	b2d8      	uxtb	r0, r3
 80011d2:	e001      	b.n	80011d8 <__aeabi_ui2f+0x28>
 80011d4:	2000      	movs	r0, #0
 80011d6:	2400      	movs	r4, #0
 80011d8:	05c0      	lsls	r0, r0, #23
 80011da:	4320      	orrs	r0, r4
 80011dc:	bd70      	pop	{r4, r5, r6, pc}
 80011de:	2b99      	cmp	r3, #153	; 0x99
 80011e0:	dd0a      	ble.n	80011f8 <__aeabi_ui2f+0x48>
 80011e2:	0002      	movs	r2, r0
 80011e4:	0020      	movs	r0, r4
 80011e6:	321b      	adds	r2, #27
 80011e8:	4090      	lsls	r0, r2
 80011ea:	0002      	movs	r2, r0
 80011ec:	1e50      	subs	r0, r2, #1
 80011ee:	4182      	sbcs	r2, r0
 80011f0:	2005      	movs	r0, #5
 80011f2:	1a40      	subs	r0, r0, r1
 80011f4:	40c4      	lsrs	r4, r0
 80011f6:	4314      	orrs	r4, r2
 80011f8:	2905      	cmp	r1, #5
 80011fa:	dc16      	bgt.n	800122a <__aeabi_ui2f+0x7a>
 80011fc:	0022      	movs	r2, r4
 80011fe:	480f      	ldr	r0, [pc, #60]	; (800123c <__aeabi_ui2f+0x8c>)
 8001200:	4002      	ands	r2, r0
 8001202:	0765      	lsls	r5, r4, #29
 8001204:	d009      	beq.n	800121a <__aeabi_ui2f+0x6a>
 8001206:	250f      	movs	r5, #15
 8001208:	402c      	ands	r4, r5
 800120a:	2c04      	cmp	r4, #4
 800120c:	d005      	beq.n	800121a <__aeabi_ui2f+0x6a>
 800120e:	3204      	adds	r2, #4
 8001210:	0154      	lsls	r4, r2, #5
 8001212:	d502      	bpl.n	800121a <__aeabi_ui2f+0x6a>
 8001214:	239f      	movs	r3, #159	; 0x9f
 8001216:	4002      	ands	r2, r0
 8001218:	1a5b      	subs	r3, r3, r1
 800121a:	0192      	lsls	r2, r2, #6
 800121c:	0a54      	lsrs	r4, r2, #9
 800121e:	b2d8      	uxtb	r0, r3
 8001220:	e7da      	b.n	80011d8 <__aeabi_ui2f+0x28>
 8001222:	0264      	lsls	r4, r4, #9
 8001224:	2096      	movs	r0, #150	; 0x96
 8001226:	0a64      	lsrs	r4, r4, #9
 8001228:	e7d6      	b.n	80011d8 <__aeabi_ui2f+0x28>
 800122a:	1f4a      	subs	r2, r1, #5
 800122c:	4094      	lsls	r4, r2
 800122e:	0022      	movs	r2, r4
 8001230:	4802      	ldr	r0, [pc, #8]	; (800123c <__aeabi_ui2f+0x8c>)
 8001232:	4002      	ands	r2, r0
 8001234:	0765      	lsls	r5, r4, #29
 8001236:	d0f0      	beq.n	800121a <__aeabi_ui2f+0x6a>
 8001238:	e7e5      	b.n	8001206 <__aeabi_ui2f+0x56>
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	fbffffff 	.word	0xfbffffff

08001240 <__aeabi_dmul>:
 8001240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001242:	4645      	mov	r5, r8
 8001244:	46de      	mov	lr, fp
 8001246:	4657      	mov	r7, sl
 8001248:	464e      	mov	r6, r9
 800124a:	b5e0      	push	{r5, r6, r7, lr}
 800124c:	001f      	movs	r7, r3
 800124e:	030b      	lsls	r3, r1, #12
 8001250:	0b1b      	lsrs	r3, r3, #12
 8001252:	469b      	mov	fp, r3
 8001254:	004d      	lsls	r5, r1, #1
 8001256:	0fcb      	lsrs	r3, r1, #31
 8001258:	0004      	movs	r4, r0
 800125a:	4691      	mov	r9, r2
 800125c:	4698      	mov	r8, r3
 800125e:	b087      	sub	sp, #28
 8001260:	0d6d      	lsrs	r5, r5, #21
 8001262:	d100      	bne.n	8001266 <__aeabi_dmul+0x26>
 8001264:	e1cd      	b.n	8001602 <__aeabi_dmul+0x3c2>
 8001266:	4bce      	ldr	r3, [pc, #824]	; (80015a0 <__aeabi_dmul+0x360>)
 8001268:	429d      	cmp	r5, r3
 800126a:	d100      	bne.n	800126e <__aeabi_dmul+0x2e>
 800126c:	e1e9      	b.n	8001642 <__aeabi_dmul+0x402>
 800126e:	465a      	mov	r2, fp
 8001270:	0f43      	lsrs	r3, r0, #29
 8001272:	00d2      	lsls	r2, r2, #3
 8001274:	4313      	orrs	r3, r2
 8001276:	2280      	movs	r2, #128	; 0x80
 8001278:	0412      	lsls	r2, r2, #16
 800127a:	431a      	orrs	r2, r3
 800127c:	00c3      	lsls	r3, r0, #3
 800127e:	469a      	mov	sl, r3
 8001280:	4bc8      	ldr	r3, [pc, #800]	; (80015a4 <__aeabi_dmul+0x364>)
 8001282:	4693      	mov	fp, r2
 8001284:	469c      	mov	ip, r3
 8001286:	2300      	movs	r3, #0
 8001288:	2600      	movs	r6, #0
 800128a:	4465      	add	r5, ip
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	033c      	lsls	r4, r7, #12
 8001290:	007b      	lsls	r3, r7, #1
 8001292:	4648      	mov	r0, r9
 8001294:	0b24      	lsrs	r4, r4, #12
 8001296:	0d5b      	lsrs	r3, r3, #21
 8001298:	0fff      	lsrs	r7, r7, #31
 800129a:	2b00      	cmp	r3, #0
 800129c:	d100      	bne.n	80012a0 <__aeabi_dmul+0x60>
 800129e:	e189      	b.n	80015b4 <__aeabi_dmul+0x374>
 80012a0:	4abf      	ldr	r2, [pc, #764]	; (80015a0 <__aeabi_dmul+0x360>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d019      	beq.n	80012da <__aeabi_dmul+0x9a>
 80012a6:	0f42      	lsrs	r2, r0, #29
 80012a8:	00e4      	lsls	r4, r4, #3
 80012aa:	4322      	orrs	r2, r4
 80012ac:	2480      	movs	r4, #128	; 0x80
 80012ae:	0424      	lsls	r4, r4, #16
 80012b0:	4314      	orrs	r4, r2
 80012b2:	4abc      	ldr	r2, [pc, #752]	; (80015a4 <__aeabi_dmul+0x364>)
 80012b4:	2100      	movs	r1, #0
 80012b6:	4694      	mov	ip, r2
 80012b8:	4642      	mov	r2, r8
 80012ba:	4463      	add	r3, ip
 80012bc:	195b      	adds	r3, r3, r5
 80012be:	9301      	str	r3, [sp, #4]
 80012c0:	9b01      	ldr	r3, [sp, #4]
 80012c2:	407a      	eors	r2, r7
 80012c4:	3301      	adds	r3, #1
 80012c6:	00c0      	lsls	r0, r0, #3
 80012c8:	b2d2      	uxtb	r2, r2
 80012ca:	9302      	str	r3, [sp, #8]
 80012cc:	2e0a      	cmp	r6, #10
 80012ce:	dd1c      	ble.n	800130a <__aeabi_dmul+0xca>
 80012d0:	003a      	movs	r2, r7
 80012d2:	2e0b      	cmp	r6, #11
 80012d4:	d05e      	beq.n	8001394 <__aeabi_dmul+0x154>
 80012d6:	4647      	mov	r7, r8
 80012d8:	e056      	b.n	8001388 <__aeabi_dmul+0x148>
 80012da:	4649      	mov	r1, r9
 80012dc:	4bb0      	ldr	r3, [pc, #704]	; (80015a0 <__aeabi_dmul+0x360>)
 80012de:	4321      	orrs	r1, r4
 80012e0:	18eb      	adds	r3, r5, r3
 80012e2:	9301      	str	r3, [sp, #4]
 80012e4:	2900      	cmp	r1, #0
 80012e6:	d12a      	bne.n	800133e <__aeabi_dmul+0xfe>
 80012e8:	2080      	movs	r0, #128	; 0x80
 80012ea:	2202      	movs	r2, #2
 80012ec:	0100      	lsls	r0, r0, #4
 80012ee:	002b      	movs	r3, r5
 80012f0:	4684      	mov	ip, r0
 80012f2:	4316      	orrs	r6, r2
 80012f4:	4642      	mov	r2, r8
 80012f6:	4463      	add	r3, ip
 80012f8:	407a      	eors	r2, r7
 80012fa:	b2d2      	uxtb	r2, r2
 80012fc:	9302      	str	r3, [sp, #8]
 80012fe:	2e0a      	cmp	r6, #10
 8001300:	dd00      	ble.n	8001304 <__aeabi_dmul+0xc4>
 8001302:	e231      	b.n	8001768 <__aeabi_dmul+0x528>
 8001304:	2000      	movs	r0, #0
 8001306:	2400      	movs	r4, #0
 8001308:	2102      	movs	r1, #2
 800130a:	2e02      	cmp	r6, #2
 800130c:	dc26      	bgt.n	800135c <__aeabi_dmul+0x11c>
 800130e:	3e01      	subs	r6, #1
 8001310:	2e01      	cmp	r6, #1
 8001312:	d852      	bhi.n	80013ba <__aeabi_dmul+0x17a>
 8001314:	2902      	cmp	r1, #2
 8001316:	d04c      	beq.n	80013b2 <__aeabi_dmul+0x172>
 8001318:	2901      	cmp	r1, #1
 800131a:	d000      	beq.n	800131e <__aeabi_dmul+0xde>
 800131c:	e118      	b.n	8001550 <__aeabi_dmul+0x310>
 800131e:	2300      	movs	r3, #0
 8001320:	2400      	movs	r4, #0
 8001322:	2500      	movs	r5, #0
 8001324:	051b      	lsls	r3, r3, #20
 8001326:	4323      	orrs	r3, r4
 8001328:	07d2      	lsls	r2, r2, #31
 800132a:	4313      	orrs	r3, r2
 800132c:	0028      	movs	r0, r5
 800132e:	0019      	movs	r1, r3
 8001330:	b007      	add	sp, #28
 8001332:	bcf0      	pop	{r4, r5, r6, r7}
 8001334:	46bb      	mov	fp, r7
 8001336:	46b2      	mov	sl, r6
 8001338:	46a9      	mov	r9, r5
 800133a:	46a0      	mov	r8, r4
 800133c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800133e:	2180      	movs	r1, #128	; 0x80
 8001340:	2203      	movs	r2, #3
 8001342:	0109      	lsls	r1, r1, #4
 8001344:	002b      	movs	r3, r5
 8001346:	468c      	mov	ip, r1
 8001348:	4316      	orrs	r6, r2
 800134a:	4642      	mov	r2, r8
 800134c:	4463      	add	r3, ip
 800134e:	407a      	eors	r2, r7
 8001350:	b2d2      	uxtb	r2, r2
 8001352:	9302      	str	r3, [sp, #8]
 8001354:	2e0a      	cmp	r6, #10
 8001356:	dd00      	ble.n	800135a <__aeabi_dmul+0x11a>
 8001358:	e228      	b.n	80017ac <__aeabi_dmul+0x56c>
 800135a:	2103      	movs	r1, #3
 800135c:	2501      	movs	r5, #1
 800135e:	40b5      	lsls	r5, r6
 8001360:	46ac      	mov	ip, r5
 8001362:	26a6      	movs	r6, #166	; 0xa6
 8001364:	4663      	mov	r3, ip
 8001366:	00f6      	lsls	r6, r6, #3
 8001368:	4035      	ands	r5, r6
 800136a:	4233      	tst	r3, r6
 800136c:	d10b      	bne.n	8001386 <__aeabi_dmul+0x146>
 800136e:	2690      	movs	r6, #144	; 0x90
 8001370:	00b6      	lsls	r6, r6, #2
 8001372:	4233      	tst	r3, r6
 8001374:	d118      	bne.n	80013a8 <__aeabi_dmul+0x168>
 8001376:	3eb9      	subs	r6, #185	; 0xb9
 8001378:	3eff      	subs	r6, #255	; 0xff
 800137a:	421e      	tst	r6, r3
 800137c:	d01d      	beq.n	80013ba <__aeabi_dmul+0x17a>
 800137e:	46a3      	mov	fp, r4
 8001380:	4682      	mov	sl, r0
 8001382:	9100      	str	r1, [sp, #0]
 8001384:	e000      	b.n	8001388 <__aeabi_dmul+0x148>
 8001386:	0017      	movs	r7, r2
 8001388:	9900      	ldr	r1, [sp, #0]
 800138a:	003a      	movs	r2, r7
 800138c:	2902      	cmp	r1, #2
 800138e:	d010      	beq.n	80013b2 <__aeabi_dmul+0x172>
 8001390:	465c      	mov	r4, fp
 8001392:	4650      	mov	r0, sl
 8001394:	2903      	cmp	r1, #3
 8001396:	d1bf      	bne.n	8001318 <__aeabi_dmul+0xd8>
 8001398:	2380      	movs	r3, #128	; 0x80
 800139a:	031b      	lsls	r3, r3, #12
 800139c:	431c      	orrs	r4, r3
 800139e:	0324      	lsls	r4, r4, #12
 80013a0:	0005      	movs	r5, r0
 80013a2:	4b7f      	ldr	r3, [pc, #508]	; (80015a0 <__aeabi_dmul+0x360>)
 80013a4:	0b24      	lsrs	r4, r4, #12
 80013a6:	e7bd      	b.n	8001324 <__aeabi_dmul+0xe4>
 80013a8:	2480      	movs	r4, #128	; 0x80
 80013aa:	2200      	movs	r2, #0
 80013ac:	4b7c      	ldr	r3, [pc, #496]	; (80015a0 <__aeabi_dmul+0x360>)
 80013ae:	0324      	lsls	r4, r4, #12
 80013b0:	e7b8      	b.n	8001324 <__aeabi_dmul+0xe4>
 80013b2:	2400      	movs	r4, #0
 80013b4:	2500      	movs	r5, #0
 80013b6:	4b7a      	ldr	r3, [pc, #488]	; (80015a0 <__aeabi_dmul+0x360>)
 80013b8:	e7b4      	b.n	8001324 <__aeabi_dmul+0xe4>
 80013ba:	4653      	mov	r3, sl
 80013bc:	041e      	lsls	r6, r3, #16
 80013be:	0c36      	lsrs	r6, r6, #16
 80013c0:	0c1f      	lsrs	r7, r3, #16
 80013c2:	0033      	movs	r3, r6
 80013c4:	0c01      	lsrs	r1, r0, #16
 80013c6:	0400      	lsls	r0, r0, #16
 80013c8:	0c00      	lsrs	r0, r0, #16
 80013ca:	4343      	muls	r3, r0
 80013cc:	4698      	mov	r8, r3
 80013ce:	0003      	movs	r3, r0
 80013d0:	437b      	muls	r3, r7
 80013d2:	4699      	mov	r9, r3
 80013d4:	0033      	movs	r3, r6
 80013d6:	434b      	muls	r3, r1
 80013d8:	469c      	mov	ip, r3
 80013da:	4643      	mov	r3, r8
 80013dc:	000d      	movs	r5, r1
 80013de:	0c1b      	lsrs	r3, r3, #16
 80013e0:	469a      	mov	sl, r3
 80013e2:	437d      	muls	r5, r7
 80013e4:	44cc      	add	ip, r9
 80013e6:	44d4      	add	ip, sl
 80013e8:	9500      	str	r5, [sp, #0]
 80013ea:	45e1      	cmp	r9, ip
 80013ec:	d904      	bls.n	80013f8 <__aeabi_dmul+0x1b8>
 80013ee:	2380      	movs	r3, #128	; 0x80
 80013f0:	025b      	lsls	r3, r3, #9
 80013f2:	4699      	mov	r9, r3
 80013f4:	444d      	add	r5, r9
 80013f6:	9500      	str	r5, [sp, #0]
 80013f8:	4663      	mov	r3, ip
 80013fa:	0c1b      	lsrs	r3, r3, #16
 80013fc:	001d      	movs	r5, r3
 80013fe:	4663      	mov	r3, ip
 8001400:	041b      	lsls	r3, r3, #16
 8001402:	469c      	mov	ip, r3
 8001404:	4643      	mov	r3, r8
 8001406:	041b      	lsls	r3, r3, #16
 8001408:	0c1b      	lsrs	r3, r3, #16
 800140a:	4698      	mov	r8, r3
 800140c:	4663      	mov	r3, ip
 800140e:	4443      	add	r3, r8
 8001410:	9303      	str	r3, [sp, #12]
 8001412:	0c23      	lsrs	r3, r4, #16
 8001414:	4698      	mov	r8, r3
 8001416:	0033      	movs	r3, r6
 8001418:	0424      	lsls	r4, r4, #16
 800141a:	0c24      	lsrs	r4, r4, #16
 800141c:	4363      	muls	r3, r4
 800141e:	469c      	mov	ip, r3
 8001420:	0023      	movs	r3, r4
 8001422:	437b      	muls	r3, r7
 8001424:	4699      	mov	r9, r3
 8001426:	4643      	mov	r3, r8
 8001428:	435e      	muls	r6, r3
 800142a:	435f      	muls	r7, r3
 800142c:	444e      	add	r6, r9
 800142e:	4663      	mov	r3, ip
 8001430:	46b2      	mov	sl, r6
 8001432:	0c1e      	lsrs	r6, r3, #16
 8001434:	4456      	add	r6, sl
 8001436:	45b1      	cmp	r9, r6
 8001438:	d903      	bls.n	8001442 <__aeabi_dmul+0x202>
 800143a:	2380      	movs	r3, #128	; 0x80
 800143c:	025b      	lsls	r3, r3, #9
 800143e:	4699      	mov	r9, r3
 8001440:	444f      	add	r7, r9
 8001442:	0c33      	lsrs	r3, r6, #16
 8001444:	4699      	mov	r9, r3
 8001446:	003b      	movs	r3, r7
 8001448:	444b      	add	r3, r9
 800144a:	9305      	str	r3, [sp, #20]
 800144c:	4663      	mov	r3, ip
 800144e:	46ac      	mov	ip, r5
 8001450:	041f      	lsls	r7, r3, #16
 8001452:	0c3f      	lsrs	r7, r7, #16
 8001454:	0436      	lsls	r6, r6, #16
 8001456:	19f6      	adds	r6, r6, r7
 8001458:	44b4      	add	ip, r6
 800145a:	4663      	mov	r3, ip
 800145c:	9304      	str	r3, [sp, #16]
 800145e:	465b      	mov	r3, fp
 8001460:	0c1b      	lsrs	r3, r3, #16
 8001462:	469c      	mov	ip, r3
 8001464:	465b      	mov	r3, fp
 8001466:	041f      	lsls	r7, r3, #16
 8001468:	0c3f      	lsrs	r7, r7, #16
 800146a:	003b      	movs	r3, r7
 800146c:	4343      	muls	r3, r0
 800146e:	4699      	mov	r9, r3
 8001470:	4663      	mov	r3, ip
 8001472:	4343      	muls	r3, r0
 8001474:	469a      	mov	sl, r3
 8001476:	464b      	mov	r3, r9
 8001478:	4660      	mov	r0, ip
 800147a:	0c1b      	lsrs	r3, r3, #16
 800147c:	469b      	mov	fp, r3
 800147e:	4348      	muls	r0, r1
 8001480:	4379      	muls	r1, r7
 8001482:	4451      	add	r1, sl
 8001484:	4459      	add	r1, fp
 8001486:	458a      	cmp	sl, r1
 8001488:	d903      	bls.n	8001492 <__aeabi_dmul+0x252>
 800148a:	2380      	movs	r3, #128	; 0x80
 800148c:	025b      	lsls	r3, r3, #9
 800148e:	469a      	mov	sl, r3
 8001490:	4450      	add	r0, sl
 8001492:	0c0b      	lsrs	r3, r1, #16
 8001494:	469a      	mov	sl, r3
 8001496:	464b      	mov	r3, r9
 8001498:	041b      	lsls	r3, r3, #16
 800149a:	0c1b      	lsrs	r3, r3, #16
 800149c:	4699      	mov	r9, r3
 800149e:	003b      	movs	r3, r7
 80014a0:	4363      	muls	r3, r4
 80014a2:	0409      	lsls	r1, r1, #16
 80014a4:	4645      	mov	r5, r8
 80014a6:	4449      	add	r1, r9
 80014a8:	4699      	mov	r9, r3
 80014aa:	4663      	mov	r3, ip
 80014ac:	435c      	muls	r4, r3
 80014ae:	436b      	muls	r3, r5
 80014b0:	469c      	mov	ip, r3
 80014b2:	464b      	mov	r3, r9
 80014b4:	0c1b      	lsrs	r3, r3, #16
 80014b6:	4698      	mov	r8, r3
 80014b8:	436f      	muls	r7, r5
 80014ba:	193f      	adds	r7, r7, r4
 80014bc:	4447      	add	r7, r8
 80014be:	4450      	add	r0, sl
 80014c0:	42bc      	cmp	r4, r7
 80014c2:	d903      	bls.n	80014cc <__aeabi_dmul+0x28c>
 80014c4:	2380      	movs	r3, #128	; 0x80
 80014c6:	025b      	lsls	r3, r3, #9
 80014c8:	4698      	mov	r8, r3
 80014ca:	44c4      	add	ip, r8
 80014cc:	9b04      	ldr	r3, [sp, #16]
 80014ce:	9d00      	ldr	r5, [sp, #0]
 80014d0:	4698      	mov	r8, r3
 80014d2:	4445      	add	r5, r8
 80014d4:	42b5      	cmp	r5, r6
 80014d6:	41b6      	sbcs	r6, r6
 80014d8:	4273      	negs	r3, r6
 80014da:	4698      	mov	r8, r3
 80014dc:	464b      	mov	r3, r9
 80014de:	041e      	lsls	r6, r3, #16
 80014e0:	9b05      	ldr	r3, [sp, #20]
 80014e2:	043c      	lsls	r4, r7, #16
 80014e4:	4699      	mov	r9, r3
 80014e6:	0c36      	lsrs	r6, r6, #16
 80014e8:	19a4      	adds	r4, r4, r6
 80014ea:	444c      	add	r4, r9
 80014ec:	46a1      	mov	r9, r4
 80014ee:	4683      	mov	fp, r0
 80014f0:	186e      	adds	r6, r5, r1
 80014f2:	44c1      	add	r9, r8
 80014f4:	428e      	cmp	r6, r1
 80014f6:	4189      	sbcs	r1, r1
 80014f8:	44cb      	add	fp, r9
 80014fa:	465d      	mov	r5, fp
 80014fc:	4249      	negs	r1, r1
 80014fe:	186d      	adds	r5, r5, r1
 8001500:	429c      	cmp	r4, r3
 8001502:	41a4      	sbcs	r4, r4
 8001504:	45c1      	cmp	r9, r8
 8001506:	419b      	sbcs	r3, r3
 8001508:	4583      	cmp	fp, r0
 800150a:	4180      	sbcs	r0, r0
 800150c:	428d      	cmp	r5, r1
 800150e:	4189      	sbcs	r1, r1
 8001510:	425b      	negs	r3, r3
 8001512:	4264      	negs	r4, r4
 8001514:	431c      	orrs	r4, r3
 8001516:	4240      	negs	r0, r0
 8001518:	9b03      	ldr	r3, [sp, #12]
 800151a:	4249      	negs	r1, r1
 800151c:	4301      	orrs	r1, r0
 800151e:	0270      	lsls	r0, r6, #9
 8001520:	0c3f      	lsrs	r7, r7, #16
 8001522:	4318      	orrs	r0, r3
 8001524:	19e4      	adds	r4, r4, r7
 8001526:	1e47      	subs	r7, r0, #1
 8001528:	41b8      	sbcs	r0, r7
 800152a:	1864      	adds	r4, r4, r1
 800152c:	4464      	add	r4, ip
 800152e:	0df6      	lsrs	r6, r6, #23
 8001530:	0261      	lsls	r1, r4, #9
 8001532:	4330      	orrs	r0, r6
 8001534:	0dec      	lsrs	r4, r5, #23
 8001536:	026e      	lsls	r6, r5, #9
 8001538:	430c      	orrs	r4, r1
 800153a:	4330      	orrs	r0, r6
 800153c:	01c9      	lsls	r1, r1, #7
 800153e:	d400      	bmi.n	8001542 <__aeabi_dmul+0x302>
 8001540:	e0f1      	b.n	8001726 <__aeabi_dmul+0x4e6>
 8001542:	2101      	movs	r1, #1
 8001544:	0843      	lsrs	r3, r0, #1
 8001546:	4001      	ands	r1, r0
 8001548:	430b      	orrs	r3, r1
 800154a:	07e0      	lsls	r0, r4, #31
 800154c:	4318      	orrs	r0, r3
 800154e:	0864      	lsrs	r4, r4, #1
 8001550:	4915      	ldr	r1, [pc, #84]	; (80015a8 <__aeabi_dmul+0x368>)
 8001552:	9b02      	ldr	r3, [sp, #8]
 8001554:	468c      	mov	ip, r1
 8001556:	4463      	add	r3, ip
 8001558:	2b00      	cmp	r3, #0
 800155a:	dc00      	bgt.n	800155e <__aeabi_dmul+0x31e>
 800155c:	e097      	b.n	800168e <__aeabi_dmul+0x44e>
 800155e:	0741      	lsls	r1, r0, #29
 8001560:	d009      	beq.n	8001576 <__aeabi_dmul+0x336>
 8001562:	210f      	movs	r1, #15
 8001564:	4001      	ands	r1, r0
 8001566:	2904      	cmp	r1, #4
 8001568:	d005      	beq.n	8001576 <__aeabi_dmul+0x336>
 800156a:	1d01      	adds	r1, r0, #4
 800156c:	4281      	cmp	r1, r0
 800156e:	4180      	sbcs	r0, r0
 8001570:	4240      	negs	r0, r0
 8001572:	1824      	adds	r4, r4, r0
 8001574:	0008      	movs	r0, r1
 8001576:	01e1      	lsls	r1, r4, #7
 8001578:	d506      	bpl.n	8001588 <__aeabi_dmul+0x348>
 800157a:	2180      	movs	r1, #128	; 0x80
 800157c:	00c9      	lsls	r1, r1, #3
 800157e:	468c      	mov	ip, r1
 8001580:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <__aeabi_dmul+0x36c>)
 8001582:	401c      	ands	r4, r3
 8001584:	9b02      	ldr	r3, [sp, #8]
 8001586:	4463      	add	r3, ip
 8001588:	4909      	ldr	r1, [pc, #36]	; (80015b0 <__aeabi_dmul+0x370>)
 800158a:	428b      	cmp	r3, r1
 800158c:	dd00      	ble.n	8001590 <__aeabi_dmul+0x350>
 800158e:	e710      	b.n	80013b2 <__aeabi_dmul+0x172>
 8001590:	0761      	lsls	r1, r4, #29
 8001592:	08c5      	lsrs	r5, r0, #3
 8001594:	0264      	lsls	r4, r4, #9
 8001596:	055b      	lsls	r3, r3, #21
 8001598:	430d      	orrs	r5, r1
 800159a:	0b24      	lsrs	r4, r4, #12
 800159c:	0d5b      	lsrs	r3, r3, #21
 800159e:	e6c1      	b.n	8001324 <__aeabi_dmul+0xe4>
 80015a0:	000007ff 	.word	0x000007ff
 80015a4:	fffffc01 	.word	0xfffffc01
 80015a8:	000003ff 	.word	0x000003ff
 80015ac:	feffffff 	.word	0xfeffffff
 80015b0:	000007fe 	.word	0x000007fe
 80015b4:	464b      	mov	r3, r9
 80015b6:	4323      	orrs	r3, r4
 80015b8:	d059      	beq.n	800166e <__aeabi_dmul+0x42e>
 80015ba:	2c00      	cmp	r4, #0
 80015bc:	d100      	bne.n	80015c0 <__aeabi_dmul+0x380>
 80015be:	e0a3      	b.n	8001708 <__aeabi_dmul+0x4c8>
 80015c0:	0020      	movs	r0, r4
 80015c2:	f000 fd4f 	bl	8002064 <__clzsi2>
 80015c6:	0001      	movs	r1, r0
 80015c8:	0003      	movs	r3, r0
 80015ca:	390b      	subs	r1, #11
 80015cc:	221d      	movs	r2, #29
 80015ce:	1a52      	subs	r2, r2, r1
 80015d0:	4649      	mov	r1, r9
 80015d2:	0018      	movs	r0, r3
 80015d4:	40d1      	lsrs	r1, r2
 80015d6:	464a      	mov	r2, r9
 80015d8:	3808      	subs	r0, #8
 80015da:	4082      	lsls	r2, r0
 80015dc:	4084      	lsls	r4, r0
 80015de:	0010      	movs	r0, r2
 80015e0:	430c      	orrs	r4, r1
 80015e2:	4a74      	ldr	r2, [pc, #464]	; (80017b4 <__aeabi_dmul+0x574>)
 80015e4:	1aeb      	subs	r3, r5, r3
 80015e6:	4694      	mov	ip, r2
 80015e8:	4642      	mov	r2, r8
 80015ea:	4463      	add	r3, ip
 80015ec:	9301      	str	r3, [sp, #4]
 80015ee:	9b01      	ldr	r3, [sp, #4]
 80015f0:	407a      	eors	r2, r7
 80015f2:	3301      	adds	r3, #1
 80015f4:	2100      	movs	r1, #0
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	9302      	str	r3, [sp, #8]
 80015fa:	2e0a      	cmp	r6, #10
 80015fc:	dd00      	ble.n	8001600 <__aeabi_dmul+0x3c0>
 80015fe:	e667      	b.n	80012d0 <__aeabi_dmul+0x90>
 8001600:	e683      	b.n	800130a <__aeabi_dmul+0xca>
 8001602:	465b      	mov	r3, fp
 8001604:	4303      	orrs	r3, r0
 8001606:	469a      	mov	sl, r3
 8001608:	d02a      	beq.n	8001660 <__aeabi_dmul+0x420>
 800160a:	465b      	mov	r3, fp
 800160c:	2b00      	cmp	r3, #0
 800160e:	d06d      	beq.n	80016ec <__aeabi_dmul+0x4ac>
 8001610:	4658      	mov	r0, fp
 8001612:	f000 fd27 	bl	8002064 <__clzsi2>
 8001616:	0001      	movs	r1, r0
 8001618:	0003      	movs	r3, r0
 800161a:	390b      	subs	r1, #11
 800161c:	221d      	movs	r2, #29
 800161e:	1a52      	subs	r2, r2, r1
 8001620:	0021      	movs	r1, r4
 8001622:	0018      	movs	r0, r3
 8001624:	465d      	mov	r5, fp
 8001626:	40d1      	lsrs	r1, r2
 8001628:	3808      	subs	r0, #8
 800162a:	4085      	lsls	r5, r0
 800162c:	000a      	movs	r2, r1
 800162e:	4084      	lsls	r4, r0
 8001630:	432a      	orrs	r2, r5
 8001632:	4693      	mov	fp, r2
 8001634:	46a2      	mov	sl, r4
 8001636:	4d5f      	ldr	r5, [pc, #380]	; (80017b4 <__aeabi_dmul+0x574>)
 8001638:	2600      	movs	r6, #0
 800163a:	1aed      	subs	r5, r5, r3
 800163c:	2300      	movs	r3, #0
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	e625      	b.n	800128e <__aeabi_dmul+0x4e>
 8001642:	465b      	mov	r3, fp
 8001644:	4303      	orrs	r3, r0
 8001646:	469a      	mov	sl, r3
 8001648:	d105      	bne.n	8001656 <__aeabi_dmul+0x416>
 800164a:	2300      	movs	r3, #0
 800164c:	469b      	mov	fp, r3
 800164e:	3302      	adds	r3, #2
 8001650:	2608      	movs	r6, #8
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	e61b      	b.n	800128e <__aeabi_dmul+0x4e>
 8001656:	2303      	movs	r3, #3
 8001658:	4682      	mov	sl, r0
 800165a:	260c      	movs	r6, #12
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	e616      	b.n	800128e <__aeabi_dmul+0x4e>
 8001660:	2300      	movs	r3, #0
 8001662:	469b      	mov	fp, r3
 8001664:	3301      	adds	r3, #1
 8001666:	2604      	movs	r6, #4
 8001668:	2500      	movs	r5, #0
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	e60f      	b.n	800128e <__aeabi_dmul+0x4e>
 800166e:	4642      	mov	r2, r8
 8001670:	3301      	adds	r3, #1
 8001672:	9501      	str	r5, [sp, #4]
 8001674:	431e      	orrs	r6, r3
 8001676:	9b01      	ldr	r3, [sp, #4]
 8001678:	407a      	eors	r2, r7
 800167a:	3301      	adds	r3, #1
 800167c:	2400      	movs	r4, #0
 800167e:	2000      	movs	r0, #0
 8001680:	2101      	movs	r1, #1
 8001682:	b2d2      	uxtb	r2, r2
 8001684:	9302      	str	r3, [sp, #8]
 8001686:	2e0a      	cmp	r6, #10
 8001688:	dd00      	ble.n	800168c <__aeabi_dmul+0x44c>
 800168a:	e621      	b.n	80012d0 <__aeabi_dmul+0x90>
 800168c:	e63d      	b.n	800130a <__aeabi_dmul+0xca>
 800168e:	2101      	movs	r1, #1
 8001690:	1ac9      	subs	r1, r1, r3
 8001692:	2938      	cmp	r1, #56	; 0x38
 8001694:	dd00      	ble.n	8001698 <__aeabi_dmul+0x458>
 8001696:	e642      	b.n	800131e <__aeabi_dmul+0xde>
 8001698:	291f      	cmp	r1, #31
 800169a:	dd47      	ble.n	800172c <__aeabi_dmul+0x4ec>
 800169c:	261f      	movs	r6, #31
 800169e:	0025      	movs	r5, r4
 80016a0:	4276      	negs	r6, r6
 80016a2:	1af3      	subs	r3, r6, r3
 80016a4:	40dd      	lsrs	r5, r3
 80016a6:	002b      	movs	r3, r5
 80016a8:	2920      	cmp	r1, #32
 80016aa:	d005      	beq.n	80016b8 <__aeabi_dmul+0x478>
 80016ac:	4942      	ldr	r1, [pc, #264]	; (80017b8 <__aeabi_dmul+0x578>)
 80016ae:	9d02      	ldr	r5, [sp, #8]
 80016b0:	468c      	mov	ip, r1
 80016b2:	4465      	add	r5, ip
 80016b4:	40ac      	lsls	r4, r5
 80016b6:	4320      	orrs	r0, r4
 80016b8:	1e41      	subs	r1, r0, #1
 80016ba:	4188      	sbcs	r0, r1
 80016bc:	4318      	orrs	r0, r3
 80016be:	2307      	movs	r3, #7
 80016c0:	001d      	movs	r5, r3
 80016c2:	2400      	movs	r4, #0
 80016c4:	4005      	ands	r5, r0
 80016c6:	4203      	tst	r3, r0
 80016c8:	d04a      	beq.n	8001760 <__aeabi_dmul+0x520>
 80016ca:	230f      	movs	r3, #15
 80016cc:	2400      	movs	r4, #0
 80016ce:	4003      	ands	r3, r0
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	d042      	beq.n	800175a <__aeabi_dmul+0x51a>
 80016d4:	1d03      	adds	r3, r0, #4
 80016d6:	4283      	cmp	r3, r0
 80016d8:	4180      	sbcs	r0, r0
 80016da:	4240      	negs	r0, r0
 80016dc:	1824      	adds	r4, r4, r0
 80016de:	0018      	movs	r0, r3
 80016e0:	0223      	lsls	r3, r4, #8
 80016e2:	d53a      	bpl.n	800175a <__aeabi_dmul+0x51a>
 80016e4:	2301      	movs	r3, #1
 80016e6:	2400      	movs	r4, #0
 80016e8:	2500      	movs	r5, #0
 80016ea:	e61b      	b.n	8001324 <__aeabi_dmul+0xe4>
 80016ec:	f000 fcba 	bl	8002064 <__clzsi2>
 80016f0:	0001      	movs	r1, r0
 80016f2:	0003      	movs	r3, r0
 80016f4:	3115      	adds	r1, #21
 80016f6:	3320      	adds	r3, #32
 80016f8:	291c      	cmp	r1, #28
 80016fa:	dd8f      	ble.n	800161c <__aeabi_dmul+0x3dc>
 80016fc:	3808      	subs	r0, #8
 80016fe:	2200      	movs	r2, #0
 8001700:	4084      	lsls	r4, r0
 8001702:	4692      	mov	sl, r2
 8001704:	46a3      	mov	fp, r4
 8001706:	e796      	b.n	8001636 <__aeabi_dmul+0x3f6>
 8001708:	f000 fcac 	bl	8002064 <__clzsi2>
 800170c:	0001      	movs	r1, r0
 800170e:	0003      	movs	r3, r0
 8001710:	3115      	adds	r1, #21
 8001712:	3320      	adds	r3, #32
 8001714:	291c      	cmp	r1, #28
 8001716:	dc00      	bgt.n	800171a <__aeabi_dmul+0x4da>
 8001718:	e758      	b.n	80015cc <__aeabi_dmul+0x38c>
 800171a:	0002      	movs	r2, r0
 800171c:	464c      	mov	r4, r9
 800171e:	3a08      	subs	r2, #8
 8001720:	2000      	movs	r0, #0
 8001722:	4094      	lsls	r4, r2
 8001724:	e75d      	b.n	80015e2 <__aeabi_dmul+0x3a2>
 8001726:	9b01      	ldr	r3, [sp, #4]
 8001728:	9302      	str	r3, [sp, #8]
 800172a:	e711      	b.n	8001550 <__aeabi_dmul+0x310>
 800172c:	4b23      	ldr	r3, [pc, #140]	; (80017bc <__aeabi_dmul+0x57c>)
 800172e:	0026      	movs	r6, r4
 8001730:	469c      	mov	ip, r3
 8001732:	0003      	movs	r3, r0
 8001734:	9d02      	ldr	r5, [sp, #8]
 8001736:	40cb      	lsrs	r3, r1
 8001738:	4465      	add	r5, ip
 800173a:	40ae      	lsls	r6, r5
 800173c:	431e      	orrs	r6, r3
 800173e:	0003      	movs	r3, r0
 8001740:	40ab      	lsls	r3, r5
 8001742:	1e58      	subs	r0, r3, #1
 8001744:	4183      	sbcs	r3, r0
 8001746:	0030      	movs	r0, r6
 8001748:	4318      	orrs	r0, r3
 800174a:	40cc      	lsrs	r4, r1
 800174c:	0743      	lsls	r3, r0, #29
 800174e:	d0c7      	beq.n	80016e0 <__aeabi_dmul+0x4a0>
 8001750:	230f      	movs	r3, #15
 8001752:	4003      	ands	r3, r0
 8001754:	2b04      	cmp	r3, #4
 8001756:	d1bd      	bne.n	80016d4 <__aeabi_dmul+0x494>
 8001758:	e7c2      	b.n	80016e0 <__aeabi_dmul+0x4a0>
 800175a:	0765      	lsls	r5, r4, #29
 800175c:	0264      	lsls	r4, r4, #9
 800175e:	0b24      	lsrs	r4, r4, #12
 8001760:	08c0      	lsrs	r0, r0, #3
 8001762:	2300      	movs	r3, #0
 8001764:	4305      	orrs	r5, r0
 8001766:	e5dd      	b.n	8001324 <__aeabi_dmul+0xe4>
 8001768:	2500      	movs	r5, #0
 800176a:	2302      	movs	r3, #2
 800176c:	2e0f      	cmp	r6, #15
 800176e:	d10c      	bne.n	800178a <__aeabi_dmul+0x54a>
 8001770:	2480      	movs	r4, #128	; 0x80
 8001772:	465b      	mov	r3, fp
 8001774:	0324      	lsls	r4, r4, #12
 8001776:	4223      	tst	r3, r4
 8001778:	d00e      	beq.n	8001798 <__aeabi_dmul+0x558>
 800177a:	4221      	tst	r1, r4
 800177c:	d10c      	bne.n	8001798 <__aeabi_dmul+0x558>
 800177e:	430c      	orrs	r4, r1
 8001780:	0324      	lsls	r4, r4, #12
 8001782:	003a      	movs	r2, r7
 8001784:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <__aeabi_dmul+0x580>)
 8001786:	0b24      	lsrs	r4, r4, #12
 8001788:	e5cc      	b.n	8001324 <__aeabi_dmul+0xe4>
 800178a:	2e0b      	cmp	r6, #11
 800178c:	d000      	beq.n	8001790 <__aeabi_dmul+0x550>
 800178e:	e5a2      	b.n	80012d6 <__aeabi_dmul+0x96>
 8001790:	468b      	mov	fp, r1
 8001792:	46aa      	mov	sl, r5
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	e5f7      	b.n	8001388 <__aeabi_dmul+0x148>
 8001798:	2480      	movs	r4, #128	; 0x80
 800179a:	465b      	mov	r3, fp
 800179c:	0324      	lsls	r4, r4, #12
 800179e:	431c      	orrs	r4, r3
 80017a0:	0324      	lsls	r4, r4, #12
 80017a2:	4642      	mov	r2, r8
 80017a4:	4655      	mov	r5, sl
 80017a6:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <__aeabi_dmul+0x580>)
 80017a8:	0b24      	lsrs	r4, r4, #12
 80017aa:	e5bb      	b.n	8001324 <__aeabi_dmul+0xe4>
 80017ac:	464d      	mov	r5, r9
 80017ae:	0021      	movs	r1, r4
 80017b0:	2303      	movs	r3, #3
 80017b2:	e7db      	b.n	800176c <__aeabi_dmul+0x52c>
 80017b4:	fffffc0d 	.word	0xfffffc0d
 80017b8:	0000043e 	.word	0x0000043e
 80017bc:	0000041e 	.word	0x0000041e
 80017c0:	000007ff 	.word	0x000007ff

080017c4 <__aeabi_dsub>:
 80017c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017c6:	4657      	mov	r7, sl
 80017c8:	464e      	mov	r6, r9
 80017ca:	4645      	mov	r5, r8
 80017cc:	46de      	mov	lr, fp
 80017ce:	b5e0      	push	{r5, r6, r7, lr}
 80017d0:	000d      	movs	r5, r1
 80017d2:	0004      	movs	r4, r0
 80017d4:	0019      	movs	r1, r3
 80017d6:	0010      	movs	r0, r2
 80017d8:	032b      	lsls	r3, r5, #12
 80017da:	0a5b      	lsrs	r3, r3, #9
 80017dc:	0f62      	lsrs	r2, r4, #29
 80017de:	431a      	orrs	r2, r3
 80017e0:	00e3      	lsls	r3, r4, #3
 80017e2:	030c      	lsls	r4, r1, #12
 80017e4:	0a64      	lsrs	r4, r4, #9
 80017e6:	0f47      	lsrs	r7, r0, #29
 80017e8:	4327      	orrs	r7, r4
 80017ea:	4cd0      	ldr	r4, [pc, #832]	; (8001b2c <__aeabi_dsub+0x368>)
 80017ec:	006e      	lsls	r6, r5, #1
 80017ee:	4691      	mov	r9, r2
 80017f0:	b083      	sub	sp, #12
 80017f2:	004a      	lsls	r2, r1, #1
 80017f4:	00c0      	lsls	r0, r0, #3
 80017f6:	4698      	mov	r8, r3
 80017f8:	46a2      	mov	sl, r4
 80017fa:	0d76      	lsrs	r6, r6, #21
 80017fc:	0fed      	lsrs	r5, r5, #31
 80017fe:	0d52      	lsrs	r2, r2, #21
 8001800:	0fc9      	lsrs	r1, r1, #31
 8001802:	9001      	str	r0, [sp, #4]
 8001804:	42a2      	cmp	r2, r4
 8001806:	d100      	bne.n	800180a <__aeabi_dsub+0x46>
 8001808:	e0b9      	b.n	800197e <__aeabi_dsub+0x1ba>
 800180a:	2401      	movs	r4, #1
 800180c:	4061      	eors	r1, r4
 800180e:	468b      	mov	fp, r1
 8001810:	428d      	cmp	r5, r1
 8001812:	d100      	bne.n	8001816 <__aeabi_dsub+0x52>
 8001814:	e08d      	b.n	8001932 <__aeabi_dsub+0x16e>
 8001816:	1ab4      	subs	r4, r6, r2
 8001818:	46a4      	mov	ip, r4
 800181a:	2c00      	cmp	r4, #0
 800181c:	dc00      	bgt.n	8001820 <__aeabi_dsub+0x5c>
 800181e:	e0b7      	b.n	8001990 <__aeabi_dsub+0x1cc>
 8001820:	2a00      	cmp	r2, #0
 8001822:	d100      	bne.n	8001826 <__aeabi_dsub+0x62>
 8001824:	e0cb      	b.n	80019be <__aeabi_dsub+0x1fa>
 8001826:	4ac1      	ldr	r2, [pc, #772]	; (8001b2c <__aeabi_dsub+0x368>)
 8001828:	4296      	cmp	r6, r2
 800182a:	d100      	bne.n	800182e <__aeabi_dsub+0x6a>
 800182c:	e186      	b.n	8001b3c <__aeabi_dsub+0x378>
 800182e:	2280      	movs	r2, #128	; 0x80
 8001830:	0412      	lsls	r2, r2, #16
 8001832:	4317      	orrs	r7, r2
 8001834:	4662      	mov	r2, ip
 8001836:	2a38      	cmp	r2, #56	; 0x38
 8001838:	dd00      	ble.n	800183c <__aeabi_dsub+0x78>
 800183a:	e1a4      	b.n	8001b86 <__aeabi_dsub+0x3c2>
 800183c:	2a1f      	cmp	r2, #31
 800183e:	dd00      	ble.n	8001842 <__aeabi_dsub+0x7e>
 8001840:	e21d      	b.n	8001c7e <__aeabi_dsub+0x4ba>
 8001842:	4661      	mov	r1, ip
 8001844:	2220      	movs	r2, #32
 8001846:	003c      	movs	r4, r7
 8001848:	1a52      	subs	r2, r2, r1
 800184a:	0001      	movs	r1, r0
 800184c:	4090      	lsls	r0, r2
 800184e:	4094      	lsls	r4, r2
 8001850:	1e42      	subs	r2, r0, #1
 8001852:	4190      	sbcs	r0, r2
 8001854:	4662      	mov	r2, ip
 8001856:	46a0      	mov	r8, r4
 8001858:	4664      	mov	r4, ip
 800185a:	40d7      	lsrs	r7, r2
 800185c:	464a      	mov	r2, r9
 800185e:	40e1      	lsrs	r1, r4
 8001860:	4644      	mov	r4, r8
 8001862:	1bd2      	subs	r2, r2, r7
 8001864:	4691      	mov	r9, r2
 8001866:	430c      	orrs	r4, r1
 8001868:	4304      	orrs	r4, r0
 800186a:	1b1c      	subs	r4, r3, r4
 800186c:	42a3      	cmp	r3, r4
 800186e:	4192      	sbcs	r2, r2
 8001870:	464b      	mov	r3, r9
 8001872:	4252      	negs	r2, r2
 8001874:	1a9b      	subs	r3, r3, r2
 8001876:	469a      	mov	sl, r3
 8001878:	4653      	mov	r3, sl
 800187a:	021b      	lsls	r3, r3, #8
 800187c:	d400      	bmi.n	8001880 <__aeabi_dsub+0xbc>
 800187e:	e12b      	b.n	8001ad8 <__aeabi_dsub+0x314>
 8001880:	4653      	mov	r3, sl
 8001882:	025a      	lsls	r2, r3, #9
 8001884:	0a53      	lsrs	r3, r2, #9
 8001886:	469a      	mov	sl, r3
 8001888:	4653      	mov	r3, sl
 800188a:	2b00      	cmp	r3, #0
 800188c:	d100      	bne.n	8001890 <__aeabi_dsub+0xcc>
 800188e:	e166      	b.n	8001b5e <__aeabi_dsub+0x39a>
 8001890:	4650      	mov	r0, sl
 8001892:	f000 fbe7 	bl	8002064 <__clzsi2>
 8001896:	0003      	movs	r3, r0
 8001898:	3b08      	subs	r3, #8
 800189a:	2220      	movs	r2, #32
 800189c:	0020      	movs	r0, r4
 800189e:	1ad2      	subs	r2, r2, r3
 80018a0:	4651      	mov	r1, sl
 80018a2:	40d0      	lsrs	r0, r2
 80018a4:	4099      	lsls	r1, r3
 80018a6:	0002      	movs	r2, r0
 80018a8:	409c      	lsls	r4, r3
 80018aa:	430a      	orrs	r2, r1
 80018ac:	429e      	cmp	r6, r3
 80018ae:	dd00      	ble.n	80018b2 <__aeabi_dsub+0xee>
 80018b0:	e164      	b.n	8001b7c <__aeabi_dsub+0x3b8>
 80018b2:	1b9b      	subs	r3, r3, r6
 80018b4:	1c59      	adds	r1, r3, #1
 80018b6:	291f      	cmp	r1, #31
 80018b8:	dd00      	ble.n	80018bc <__aeabi_dsub+0xf8>
 80018ba:	e0fe      	b.n	8001aba <__aeabi_dsub+0x2f6>
 80018bc:	2320      	movs	r3, #32
 80018be:	0010      	movs	r0, r2
 80018c0:	0026      	movs	r6, r4
 80018c2:	1a5b      	subs	r3, r3, r1
 80018c4:	409c      	lsls	r4, r3
 80018c6:	4098      	lsls	r0, r3
 80018c8:	40ce      	lsrs	r6, r1
 80018ca:	40ca      	lsrs	r2, r1
 80018cc:	1e63      	subs	r3, r4, #1
 80018ce:	419c      	sbcs	r4, r3
 80018d0:	4330      	orrs	r0, r6
 80018d2:	4692      	mov	sl, r2
 80018d4:	2600      	movs	r6, #0
 80018d6:	4304      	orrs	r4, r0
 80018d8:	0763      	lsls	r3, r4, #29
 80018da:	d009      	beq.n	80018f0 <__aeabi_dsub+0x12c>
 80018dc:	230f      	movs	r3, #15
 80018de:	4023      	ands	r3, r4
 80018e0:	2b04      	cmp	r3, #4
 80018e2:	d005      	beq.n	80018f0 <__aeabi_dsub+0x12c>
 80018e4:	1d23      	adds	r3, r4, #4
 80018e6:	42a3      	cmp	r3, r4
 80018e8:	41a4      	sbcs	r4, r4
 80018ea:	4264      	negs	r4, r4
 80018ec:	44a2      	add	sl, r4
 80018ee:	001c      	movs	r4, r3
 80018f0:	4653      	mov	r3, sl
 80018f2:	021b      	lsls	r3, r3, #8
 80018f4:	d400      	bmi.n	80018f8 <__aeabi_dsub+0x134>
 80018f6:	e0f2      	b.n	8001ade <__aeabi_dsub+0x31a>
 80018f8:	4b8c      	ldr	r3, [pc, #560]	; (8001b2c <__aeabi_dsub+0x368>)
 80018fa:	3601      	adds	r6, #1
 80018fc:	429e      	cmp	r6, r3
 80018fe:	d100      	bne.n	8001902 <__aeabi_dsub+0x13e>
 8001900:	e10f      	b.n	8001b22 <__aeabi_dsub+0x35e>
 8001902:	4653      	mov	r3, sl
 8001904:	498a      	ldr	r1, [pc, #552]	; (8001b30 <__aeabi_dsub+0x36c>)
 8001906:	08e4      	lsrs	r4, r4, #3
 8001908:	400b      	ands	r3, r1
 800190a:	0019      	movs	r1, r3
 800190c:	075b      	lsls	r3, r3, #29
 800190e:	4323      	orrs	r3, r4
 8001910:	0572      	lsls	r2, r6, #21
 8001912:	024c      	lsls	r4, r1, #9
 8001914:	0b24      	lsrs	r4, r4, #12
 8001916:	0d52      	lsrs	r2, r2, #21
 8001918:	0512      	lsls	r2, r2, #20
 800191a:	4322      	orrs	r2, r4
 800191c:	07ed      	lsls	r5, r5, #31
 800191e:	432a      	orrs	r2, r5
 8001920:	0018      	movs	r0, r3
 8001922:	0011      	movs	r1, r2
 8001924:	b003      	add	sp, #12
 8001926:	bcf0      	pop	{r4, r5, r6, r7}
 8001928:	46bb      	mov	fp, r7
 800192a:	46b2      	mov	sl, r6
 800192c:	46a9      	mov	r9, r5
 800192e:	46a0      	mov	r8, r4
 8001930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001932:	1ab4      	subs	r4, r6, r2
 8001934:	46a4      	mov	ip, r4
 8001936:	2c00      	cmp	r4, #0
 8001938:	dd59      	ble.n	80019ee <__aeabi_dsub+0x22a>
 800193a:	2a00      	cmp	r2, #0
 800193c:	d100      	bne.n	8001940 <__aeabi_dsub+0x17c>
 800193e:	e0b0      	b.n	8001aa2 <__aeabi_dsub+0x2de>
 8001940:	4556      	cmp	r6, sl
 8001942:	d100      	bne.n	8001946 <__aeabi_dsub+0x182>
 8001944:	e0fa      	b.n	8001b3c <__aeabi_dsub+0x378>
 8001946:	2280      	movs	r2, #128	; 0x80
 8001948:	0412      	lsls	r2, r2, #16
 800194a:	4317      	orrs	r7, r2
 800194c:	4662      	mov	r2, ip
 800194e:	2a38      	cmp	r2, #56	; 0x38
 8001950:	dd00      	ble.n	8001954 <__aeabi_dsub+0x190>
 8001952:	e0d4      	b.n	8001afe <__aeabi_dsub+0x33a>
 8001954:	2a1f      	cmp	r2, #31
 8001956:	dc00      	bgt.n	800195a <__aeabi_dsub+0x196>
 8001958:	e1c0      	b.n	8001cdc <__aeabi_dsub+0x518>
 800195a:	0039      	movs	r1, r7
 800195c:	3a20      	subs	r2, #32
 800195e:	40d1      	lsrs	r1, r2
 8001960:	4662      	mov	r2, ip
 8001962:	2a20      	cmp	r2, #32
 8001964:	d006      	beq.n	8001974 <__aeabi_dsub+0x1b0>
 8001966:	4664      	mov	r4, ip
 8001968:	2240      	movs	r2, #64	; 0x40
 800196a:	1b12      	subs	r2, r2, r4
 800196c:	003c      	movs	r4, r7
 800196e:	4094      	lsls	r4, r2
 8001970:	4304      	orrs	r4, r0
 8001972:	9401      	str	r4, [sp, #4]
 8001974:	9c01      	ldr	r4, [sp, #4]
 8001976:	1e62      	subs	r2, r4, #1
 8001978:	4194      	sbcs	r4, r2
 800197a:	430c      	orrs	r4, r1
 800197c:	e0c3      	b.n	8001b06 <__aeabi_dsub+0x342>
 800197e:	003c      	movs	r4, r7
 8001980:	4304      	orrs	r4, r0
 8001982:	d02b      	beq.n	80019dc <__aeabi_dsub+0x218>
 8001984:	468b      	mov	fp, r1
 8001986:	428d      	cmp	r5, r1
 8001988:	d02e      	beq.n	80019e8 <__aeabi_dsub+0x224>
 800198a:	4c6a      	ldr	r4, [pc, #424]	; (8001b34 <__aeabi_dsub+0x370>)
 800198c:	46a4      	mov	ip, r4
 800198e:	44b4      	add	ip, r6
 8001990:	4664      	mov	r4, ip
 8001992:	2c00      	cmp	r4, #0
 8001994:	d05f      	beq.n	8001a56 <__aeabi_dsub+0x292>
 8001996:	1b94      	subs	r4, r2, r6
 8001998:	46a4      	mov	ip, r4
 800199a:	2e00      	cmp	r6, #0
 800199c:	d000      	beq.n	80019a0 <__aeabi_dsub+0x1dc>
 800199e:	e120      	b.n	8001be2 <__aeabi_dsub+0x41e>
 80019a0:	464c      	mov	r4, r9
 80019a2:	431c      	orrs	r4, r3
 80019a4:	d100      	bne.n	80019a8 <__aeabi_dsub+0x1e4>
 80019a6:	e1c7      	b.n	8001d38 <__aeabi_dsub+0x574>
 80019a8:	4661      	mov	r1, ip
 80019aa:	1e4c      	subs	r4, r1, #1
 80019ac:	2901      	cmp	r1, #1
 80019ae:	d100      	bne.n	80019b2 <__aeabi_dsub+0x1ee>
 80019b0:	e223      	b.n	8001dfa <__aeabi_dsub+0x636>
 80019b2:	4d5e      	ldr	r5, [pc, #376]	; (8001b2c <__aeabi_dsub+0x368>)
 80019b4:	45ac      	cmp	ip, r5
 80019b6:	d100      	bne.n	80019ba <__aeabi_dsub+0x1f6>
 80019b8:	e1d8      	b.n	8001d6c <__aeabi_dsub+0x5a8>
 80019ba:	46a4      	mov	ip, r4
 80019bc:	e11a      	b.n	8001bf4 <__aeabi_dsub+0x430>
 80019be:	003a      	movs	r2, r7
 80019c0:	4302      	orrs	r2, r0
 80019c2:	d100      	bne.n	80019c6 <__aeabi_dsub+0x202>
 80019c4:	e0e4      	b.n	8001b90 <__aeabi_dsub+0x3cc>
 80019c6:	0022      	movs	r2, r4
 80019c8:	3a01      	subs	r2, #1
 80019ca:	2c01      	cmp	r4, #1
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dsub+0x20c>
 80019ce:	e1c3      	b.n	8001d58 <__aeabi_dsub+0x594>
 80019d0:	4956      	ldr	r1, [pc, #344]	; (8001b2c <__aeabi_dsub+0x368>)
 80019d2:	428c      	cmp	r4, r1
 80019d4:	d100      	bne.n	80019d8 <__aeabi_dsub+0x214>
 80019d6:	e0b1      	b.n	8001b3c <__aeabi_dsub+0x378>
 80019d8:	4694      	mov	ip, r2
 80019da:	e72b      	b.n	8001834 <__aeabi_dsub+0x70>
 80019dc:	2401      	movs	r4, #1
 80019de:	4061      	eors	r1, r4
 80019e0:	468b      	mov	fp, r1
 80019e2:	428d      	cmp	r5, r1
 80019e4:	d000      	beq.n	80019e8 <__aeabi_dsub+0x224>
 80019e6:	e716      	b.n	8001816 <__aeabi_dsub+0x52>
 80019e8:	4952      	ldr	r1, [pc, #328]	; (8001b34 <__aeabi_dsub+0x370>)
 80019ea:	468c      	mov	ip, r1
 80019ec:	44b4      	add	ip, r6
 80019ee:	4664      	mov	r4, ip
 80019f0:	2c00      	cmp	r4, #0
 80019f2:	d100      	bne.n	80019f6 <__aeabi_dsub+0x232>
 80019f4:	e0d3      	b.n	8001b9e <__aeabi_dsub+0x3da>
 80019f6:	1b91      	subs	r1, r2, r6
 80019f8:	468c      	mov	ip, r1
 80019fa:	2e00      	cmp	r6, #0
 80019fc:	d100      	bne.n	8001a00 <__aeabi_dsub+0x23c>
 80019fe:	e15e      	b.n	8001cbe <__aeabi_dsub+0x4fa>
 8001a00:	494a      	ldr	r1, [pc, #296]	; (8001b2c <__aeabi_dsub+0x368>)
 8001a02:	428a      	cmp	r2, r1
 8001a04:	d100      	bne.n	8001a08 <__aeabi_dsub+0x244>
 8001a06:	e1be      	b.n	8001d86 <__aeabi_dsub+0x5c2>
 8001a08:	2180      	movs	r1, #128	; 0x80
 8001a0a:	464c      	mov	r4, r9
 8001a0c:	0409      	lsls	r1, r1, #16
 8001a0e:	430c      	orrs	r4, r1
 8001a10:	46a1      	mov	r9, r4
 8001a12:	4661      	mov	r1, ip
 8001a14:	2938      	cmp	r1, #56	; 0x38
 8001a16:	dd00      	ble.n	8001a1a <__aeabi_dsub+0x256>
 8001a18:	e1ba      	b.n	8001d90 <__aeabi_dsub+0x5cc>
 8001a1a:	291f      	cmp	r1, #31
 8001a1c:	dd00      	ble.n	8001a20 <__aeabi_dsub+0x25c>
 8001a1e:	e227      	b.n	8001e70 <__aeabi_dsub+0x6ac>
 8001a20:	2420      	movs	r4, #32
 8001a22:	1a64      	subs	r4, r4, r1
 8001a24:	4649      	mov	r1, r9
 8001a26:	40a1      	lsls	r1, r4
 8001a28:	001e      	movs	r6, r3
 8001a2a:	4688      	mov	r8, r1
 8001a2c:	4661      	mov	r1, ip
 8001a2e:	40a3      	lsls	r3, r4
 8001a30:	40ce      	lsrs	r6, r1
 8001a32:	4641      	mov	r1, r8
 8001a34:	1e5c      	subs	r4, r3, #1
 8001a36:	41a3      	sbcs	r3, r4
 8001a38:	4331      	orrs	r1, r6
 8001a3a:	4319      	orrs	r1, r3
 8001a3c:	000c      	movs	r4, r1
 8001a3e:	4663      	mov	r3, ip
 8001a40:	4649      	mov	r1, r9
 8001a42:	40d9      	lsrs	r1, r3
 8001a44:	187f      	adds	r7, r7, r1
 8001a46:	1824      	adds	r4, r4, r0
 8001a48:	4284      	cmp	r4, r0
 8001a4a:	419b      	sbcs	r3, r3
 8001a4c:	425b      	negs	r3, r3
 8001a4e:	469a      	mov	sl, r3
 8001a50:	0016      	movs	r6, r2
 8001a52:	44ba      	add	sl, r7
 8001a54:	e05d      	b.n	8001b12 <__aeabi_dsub+0x34e>
 8001a56:	4c38      	ldr	r4, [pc, #224]	; (8001b38 <__aeabi_dsub+0x374>)
 8001a58:	1c72      	adds	r2, r6, #1
 8001a5a:	4222      	tst	r2, r4
 8001a5c:	d000      	beq.n	8001a60 <__aeabi_dsub+0x29c>
 8001a5e:	e0df      	b.n	8001c20 <__aeabi_dsub+0x45c>
 8001a60:	464a      	mov	r2, r9
 8001a62:	431a      	orrs	r2, r3
 8001a64:	2e00      	cmp	r6, #0
 8001a66:	d000      	beq.n	8001a6a <__aeabi_dsub+0x2a6>
 8001a68:	e15c      	b.n	8001d24 <__aeabi_dsub+0x560>
 8001a6a:	2a00      	cmp	r2, #0
 8001a6c:	d100      	bne.n	8001a70 <__aeabi_dsub+0x2ac>
 8001a6e:	e1cf      	b.n	8001e10 <__aeabi_dsub+0x64c>
 8001a70:	003a      	movs	r2, r7
 8001a72:	4302      	orrs	r2, r0
 8001a74:	d100      	bne.n	8001a78 <__aeabi_dsub+0x2b4>
 8001a76:	e17f      	b.n	8001d78 <__aeabi_dsub+0x5b4>
 8001a78:	1a1c      	subs	r4, r3, r0
 8001a7a:	464a      	mov	r2, r9
 8001a7c:	42a3      	cmp	r3, r4
 8001a7e:	4189      	sbcs	r1, r1
 8001a80:	1bd2      	subs	r2, r2, r7
 8001a82:	4249      	negs	r1, r1
 8001a84:	1a52      	subs	r2, r2, r1
 8001a86:	4692      	mov	sl, r2
 8001a88:	0212      	lsls	r2, r2, #8
 8001a8a:	d400      	bmi.n	8001a8e <__aeabi_dsub+0x2ca>
 8001a8c:	e20a      	b.n	8001ea4 <__aeabi_dsub+0x6e0>
 8001a8e:	1ac4      	subs	r4, r0, r3
 8001a90:	42a0      	cmp	r0, r4
 8001a92:	4180      	sbcs	r0, r0
 8001a94:	464b      	mov	r3, r9
 8001a96:	4240      	negs	r0, r0
 8001a98:	1aff      	subs	r7, r7, r3
 8001a9a:	1a3b      	subs	r3, r7, r0
 8001a9c:	469a      	mov	sl, r3
 8001a9e:	465d      	mov	r5, fp
 8001aa0:	e71a      	b.n	80018d8 <__aeabi_dsub+0x114>
 8001aa2:	003a      	movs	r2, r7
 8001aa4:	4302      	orrs	r2, r0
 8001aa6:	d073      	beq.n	8001b90 <__aeabi_dsub+0x3cc>
 8001aa8:	0022      	movs	r2, r4
 8001aaa:	3a01      	subs	r2, #1
 8001aac:	2c01      	cmp	r4, #1
 8001aae:	d100      	bne.n	8001ab2 <__aeabi_dsub+0x2ee>
 8001ab0:	e0cb      	b.n	8001c4a <__aeabi_dsub+0x486>
 8001ab2:	4554      	cmp	r4, sl
 8001ab4:	d042      	beq.n	8001b3c <__aeabi_dsub+0x378>
 8001ab6:	4694      	mov	ip, r2
 8001ab8:	e748      	b.n	800194c <__aeabi_dsub+0x188>
 8001aba:	0010      	movs	r0, r2
 8001abc:	3b1f      	subs	r3, #31
 8001abe:	40d8      	lsrs	r0, r3
 8001ac0:	2920      	cmp	r1, #32
 8001ac2:	d003      	beq.n	8001acc <__aeabi_dsub+0x308>
 8001ac4:	2340      	movs	r3, #64	; 0x40
 8001ac6:	1a5b      	subs	r3, r3, r1
 8001ac8:	409a      	lsls	r2, r3
 8001aca:	4314      	orrs	r4, r2
 8001acc:	1e63      	subs	r3, r4, #1
 8001ace:	419c      	sbcs	r4, r3
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	2600      	movs	r6, #0
 8001ad4:	469a      	mov	sl, r3
 8001ad6:	4304      	orrs	r4, r0
 8001ad8:	0763      	lsls	r3, r4, #29
 8001ada:	d000      	beq.n	8001ade <__aeabi_dsub+0x31a>
 8001adc:	e6fe      	b.n	80018dc <__aeabi_dsub+0x118>
 8001ade:	4652      	mov	r2, sl
 8001ae0:	08e3      	lsrs	r3, r4, #3
 8001ae2:	0752      	lsls	r2, r2, #29
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	4652      	mov	r2, sl
 8001ae8:	46b4      	mov	ip, r6
 8001aea:	08d2      	lsrs	r2, r2, #3
 8001aec:	490f      	ldr	r1, [pc, #60]	; (8001b2c <__aeabi_dsub+0x368>)
 8001aee:	458c      	cmp	ip, r1
 8001af0:	d02a      	beq.n	8001b48 <__aeabi_dsub+0x384>
 8001af2:	0312      	lsls	r2, r2, #12
 8001af4:	0b14      	lsrs	r4, r2, #12
 8001af6:	4662      	mov	r2, ip
 8001af8:	0552      	lsls	r2, r2, #21
 8001afa:	0d52      	lsrs	r2, r2, #21
 8001afc:	e70c      	b.n	8001918 <__aeabi_dsub+0x154>
 8001afe:	003c      	movs	r4, r7
 8001b00:	4304      	orrs	r4, r0
 8001b02:	1e62      	subs	r2, r4, #1
 8001b04:	4194      	sbcs	r4, r2
 8001b06:	18e4      	adds	r4, r4, r3
 8001b08:	429c      	cmp	r4, r3
 8001b0a:	4192      	sbcs	r2, r2
 8001b0c:	4252      	negs	r2, r2
 8001b0e:	444a      	add	r2, r9
 8001b10:	4692      	mov	sl, r2
 8001b12:	4653      	mov	r3, sl
 8001b14:	021b      	lsls	r3, r3, #8
 8001b16:	d5df      	bpl.n	8001ad8 <__aeabi_dsub+0x314>
 8001b18:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <__aeabi_dsub+0x368>)
 8001b1a:	3601      	adds	r6, #1
 8001b1c:	429e      	cmp	r6, r3
 8001b1e:	d000      	beq.n	8001b22 <__aeabi_dsub+0x35e>
 8001b20:	e0a0      	b.n	8001c64 <__aeabi_dsub+0x4a0>
 8001b22:	0032      	movs	r2, r6
 8001b24:	2400      	movs	r4, #0
 8001b26:	2300      	movs	r3, #0
 8001b28:	e6f6      	b.n	8001918 <__aeabi_dsub+0x154>
 8001b2a:	46c0      	nop			; (mov r8, r8)
 8001b2c:	000007ff 	.word	0x000007ff
 8001b30:	ff7fffff 	.word	0xff7fffff
 8001b34:	fffff801 	.word	0xfffff801
 8001b38:	000007fe 	.word	0x000007fe
 8001b3c:	08db      	lsrs	r3, r3, #3
 8001b3e:	464a      	mov	r2, r9
 8001b40:	0752      	lsls	r2, r2, #29
 8001b42:	4313      	orrs	r3, r2
 8001b44:	464a      	mov	r2, r9
 8001b46:	08d2      	lsrs	r2, r2, #3
 8001b48:	0019      	movs	r1, r3
 8001b4a:	4311      	orrs	r1, r2
 8001b4c:	d100      	bne.n	8001b50 <__aeabi_dsub+0x38c>
 8001b4e:	e1b5      	b.n	8001ebc <__aeabi_dsub+0x6f8>
 8001b50:	2480      	movs	r4, #128	; 0x80
 8001b52:	0324      	lsls	r4, r4, #12
 8001b54:	4314      	orrs	r4, r2
 8001b56:	0324      	lsls	r4, r4, #12
 8001b58:	4ad5      	ldr	r2, [pc, #852]	; (8001eb0 <__aeabi_dsub+0x6ec>)
 8001b5a:	0b24      	lsrs	r4, r4, #12
 8001b5c:	e6dc      	b.n	8001918 <__aeabi_dsub+0x154>
 8001b5e:	0020      	movs	r0, r4
 8001b60:	f000 fa80 	bl	8002064 <__clzsi2>
 8001b64:	0003      	movs	r3, r0
 8001b66:	3318      	adds	r3, #24
 8001b68:	2b1f      	cmp	r3, #31
 8001b6a:	dc00      	bgt.n	8001b6e <__aeabi_dsub+0x3aa>
 8001b6c:	e695      	b.n	800189a <__aeabi_dsub+0xd6>
 8001b6e:	0022      	movs	r2, r4
 8001b70:	3808      	subs	r0, #8
 8001b72:	4082      	lsls	r2, r0
 8001b74:	2400      	movs	r4, #0
 8001b76:	429e      	cmp	r6, r3
 8001b78:	dc00      	bgt.n	8001b7c <__aeabi_dsub+0x3b8>
 8001b7a:	e69a      	b.n	80018b2 <__aeabi_dsub+0xee>
 8001b7c:	1af6      	subs	r6, r6, r3
 8001b7e:	4bcd      	ldr	r3, [pc, #820]	; (8001eb4 <__aeabi_dsub+0x6f0>)
 8001b80:	401a      	ands	r2, r3
 8001b82:	4692      	mov	sl, r2
 8001b84:	e6a8      	b.n	80018d8 <__aeabi_dsub+0x114>
 8001b86:	003c      	movs	r4, r7
 8001b88:	4304      	orrs	r4, r0
 8001b8a:	1e62      	subs	r2, r4, #1
 8001b8c:	4194      	sbcs	r4, r2
 8001b8e:	e66c      	b.n	800186a <__aeabi_dsub+0xa6>
 8001b90:	464a      	mov	r2, r9
 8001b92:	08db      	lsrs	r3, r3, #3
 8001b94:	0752      	lsls	r2, r2, #29
 8001b96:	4313      	orrs	r3, r2
 8001b98:	464a      	mov	r2, r9
 8001b9a:	08d2      	lsrs	r2, r2, #3
 8001b9c:	e7a6      	b.n	8001aec <__aeabi_dsub+0x328>
 8001b9e:	4cc6      	ldr	r4, [pc, #792]	; (8001eb8 <__aeabi_dsub+0x6f4>)
 8001ba0:	1c72      	adds	r2, r6, #1
 8001ba2:	4222      	tst	r2, r4
 8001ba4:	d000      	beq.n	8001ba8 <__aeabi_dsub+0x3e4>
 8001ba6:	e0ac      	b.n	8001d02 <__aeabi_dsub+0x53e>
 8001ba8:	464a      	mov	r2, r9
 8001baa:	431a      	orrs	r2, r3
 8001bac:	2e00      	cmp	r6, #0
 8001bae:	d000      	beq.n	8001bb2 <__aeabi_dsub+0x3ee>
 8001bb0:	e105      	b.n	8001dbe <__aeabi_dsub+0x5fa>
 8001bb2:	2a00      	cmp	r2, #0
 8001bb4:	d100      	bne.n	8001bb8 <__aeabi_dsub+0x3f4>
 8001bb6:	e156      	b.n	8001e66 <__aeabi_dsub+0x6a2>
 8001bb8:	003a      	movs	r2, r7
 8001bba:	4302      	orrs	r2, r0
 8001bbc:	d100      	bne.n	8001bc0 <__aeabi_dsub+0x3fc>
 8001bbe:	e0db      	b.n	8001d78 <__aeabi_dsub+0x5b4>
 8001bc0:	181c      	adds	r4, r3, r0
 8001bc2:	429c      	cmp	r4, r3
 8001bc4:	419b      	sbcs	r3, r3
 8001bc6:	444f      	add	r7, r9
 8001bc8:	46ba      	mov	sl, r7
 8001bca:	425b      	negs	r3, r3
 8001bcc:	449a      	add	sl, r3
 8001bce:	4653      	mov	r3, sl
 8001bd0:	021b      	lsls	r3, r3, #8
 8001bd2:	d400      	bmi.n	8001bd6 <__aeabi_dsub+0x412>
 8001bd4:	e780      	b.n	8001ad8 <__aeabi_dsub+0x314>
 8001bd6:	4652      	mov	r2, sl
 8001bd8:	4bb6      	ldr	r3, [pc, #728]	; (8001eb4 <__aeabi_dsub+0x6f0>)
 8001bda:	2601      	movs	r6, #1
 8001bdc:	401a      	ands	r2, r3
 8001bde:	4692      	mov	sl, r2
 8001be0:	e77a      	b.n	8001ad8 <__aeabi_dsub+0x314>
 8001be2:	4cb3      	ldr	r4, [pc, #716]	; (8001eb0 <__aeabi_dsub+0x6ec>)
 8001be4:	42a2      	cmp	r2, r4
 8001be6:	d100      	bne.n	8001bea <__aeabi_dsub+0x426>
 8001be8:	e0c0      	b.n	8001d6c <__aeabi_dsub+0x5a8>
 8001bea:	2480      	movs	r4, #128	; 0x80
 8001bec:	464d      	mov	r5, r9
 8001bee:	0424      	lsls	r4, r4, #16
 8001bf0:	4325      	orrs	r5, r4
 8001bf2:	46a9      	mov	r9, r5
 8001bf4:	4664      	mov	r4, ip
 8001bf6:	2c38      	cmp	r4, #56	; 0x38
 8001bf8:	dc53      	bgt.n	8001ca2 <__aeabi_dsub+0x4de>
 8001bfa:	4661      	mov	r1, ip
 8001bfc:	2c1f      	cmp	r4, #31
 8001bfe:	dd00      	ble.n	8001c02 <__aeabi_dsub+0x43e>
 8001c00:	e0cd      	b.n	8001d9e <__aeabi_dsub+0x5da>
 8001c02:	2520      	movs	r5, #32
 8001c04:	001e      	movs	r6, r3
 8001c06:	1b2d      	subs	r5, r5, r4
 8001c08:	464c      	mov	r4, r9
 8001c0a:	40ab      	lsls	r3, r5
 8001c0c:	40ac      	lsls	r4, r5
 8001c0e:	40ce      	lsrs	r6, r1
 8001c10:	1e5d      	subs	r5, r3, #1
 8001c12:	41ab      	sbcs	r3, r5
 8001c14:	4334      	orrs	r4, r6
 8001c16:	4323      	orrs	r3, r4
 8001c18:	464c      	mov	r4, r9
 8001c1a:	40cc      	lsrs	r4, r1
 8001c1c:	1b3f      	subs	r7, r7, r4
 8001c1e:	e045      	b.n	8001cac <__aeabi_dsub+0x4e8>
 8001c20:	464a      	mov	r2, r9
 8001c22:	1a1c      	subs	r4, r3, r0
 8001c24:	1bd1      	subs	r1, r2, r7
 8001c26:	42a3      	cmp	r3, r4
 8001c28:	4192      	sbcs	r2, r2
 8001c2a:	4252      	negs	r2, r2
 8001c2c:	4692      	mov	sl, r2
 8001c2e:	000a      	movs	r2, r1
 8001c30:	4651      	mov	r1, sl
 8001c32:	1a52      	subs	r2, r2, r1
 8001c34:	4692      	mov	sl, r2
 8001c36:	0212      	lsls	r2, r2, #8
 8001c38:	d500      	bpl.n	8001c3c <__aeabi_dsub+0x478>
 8001c3a:	e083      	b.n	8001d44 <__aeabi_dsub+0x580>
 8001c3c:	4653      	mov	r3, sl
 8001c3e:	4323      	orrs	r3, r4
 8001c40:	d000      	beq.n	8001c44 <__aeabi_dsub+0x480>
 8001c42:	e621      	b.n	8001888 <__aeabi_dsub+0xc4>
 8001c44:	2200      	movs	r2, #0
 8001c46:	2500      	movs	r5, #0
 8001c48:	e753      	b.n	8001af2 <__aeabi_dsub+0x32e>
 8001c4a:	181c      	adds	r4, r3, r0
 8001c4c:	429c      	cmp	r4, r3
 8001c4e:	419b      	sbcs	r3, r3
 8001c50:	444f      	add	r7, r9
 8001c52:	46ba      	mov	sl, r7
 8001c54:	425b      	negs	r3, r3
 8001c56:	449a      	add	sl, r3
 8001c58:	4653      	mov	r3, sl
 8001c5a:	2601      	movs	r6, #1
 8001c5c:	021b      	lsls	r3, r3, #8
 8001c5e:	d400      	bmi.n	8001c62 <__aeabi_dsub+0x49e>
 8001c60:	e73a      	b.n	8001ad8 <__aeabi_dsub+0x314>
 8001c62:	2602      	movs	r6, #2
 8001c64:	4652      	mov	r2, sl
 8001c66:	4b93      	ldr	r3, [pc, #588]	; (8001eb4 <__aeabi_dsub+0x6f0>)
 8001c68:	2101      	movs	r1, #1
 8001c6a:	401a      	ands	r2, r3
 8001c6c:	0013      	movs	r3, r2
 8001c6e:	4021      	ands	r1, r4
 8001c70:	0862      	lsrs	r2, r4, #1
 8001c72:	430a      	orrs	r2, r1
 8001c74:	07dc      	lsls	r4, r3, #31
 8001c76:	085b      	lsrs	r3, r3, #1
 8001c78:	469a      	mov	sl, r3
 8001c7a:	4314      	orrs	r4, r2
 8001c7c:	e62c      	b.n	80018d8 <__aeabi_dsub+0x114>
 8001c7e:	0039      	movs	r1, r7
 8001c80:	3a20      	subs	r2, #32
 8001c82:	40d1      	lsrs	r1, r2
 8001c84:	4662      	mov	r2, ip
 8001c86:	2a20      	cmp	r2, #32
 8001c88:	d006      	beq.n	8001c98 <__aeabi_dsub+0x4d4>
 8001c8a:	4664      	mov	r4, ip
 8001c8c:	2240      	movs	r2, #64	; 0x40
 8001c8e:	1b12      	subs	r2, r2, r4
 8001c90:	003c      	movs	r4, r7
 8001c92:	4094      	lsls	r4, r2
 8001c94:	4304      	orrs	r4, r0
 8001c96:	9401      	str	r4, [sp, #4]
 8001c98:	9c01      	ldr	r4, [sp, #4]
 8001c9a:	1e62      	subs	r2, r4, #1
 8001c9c:	4194      	sbcs	r4, r2
 8001c9e:	430c      	orrs	r4, r1
 8001ca0:	e5e3      	b.n	800186a <__aeabi_dsub+0xa6>
 8001ca2:	4649      	mov	r1, r9
 8001ca4:	4319      	orrs	r1, r3
 8001ca6:	000b      	movs	r3, r1
 8001ca8:	1e5c      	subs	r4, r3, #1
 8001caa:	41a3      	sbcs	r3, r4
 8001cac:	1ac4      	subs	r4, r0, r3
 8001cae:	42a0      	cmp	r0, r4
 8001cb0:	419b      	sbcs	r3, r3
 8001cb2:	425b      	negs	r3, r3
 8001cb4:	1afb      	subs	r3, r7, r3
 8001cb6:	469a      	mov	sl, r3
 8001cb8:	465d      	mov	r5, fp
 8001cba:	0016      	movs	r6, r2
 8001cbc:	e5dc      	b.n	8001878 <__aeabi_dsub+0xb4>
 8001cbe:	4649      	mov	r1, r9
 8001cc0:	4319      	orrs	r1, r3
 8001cc2:	d100      	bne.n	8001cc6 <__aeabi_dsub+0x502>
 8001cc4:	e0ae      	b.n	8001e24 <__aeabi_dsub+0x660>
 8001cc6:	4661      	mov	r1, ip
 8001cc8:	4664      	mov	r4, ip
 8001cca:	3901      	subs	r1, #1
 8001ccc:	2c01      	cmp	r4, #1
 8001cce:	d100      	bne.n	8001cd2 <__aeabi_dsub+0x50e>
 8001cd0:	e0e0      	b.n	8001e94 <__aeabi_dsub+0x6d0>
 8001cd2:	4c77      	ldr	r4, [pc, #476]	; (8001eb0 <__aeabi_dsub+0x6ec>)
 8001cd4:	45a4      	cmp	ip, r4
 8001cd6:	d056      	beq.n	8001d86 <__aeabi_dsub+0x5c2>
 8001cd8:	468c      	mov	ip, r1
 8001cda:	e69a      	b.n	8001a12 <__aeabi_dsub+0x24e>
 8001cdc:	4661      	mov	r1, ip
 8001cde:	2220      	movs	r2, #32
 8001ce0:	003c      	movs	r4, r7
 8001ce2:	1a52      	subs	r2, r2, r1
 8001ce4:	4094      	lsls	r4, r2
 8001ce6:	0001      	movs	r1, r0
 8001ce8:	4090      	lsls	r0, r2
 8001cea:	46a0      	mov	r8, r4
 8001cec:	4664      	mov	r4, ip
 8001cee:	1e42      	subs	r2, r0, #1
 8001cf0:	4190      	sbcs	r0, r2
 8001cf2:	4662      	mov	r2, ip
 8001cf4:	40e1      	lsrs	r1, r4
 8001cf6:	4644      	mov	r4, r8
 8001cf8:	40d7      	lsrs	r7, r2
 8001cfa:	430c      	orrs	r4, r1
 8001cfc:	4304      	orrs	r4, r0
 8001cfe:	44b9      	add	r9, r7
 8001d00:	e701      	b.n	8001b06 <__aeabi_dsub+0x342>
 8001d02:	496b      	ldr	r1, [pc, #428]	; (8001eb0 <__aeabi_dsub+0x6ec>)
 8001d04:	428a      	cmp	r2, r1
 8001d06:	d100      	bne.n	8001d0a <__aeabi_dsub+0x546>
 8001d08:	e70c      	b.n	8001b24 <__aeabi_dsub+0x360>
 8001d0a:	1818      	adds	r0, r3, r0
 8001d0c:	4298      	cmp	r0, r3
 8001d0e:	419b      	sbcs	r3, r3
 8001d10:	444f      	add	r7, r9
 8001d12:	425b      	negs	r3, r3
 8001d14:	18fb      	adds	r3, r7, r3
 8001d16:	07dc      	lsls	r4, r3, #31
 8001d18:	0840      	lsrs	r0, r0, #1
 8001d1a:	085b      	lsrs	r3, r3, #1
 8001d1c:	469a      	mov	sl, r3
 8001d1e:	0016      	movs	r6, r2
 8001d20:	4304      	orrs	r4, r0
 8001d22:	e6d9      	b.n	8001ad8 <__aeabi_dsub+0x314>
 8001d24:	2a00      	cmp	r2, #0
 8001d26:	d000      	beq.n	8001d2a <__aeabi_dsub+0x566>
 8001d28:	e081      	b.n	8001e2e <__aeabi_dsub+0x66a>
 8001d2a:	003b      	movs	r3, r7
 8001d2c:	4303      	orrs	r3, r0
 8001d2e:	d11d      	bne.n	8001d6c <__aeabi_dsub+0x5a8>
 8001d30:	2280      	movs	r2, #128	; 0x80
 8001d32:	2500      	movs	r5, #0
 8001d34:	0312      	lsls	r2, r2, #12
 8001d36:	e70b      	b.n	8001b50 <__aeabi_dsub+0x38c>
 8001d38:	08c0      	lsrs	r0, r0, #3
 8001d3a:	077b      	lsls	r3, r7, #29
 8001d3c:	465d      	mov	r5, fp
 8001d3e:	4303      	orrs	r3, r0
 8001d40:	08fa      	lsrs	r2, r7, #3
 8001d42:	e6d3      	b.n	8001aec <__aeabi_dsub+0x328>
 8001d44:	1ac4      	subs	r4, r0, r3
 8001d46:	42a0      	cmp	r0, r4
 8001d48:	4180      	sbcs	r0, r0
 8001d4a:	464b      	mov	r3, r9
 8001d4c:	4240      	negs	r0, r0
 8001d4e:	1aff      	subs	r7, r7, r3
 8001d50:	1a3b      	subs	r3, r7, r0
 8001d52:	469a      	mov	sl, r3
 8001d54:	465d      	mov	r5, fp
 8001d56:	e597      	b.n	8001888 <__aeabi_dsub+0xc4>
 8001d58:	1a1c      	subs	r4, r3, r0
 8001d5a:	464a      	mov	r2, r9
 8001d5c:	42a3      	cmp	r3, r4
 8001d5e:	419b      	sbcs	r3, r3
 8001d60:	1bd7      	subs	r7, r2, r7
 8001d62:	425b      	negs	r3, r3
 8001d64:	1afb      	subs	r3, r7, r3
 8001d66:	469a      	mov	sl, r3
 8001d68:	2601      	movs	r6, #1
 8001d6a:	e585      	b.n	8001878 <__aeabi_dsub+0xb4>
 8001d6c:	08c0      	lsrs	r0, r0, #3
 8001d6e:	077b      	lsls	r3, r7, #29
 8001d70:	465d      	mov	r5, fp
 8001d72:	4303      	orrs	r3, r0
 8001d74:	08fa      	lsrs	r2, r7, #3
 8001d76:	e6e7      	b.n	8001b48 <__aeabi_dsub+0x384>
 8001d78:	464a      	mov	r2, r9
 8001d7a:	08db      	lsrs	r3, r3, #3
 8001d7c:	0752      	lsls	r2, r2, #29
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	464a      	mov	r2, r9
 8001d82:	08d2      	lsrs	r2, r2, #3
 8001d84:	e6b5      	b.n	8001af2 <__aeabi_dsub+0x32e>
 8001d86:	08c0      	lsrs	r0, r0, #3
 8001d88:	077b      	lsls	r3, r7, #29
 8001d8a:	4303      	orrs	r3, r0
 8001d8c:	08fa      	lsrs	r2, r7, #3
 8001d8e:	e6db      	b.n	8001b48 <__aeabi_dsub+0x384>
 8001d90:	4649      	mov	r1, r9
 8001d92:	4319      	orrs	r1, r3
 8001d94:	000b      	movs	r3, r1
 8001d96:	1e59      	subs	r1, r3, #1
 8001d98:	418b      	sbcs	r3, r1
 8001d9a:	001c      	movs	r4, r3
 8001d9c:	e653      	b.n	8001a46 <__aeabi_dsub+0x282>
 8001d9e:	464d      	mov	r5, r9
 8001da0:	3c20      	subs	r4, #32
 8001da2:	40e5      	lsrs	r5, r4
 8001da4:	2920      	cmp	r1, #32
 8001da6:	d005      	beq.n	8001db4 <__aeabi_dsub+0x5f0>
 8001da8:	2440      	movs	r4, #64	; 0x40
 8001daa:	1a64      	subs	r4, r4, r1
 8001dac:	4649      	mov	r1, r9
 8001dae:	40a1      	lsls	r1, r4
 8001db0:	430b      	orrs	r3, r1
 8001db2:	4698      	mov	r8, r3
 8001db4:	4643      	mov	r3, r8
 8001db6:	1e5c      	subs	r4, r3, #1
 8001db8:	41a3      	sbcs	r3, r4
 8001dba:	432b      	orrs	r3, r5
 8001dbc:	e776      	b.n	8001cac <__aeabi_dsub+0x4e8>
 8001dbe:	2a00      	cmp	r2, #0
 8001dc0:	d0e1      	beq.n	8001d86 <__aeabi_dsub+0x5c2>
 8001dc2:	003a      	movs	r2, r7
 8001dc4:	08db      	lsrs	r3, r3, #3
 8001dc6:	4302      	orrs	r2, r0
 8001dc8:	d100      	bne.n	8001dcc <__aeabi_dsub+0x608>
 8001dca:	e6b8      	b.n	8001b3e <__aeabi_dsub+0x37a>
 8001dcc:	464a      	mov	r2, r9
 8001dce:	0752      	lsls	r2, r2, #29
 8001dd0:	2480      	movs	r4, #128	; 0x80
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	464a      	mov	r2, r9
 8001dd6:	0324      	lsls	r4, r4, #12
 8001dd8:	08d2      	lsrs	r2, r2, #3
 8001dda:	4222      	tst	r2, r4
 8001ddc:	d007      	beq.n	8001dee <__aeabi_dsub+0x62a>
 8001dde:	08fe      	lsrs	r6, r7, #3
 8001de0:	4226      	tst	r6, r4
 8001de2:	d104      	bne.n	8001dee <__aeabi_dsub+0x62a>
 8001de4:	465d      	mov	r5, fp
 8001de6:	0032      	movs	r2, r6
 8001de8:	08c3      	lsrs	r3, r0, #3
 8001dea:	077f      	lsls	r7, r7, #29
 8001dec:	433b      	orrs	r3, r7
 8001dee:	0f59      	lsrs	r1, r3, #29
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	0749      	lsls	r1, r1, #29
 8001df4:	08db      	lsrs	r3, r3, #3
 8001df6:	430b      	orrs	r3, r1
 8001df8:	e6a6      	b.n	8001b48 <__aeabi_dsub+0x384>
 8001dfa:	1ac4      	subs	r4, r0, r3
 8001dfc:	42a0      	cmp	r0, r4
 8001dfe:	4180      	sbcs	r0, r0
 8001e00:	464b      	mov	r3, r9
 8001e02:	4240      	negs	r0, r0
 8001e04:	1aff      	subs	r7, r7, r3
 8001e06:	1a3b      	subs	r3, r7, r0
 8001e08:	469a      	mov	sl, r3
 8001e0a:	465d      	mov	r5, fp
 8001e0c:	2601      	movs	r6, #1
 8001e0e:	e533      	b.n	8001878 <__aeabi_dsub+0xb4>
 8001e10:	003b      	movs	r3, r7
 8001e12:	4303      	orrs	r3, r0
 8001e14:	d100      	bne.n	8001e18 <__aeabi_dsub+0x654>
 8001e16:	e715      	b.n	8001c44 <__aeabi_dsub+0x480>
 8001e18:	08c0      	lsrs	r0, r0, #3
 8001e1a:	077b      	lsls	r3, r7, #29
 8001e1c:	465d      	mov	r5, fp
 8001e1e:	4303      	orrs	r3, r0
 8001e20:	08fa      	lsrs	r2, r7, #3
 8001e22:	e666      	b.n	8001af2 <__aeabi_dsub+0x32e>
 8001e24:	08c0      	lsrs	r0, r0, #3
 8001e26:	077b      	lsls	r3, r7, #29
 8001e28:	4303      	orrs	r3, r0
 8001e2a:	08fa      	lsrs	r2, r7, #3
 8001e2c:	e65e      	b.n	8001aec <__aeabi_dsub+0x328>
 8001e2e:	003a      	movs	r2, r7
 8001e30:	08db      	lsrs	r3, r3, #3
 8001e32:	4302      	orrs	r2, r0
 8001e34:	d100      	bne.n	8001e38 <__aeabi_dsub+0x674>
 8001e36:	e682      	b.n	8001b3e <__aeabi_dsub+0x37a>
 8001e38:	464a      	mov	r2, r9
 8001e3a:	0752      	lsls	r2, r2, #29
 8001e3c:	2480      	movs	r4, #128	; 0x80
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	464a      	mov	r2, r9
 8001e42:	0324      	lsls	r4, r4, #12
 8001e44:	08d2      	lsrs	r2, r2, #3
 8001e46:	4222      	tst	r2, r4
 8001e48:	d007      	beq.n	8001e5a <__aeabi_dsub+0x696>
 8001e4a:	08fe      	lsrs	r6, r7, #3
 8001e4c:	4226      	tst	r6, r4
 8001e4e:	d104      	bne.n	8001e5a <__aeabi_dsub+0x696>
 8001e50:	465d      	mov	r5, fp
 8001e52:	0032      	movs	r2, r6
 8001e54:	08c3      	lsrs	r3, r0, #3
 8001e56:	077f      	lsls	r7, r7, #29
 8001e58:	433b      	orrs	r3, r7
 8001e5a:	0f59      	lsrs	r1, r3, #29
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	08db      	lsrs	r3, r3, #3
 8001e60:	0749      	lsls	r1, r1, #29
 8001e62:	430b      	orrs	r3, r1
 8001e64:	e670      	b.n	8001b48 <__aeabi_dsub+0x384>
 8001e66:	08c0      	lsrs	r0, r0, #3
 8001e68:	077b      	lsls	r3, r7, #29
 8001e6a:	4303      	orrs	r3, r0
 8001e6c:	08fa      	lsrs	r2, r7, #3
 8001e6e:	e640      	b.n	8001af2 <__aeabi_dsub+0x32e>
 8001e70:	464c      	mov	r4, r9
 8001e72:	3920      	subs	r1, #32
 8001e74:	40cc      	lsrs	r4, r1
 8001e76:	4661      	mov	r1, ip
 8001e78:	2920      	cmp	r1, #32
 8001e7a:	d006      	beq.n	8001e8a <__aeabi_dsub+0x6c6>
 8001e7c:	4666      	mov	r6, ip
 8001e7e:	2140      	movs	r1, #64	; 0x40
 8001e80:	1b89      	subs	r1, r1, r6
 8001e82:	464e      	mov	r6, r9
 8001e84:	408e      	lsls	r6, r1
 8001e86:	4333      	orrs	r3, r6
 8001e88:	4698      	mov	r8, r3
 8001e8a:	4643      	mov	r3, r8
 8001e8c:	1e59      	subs	r1, r3, #1
 8001e8e:	418b      	sbcs	r3, r1
 8001e90:	431c      	orrs	r4, r3
 8001e92:	e5d8      	b.n	8001a46 <__aeabi_dsub+0x282>
 8001e94:	181c      	adds	r4, r3, r0
 8001e96:	4284      	cmp	r4, r0
 8001e98:	4180      	sbcs	r0, r0
 8001e9a:	444f      	add	r7, r9
 8001e9c:	46ba      	mov	sl, r7
 8001e9e:	4240      	negs	r0, r0
 8001ea0:	4482      	add	sl, r0
 8001ea2:	e6d9      	b.n	8001c58 <__aeabi_dsub+0x494>
 8001ea4:	4653      	mov	r3, sl
 8001ea6:	4323      	orrs	r3, r4
 8001ea8:	d100      	bne.n	8001eac <__aeabi_dsub+0x6e8>
 8001eaa:	e6cb      	b.n	8001c44 <__aeabi_dsub+0x480>
 8001eac:	e614      	b.n	8001ad8 <__aeabi_dsub+0x314>
 8001eae:	46c0      	nop			; (mov r8, r8)
 8001eb0:	000007ff 	.word	0x000007ff
 8001eb4:	ff7fffff 	.word	0xff7fffff
 8001eb8:	000007fe 	.word	0x000007fe
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	4a01      	ldr	r2, [pc, #4]	; (8001ec4 <__aeabi_dsub+0x700>)
 8001ec0:	001c      	movs	r4, r3
 8001ec2:	e529      	b.n	8001918 <__aeabi_dsub+0x154>
 8001ec4:	000007ff 	.word	0x000007ff

08001ec8 <__aeabi_f2d>:
 8001ec8:	b570      	push	{r4, r5, r6, lr}
 8001eca:	0242      	lsls	r2, r0, #9
 8001ecc:	0043      	lsls	r3, r0, #1
 8001ece:	0fc4      	lsrs	r4, r0, #31
 8001ed0:	20fe      	movs	r0, #254	; 0xfe
 8001ed2:	0e1b      	lsrs	r3, r3, #24
 8001ed4:	1c59      	adds	r1, r3, #1
 8001ed6:	0a55      	lsrs	r5, r2, #9
 8001ed8:	4208      	tst	r0, r1
 8001eda:	d00c      	beq.n	8001ef6 <__aeabi_f2d+0x2e>
 8001edc:	21e0      	movs	r1, #224	; 0xe0
 8001ede:	0089      	lsls	r1, r1, #2
 8001ee0:	468c      	mov	ip, r1
 8001ee2:	076d      	lsls	r5, r5, #29
 8001ee4:	0b12      	lsrs	r2, r2, #12
 8001ee6:	4463      	add	r3, ip
 8001ee8:	051b      	lsls	r3, r3, #20
 8001eea:	4313      	orrs	r3, r2
 8001eec:	07e4      	lsls	r4, r4, #31
 8001eee:	4323      	orrs	r3, r4
 8001ef0:	0028      	movs	r0, r5
 8001ef2:	0019      	movs	r1, r3
 8001ef4:	bd70      	pop	{r4, r5, r6, pc}
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d114      	bne.n	8001f24 <__aeabi_f2d+0x5c>
 8001efa:	2d00      	cmp	r5, #0
 8001efc:	d01b      	beq.n	8001f36 <__aeabi_f2d+0x6e>
 8001efe:	0028      	movs	r0, r5
 8001f00:	f000 f8b0 	bl	8002064 <__clzsi2>
 8001f04:	280a      	cmp	r0, #10
 8001f06:	dc1c      	bgt.n	8001f42 <__aeabi_f2d+0x7a>
 8001f08:	230b      	movs	r3, #11
 8001f0a:	002a      	movs	r2, r5
 8001f0c:	1a1b      	subs	r3, r3, r0
 8001f0e:	40da      	lsrs	r2, r3
 8001f10:	0003      	movs	r3, r0
 8001f12:	3315      	adds	r3, #21
 8001f14:	409d      	lsls	r5, r3
 8001f16:	4b0e      	ldr	r3, [pc, #56]	; (8001f50 <__aeabi_f2d+0x88>)
 8001f18:	0312      	lsls	r2, r2, #12
 8001f1a:	1a1b      	subs	r3, r3, r0
 8001f1c:	055b      	lsls	r3, r3, #21
 8001f1e:	0b12      	lsrs	r2, r2, #12
 8001f20:	0d5b      	lsrs	r3, r3, #21
 8001f22:	e7e1      	b.n	8001ee8 <__aeabi_f2d+0x20>
 8001f24:	2d00      	cmp	r5, #0
 8001f26:	d009      	beq.n	8001f3c <__aeabi_f2d+0x74>
 8001f28:	0b13      	lsrs	r3, r2, #12
 8001f2a:	2280      	movs	r2, #128	; 0x80
 8001f2c:	0312      	lsls	r2, r2, #12
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	076d      	lsls	r5, r5, #29
 8001f32:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <__aeabi_f2d+0x8c>)
 8001f34:	e7d8      	b.n	8001ee8 <__aeabi_f2d+0x20>
 8001f36:	2300      	movs	r3, #0
 8001f38:	2200      	movs	r2, #0
 8001f3a:	e7d5      	b.n	8001ee8 <__aeabi_f2d+0x20>
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <__aeabi_f2d+0x8c>)
 8001f40:	e7d2      	b.n	8001ee8 <__aeabi_f2d+0x20>
 8001f42:	0003      	movs	r3, r0
 8001f44:	002a      	movs	r2, r5
 8001f46:	3b0b      	subs	r3, #11
 8001f48:	409a      	lsls	r2, r3
 8001f4a:	2500      	movs	r5, #0
 8001f4c:	e7e3      	b.n	8001f16 <__aeabi_f2d+0x4e>
 8001f4e:	46c0      	nop			; (mov r8, r8)
 8001f50:	00000389 	.word	0x00000389
 8001f54:	000007ff 	.word	0x000007ff

08001f58 <__aeabi_d2f>:
 8001f58:	0002      	movs	r2, r0
 8001f5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f5c:	004b      	lsls	r3, r1, #1
 8001f5e:	030d      	lsls	r5, r1, #12
 8001f60:	0f40      	lsrs	r0, r0, #29
 8001f62:	0d5b      	lsrs	r3, r3, #21
 8001f64:	0fcc      	lsrs	r4, r1, #31
 8001f66:	0a6d      	lsrs	r5, r5, #9
 8001f68:	493a      	ldr	r1, [pc, #232]	; (8002054 <__aeabi_d2f+0xfc>)
 8001f6a:	4305      	orrs	r5, r0
 8001f6c:	1c58      	adds	r0, r3, #1
 8001f6e:	00d7      	lsls	r7, r2, #3
 8001f70:	4208      	tst	r0, r1
 8001f72:	d00a      	beq.n	8001f8a <__aeabi_d2f+0x32>
 8001f74:	4938      	ldr	r1, [pc, #224]	; (8002058 <__aeabi_d2f+0x100>)
 8001f76:	1859      	adds	r1, r3, r1
 8001f78:	29fe      	cmp	r1, #254	; 0xfe
 8001f7a:	dd16      	ble.n	8001faa <__aeabi_d2f+0x52>
 8001f7c:	20ff      	movs	r0, #255	; 0xff
 8001f7e:	2200      	movs	r2, #0
 8001f80:	05c0      	lsls	r0, r0, #23
 8001f82:	4310      	orrs	r0, r2
 8001f84:	07e4      	lsls	r4, r4, #31
 8001f86:	4320      	orrs	r0, r4
 8001f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d106      	bne.n	8001f9c <__aeabi_d2f+0x44>
 8001f8e:	433d      	orrs	r5, r7
 8001f90:	d026      	beq.n	8001fe0 <__aeabi_d2f+0x88>
 8001f92:	2205      	movs	r2, #5
 8001f94:	0192      	lsls	r2, r2, #6
 8001f96:	0a52      	lsrs	r2, r2, #9
 8001f98:	b2d8      	uxtb	r0, r3
 8001f9a:	e7f1      	b.n	8001f80 <__aeabi_d2f+0x28>
 8001f9c:	432f      	orrs	r7, r5
 8001f9e:	d0ed      	beq.n	8001f7c <__aeabi_d2f+0x24>
 8001fa0:	2280      	movs	r2, #128	; 0x80
 8001fa2:	03d2      	lsls	r2, r2, #15
 8001fa4:	20ff      	movs	r0, #255	; 0xff
 8001fa6:	432a      	orrs	r2, r5
 8001fa8:	e7ea      	b.n	8001f80 <__aeabi_d2f+0x28>
 8001faa:	2900      	cmp	r1, #0
 8001fac:	dd1b      	ble.n	8001fe6 <__aeabi_d2f+0x8e>
 8001fae:	0192      	lsls	r2, r2, #6
 8001fb0:	1e50      	subs	r0, r2, #1
 8001fb2:	4182      	sbcs	r2, r0
 8001fb4:	00ed      	lsls	r5, r5, #3
 8001fb6:	0f7f      	lsrs	r7, r7, #29
 8001fb8:	432a      	orrs	r2, r5
 8001fba:	433a      	orrs	r2, r7
 8001fbc:	0753      	lsls	r3, r2, #29
 8001fbe:	d047      	beq.n	8002050 <__aeabi_d2f+0xf8>
 8001fc0:	230f      	movs	r3, #15
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	d000      	beq.n	8001fca <__aeabi_d2f+0x72>
 8001fc8:	3204      	adds	r2, #4
 8001fca:	2380      	movs	r3, #128	; 0x80
 8001fcc:	04db      	lsls	r3, r3, #19
 8001fce:	4013      	ands	r3, r2
 8001fd0:	d03e      	beq.n	8002050 <__aeabi_d2f+0xf8>
 8001fd2:	1c48      	adds	r0, r1, #1
 8001fd4:	29fe      	cmp	r1, #254	; 0xfe
 8001fd6:	d0d1      	beq.n	8001f7c <__aeabi_d2f+0x24>
 8001fd8:	0192      	lsls	r2, r2, #6
 8001fda:	0a52      	lsrs	r2, r2, #9
 8001fdc:	b2c0      	uxtb	r0, r0
 8001fde:	e7cf      	b.n	8001f80 <__aeabi_d2f+0x28>
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	e7cc      	b.n	8001f80 <__aeabi_d2f+0x28>
 8001fe6:	000a      	movs	r2, r1
 8001fe8:	3217      	adds	r2, #23
 8001fea:	db2f      	blt.n	800204c <__aeabi_d2f+0xf4>
 8001fec:	2680      	movs	r6, #128	; 0x80
 8001fee:	0436      	lsls	r6, r6, #16
 8001ff0:	432e      	orrs	r6, r5
 8001ff2:	251e      	movs	r5, #30
 8001ff4:	1a6d      	subs	r5, r5, r1
 8001ff6:	2d1f      	cmp	r5, #31
 8001ff8:	dd11      	ble.n	800201e <__aeabi_d2f+0xc6>
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	4252      	negs	r2, r2
 8001ffe:	1a52      	subs	r2, r2, r1
 8002000:	0031      	movs	r1, r6
 8002002:	40d1      	lsrs	r1, r2
 8002004:	2d20      	cmp	r5, #32
 8002006:	d004      	beq.n	8002012 <__aeabi_d2f+0xba>
 8002008:	4a14      	ldr	r2, [pc, #80]	; (800205c <__aeabi_d2f+0x104>)
 800200a:	4694      	mov	ip, r2
 800200c:	4463      	add	r3, ip
 800200e:	409e      	lsls	r6, r3
 8002010:	4337      	orrs	r7, r6
 8002012:	003a      	movs	r2, r7
 8002014:	1e53      	subs	r3, r2, #1
 8002016:	419a      	sbcs	r2, r3
 8002018:	430a      	orrs	r2, r1
 800201a:	2100      	movs	r1, #0
 800201c:	e7ce      	b.n	8001fbc <__aeabi_d2f+0x64>
 800201e:	4a10      	ldr	r2, [pc, #64]	; (8002060 <__aeabi_d2f+0x108>)
 8002020:	0038      	movs	r0, r7
 8002022:	4694      	mov	ip, r2
 8002024:	4463      	add	r3, ip
 8002026:	4098      	lsls	r0, r3
 8002028:	003a      	movs	r2, r7
 800202a:	1e41      	subs	r1, r0, #1
 800202c:	4188      	sbcs	r0, r1
 800202e:	409e      	lsls	r6, r3
 8002030:	40ea      	lsrs	r2, r5
 8002032:	4330      	orrs	r0, r6
 8002034:	4302      	orrs	r2, r0
 8002036:	2100      	movs	r1, #0
 8002038:	0753      	lsls	r3, r2, #29
 800203a:	d1c1      	bne.n	8001fc0 <__aeabi_d2f+0x68>
 800203c:	2180      	movs	r1, #128	; 0x80
 800203e:	0013      	movs	r3, r2
 8002040:	04c9      	lsls	r1, r1, #19
 8002042:	2001      	movs	r0, #1
 8002044:	400b      	ands	r3, r1
 8002046:	420a      	tst	r2, r1
 8002048:	d1c6      	bne.n	8001fd8 <__aeabi_d2f+0x80>
 800204a:	e7a3      	b.n	8001f94 <__aeabi_d2f+0x3c>
 800204c:	2300      	movs	r3, #0
 800204e:	e7a0      	b.n	8001f92 <__aeabi_d2f+0x3a>
 8002050:	000b      	movs	r3, r1
 8002052:	e79f      	b.n	8001f94 <__aeabi_d2f+0x3c>
 8002054:	000007fe 	.word	0x000007fe
 8002058:	fffffc80 	.word	0xfffffc80
 800205c:	fffffca2 	.word	0xfffffca2
 8002060:	fffffc82 	.word	0xfffffc82

08002064 <__clzsi2>:
 8002064:	211c      	movs	r1, #28
 8002066:	2301      	movs	r3, #1
 8002068:	041b      	lsls	r3, r3, #16
 800206a:	4298      	cmp	r0, r3
 800206c:	d301      	bcc.n	8002072 <__clzsi2+0xe>
 800206e:	0c00      	lsrs	r0, r0, #16
 8002070:	3910      	subs	r1, #16
 8002072:	0a1b      	lsrs	r3, r3, #8
 8002074:	4298      	cmp	r0, r3
 8002076:	d301      	bcc.n	800207c <__clzsi2+0x18>
 8002078:	0a00      	lsrs	r0, r0, #8
 800207a:	3908      	subs	r1, #8
 800207c:	091b      	lsrs	r3, r3, #4
 800207e:	4298      	cmp	r0, r3
 8002080:	d301      	bcc.n	8002086 <__clzsi2+0x22>
 8002082:	0900      	lsrs	r0, r0, #4
 8002084:	3904      	subs	r1, #4
 8002086:	a202      	add	r2, pc, #8	; (adr r2, 8002090 <__clzsi2+0x2c>)
 8002088:	5c10      	ldrb	r0, [r2, r0]
 800208a:	1840      	adds	r0, r0, r1
 800208c:	4770      	bx	lr
 800208e:	46c0      	nop			; (mov r8, r8)
 8002090:	02020304 	.word	0x02020304
 8002094:	01010101 	.word	0x01010101
	...

080020a0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020a6:	1dfb      	adds	r3, r7, #7
 80020a8:	2200      	movs	r2, #0
 80020aa:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020ac:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <HAL_Init+0x3c>)
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	4b0a      	ldr	r3, [pc, #40]	; (80020dc <HAL_Init+0x3c>)
 80020b2:	2180      	movs	r1, #128	; 0x80
 80020b4:	0049      	lsls	r1, r1, #1
 80020b6:	430a      	orrs	r2, r1
 80020b8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020ba:	2003      	movs	r0, #3
 80020bc:	f000 f810 	bl	80020e0 <HAL_InitTick>
 80020c0:	1e03      	subs	r3, r0, #0
 80020c2:	d003      	beq.n	80020cc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80020c4:	1dfb      	adds	r3, r7, #7
 80020c6:	2201      	movs	r2, #1
 80020c8:	701a      	strb	r2, [r3, #0]
 80020ca:	e001      	b.n	80020d0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80020cc:	f002 fd04 	bl	8004ad8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020d0:	1dfb      	adds	r3, r7, #7
 80020d2:	781b      	ldrb	r3, [r3, #0]
}
 80020d4:	0018      	movs	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	b002      	add	sp, #8
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40022000 	.word	0x40022000

080020e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020e0:	b590      	push	{r4, r7, lr}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80020e8:	230f      	movs	r3, #15
 80020ea:	18fb      	adds	r3, r7, r3
 80020ec:	2200      	movs	r2, #0
 80020ee:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80020f0:	4b1d      	ldr	r3, [pc, #116]	; (8002168 <HAL_InitTick+0x88>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d02b      	beq.n	8002150 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80020f8:	4b1c      	ldr	r3, [pc, #112]	; (800216c <HAL_InitTick+0x8c>)
 80020fa:	681c      	ldr	r4, [r3, #0]
 80020fc:	4b1a      	ldr	r3, [pc, #104]	; (8002168 <HAL_InitTick+0x88>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	0019      	movs	r1, r3
 8002102:	23fa      	movs	r3, #250	; 0xfa
 8002104:	0098      	lsls	r0, r3, #2
 8002106:	f7fd fffd 	bl	8000104 <__udivsi3>
 800210a:	0003      	movs	r3, r0
 800210c:	0019      	movs	r1, r3
 800210e:	0020      	movs	r0, r4
 8002110:	f7fd fff8 	bl	8000104 <__udivsi3>
 8002114:	0003      	movs	r3, r0
 8002116:	0018      	movs	r0, r3
 8002118:	f000 f92f 	bl	800237a <HAL_SYSTICK_Config>
 800211c:	1e03      	subs	r3, r0, #0
 800211e:	d112      	bne.n	8002146 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b03      	cmp	r3, #3
 8002124:	d80a      	bhi.n	800213c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002126:	6879      	ldr	r1, [r7, #4]
 8002128:	2301      	movs	r3, #1
 800212a:	425b      	negs	r3, r3
 800212c:	2200      	movs	r2, #0
 800212e:	0018      	movs	r0, r3
 8002130:	f000 f8fe 	bl	8002330 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002134:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <HAL_InitTick+0x90>)
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	e00d      	b.n	8002158 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800213c:	230f      	movs	r3, #15
 800213e:	18fb      	adds	r3, r7, r3
 8002140:	2201      	movs	r2, #1
 8002142:	701a      	strb	r2, [r3, #0]
 8002144:	e008      	b.n	8002158 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002146:	230f      	movs	r3, #15
 8002148:	18fb      	adds	r3, r7, r3
 800214a:	2201      	movs	r2, #1
 800214c:	701a      	strb	r2, [r3, #0]
 800214e:	e003      	b.n	8002158 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002150:	230f      	movs	r3, #15
 8002152:	18fb      	adds	r3, r7, r3
 8002154:	2201      	movs	r2, #1
 8002156:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002158:	230f      	movs	r3, #15
 800215a:	18fb      	adds	r3, r7, r3
 800215c:	781b      	ldrb	r3, [r3, #0]
}
 800215e:	0018      	movs	r0, r3
 8002160:	46bd      	mov	sp, r7
 8002162:	b005      	add	sp, #20
 8002164:	bd90      	pop	{r4, r7, pc}
 8002166:	46c0      	nop			; (mov r8, r8)
 8002168:	20000004 	.word	0x20000004
 800216c:	20000008 	.word	0x20000008
 8002170:	20000000 	.word	0x20000000

08002174 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002178:	4b05      	ldr	r3, [pc, #20]	; (8002190 <HAL_IncTick+0x1c>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	001a      	movs	r2, r3
 800217e:	4b05      	ldr	r3, [pc, #20]	; (8002194 <HAL_IncTick+0x20>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	18d2      	adds	r2, r2, r3
 8002184:	4b03      	ldr	r3, [pc, #12]	; (8002194 <HAL_IncTick+0x20>)
 8002186:	601a      	str	r2, [r3, #0]
}
 8002188:	46c0      	nop			; (mov r8, r8)
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	20000004 	.word	0x20000004
 8002194:	20000078 	.word	0x20000078

08002198 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  return uwTick;
 800219c:	4b02      	ldr	r3, [pc, #8]	; (80021a8 <HAL_GetTick+0x10>)
 800219e:	681b      	ldr	r3, [r3, #0]
}
 80021a0:	0018      	movs	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	46c0      	nop			; (mov r8, r8)
 80021a8:	20000078 	.word	0x20000078

080021ac <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80021b4:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a06      	ldr	r2, [pc, #24]	; (80021d4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80021ba:	4013      	ands	r3, r2
 80021bc:	0019      	movs	r1, r3
 80021be:	4b04      	ldr	r3, [pc, #16]	; (80021d0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	601a      	str	r2, [r3, #0]
}
 80021c6:	46c0      	nop			; (mov r8, r8)
 80021c8:	46bd      	mov	sp, r7
 80021ca:	b002      	add	sp, #8
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	40010000 	.word	0x40010000
 80021d4:	fffff9ff 	.word	0xfffff9ff

080021d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	0002      	movs	r2, r0
 80021e0:	1dfb      	adds	r3, r7, #7
 80021e2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80021e4:	1dfb      	adds	r3, r7, #7
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b7f      	cmp	r3, #127	; 0x7f
 80021ea:	d809      	bhi.n	8002200 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ec:	1dfb      	adds	r3, r7, #7
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	001a      	movs	r2, r3
 80021f2:	231f      	movs	r3, #31
 80021f4:	401a      	ands	r2, r3
 80021f6:	4b04      	ldr	r3, [pc, #16]	; (8002208 <__NVIC_EnableIRQ+0x30>)
 80021f8:	2101      	movs	r1, #1
 80021fa:	4091      	lsls	r1, r2
 80021fc:	000a      	movs	r2, r1
 80021fe:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002200:	46c0      	nop			; (mov r8, r8)
 8002202:	46bd      	mov	sp, r7
 8002204:	b002      	add	sp, #8
 8002206:	bd80      	pop	{r7, pc}
 8002208:	e000e100 	.word	0xe000e100

0800220c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800220c:	b590      	push	{r4, r7, lr}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	0002      	movs	r2, r0
 8002214:	6039      	str	r1, [r7, #0]
 8002216:	1dfb      	adds	r3, r7, #7
 8002218:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800221a:	1dfb      	adds	r3, r7, #7
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	2b7f      	cmp	r3, #127	; 0x7f
 8002220:	d828      	bhi.n	8002274 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002222:	4a2f      	ldr	r2, [pc, #188]	; (80022e0 <__NVIC_SetPriority+0xd4>)
 8002224:	1dfb      	adds	r3, r7, #7
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	b25b      	sxtb	r3, r3
 800222a:	089b      	lsrs	r3, r3, #2
 800222c:	33c0      	adds	r3, #192	; 0xc0
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	589b      	ldr	r3, [r3, r2]
 8002232:	1dfa      	adds	r2, r7, #7
 8002234:	7812      	ldrb	r2, [r2, #0]
 8002236:	0011      	movs	r1, r2
 8002238:	2203      	movs	r2, #3
 800223a:	400a      	ands	r2, r1
 800223c:	00d2      	lsls	r2, r2, #3
 800223e:	21ff      	movs	r1, #255	; 0xff
 8002240:	4091      	lsls	r1, r2
 8002242:	000a      	movs	r2, r1
 8002244:	43d2      	mvns	r2, r2
 8002246:	401a      	ands	r2, r3
 8002248:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	019b      	lsls	r3, r3, #6
 800224e:	22ff      	movs	r2, #255	; 0xff
 8002250:	401a      	ands	r2, r3
 8002252:	1dfb      	adds	r3, r7, #7
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	0018      	movs	r0, r3
 8002258:	2303      	movs	r3, #3
 800225a:	4003      	ands	r3, r0
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002260:	481f      	ldr	r0, [pc, #124]	; (80022e0 <__NVIC_SetPriority+0xd4>)
 8002262:	1dfb      	adds	r3, r7, #7
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	b25b      	sxtb	r3, r3
 8002268:	089b      	lsrs	r3, r3, #2
 800226a:	430a      	orrs	r2, r1
 800226c:	33c0      	adds	r3, #192	; 0xc0
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002272:	e031      	b.n	80022d8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002274:	4a1b      	ldr	r2, [pc, #108]	; (80022e4 <__NVIC_SetPriority+0xd8>)
 8002276:	1dfb      	adds	r3, r7, #7
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	0019      	movs	r1, r3
 800227c:	230f      	movs	r3, #15
 800227e:	400b      	ands	r3, r1
 8002280:	3b08      	subs	r3, #8
 8002282:	089b      	lsrs	r3, r3, #2
 8002284:	3306      	adds	r3, #6
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	18d3      	adds	r3, r2, r3
 800228a:	3304      	adds	r3, #4
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	1dfa      	adds	r2, r7, #7
 8002290:	7812      	ldrb	r2, [r2, #0]
 8002292:	0011      	movs	r1, r2
 8002294:	2203      	movs	r2, #3
 8002296:	400a      	ands	r2, r1
 8002298:	00d2      	lsls	r2, r2, #3
 800229a:	21ff      	movs	r1, #255	; 0xff
 800229c:	4091      	lsls	r1, r2
 800229e:	000a      	movs	r2, r1
 80022a0:	43d2      	mvns	r2, r2
 80022a2:	401a      	ands	r2, r3
 80022a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	019b      	lsls	r3, r3, #6
 80022aa:	22ff      	movs	r2, #255	; 0xff
 80022ac:	401a      	ands	r2, r3
 80022ae:	1dfb      	adds	r3, r7, #7
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	0018      	movs	r0, r3
 80022b4:	2303      	movs	r3, #3
 80022b6:	4003      	ands	r3, r0
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022bc:	4809      	ldr	r0, [pc, #36]	; (80022e4 <__NVIC_SetPriority+0xd8>)
 80022be:	1dfb      	adds	r3, r7, #7
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	001c      	movs	r4, r3
 80022c4:	230f      	movs	r3, #15
 80022c6:	4023      	ands	r3, r4
 80022c8:	3b08      	subs	r3, #8
 80022ca:	089b      	lsrs	r3, r3, #2
 80022cc:	430a      	orrs	r2, r1
 80022ce:	3306      	adds	r3, #6
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	18c3      	adds	r3, r0, r3
 80022d4:	3304      	adds	r3, #4
 80022d6:	601a      	str	r2, [r3, #0]
}
 80022d8:	46c0      	nop			; (mov r8, r8)
 80022da:	46bd      	mov	sp, r7
 80022dc:	b003      	add	sp, #12
 80022de:	bd90      	pop	{r4, r7, pc}
 80022e0:	e000e100 	.word	0xe000e100
 80022e4:	e000ed00 	.word	0xe000ed00

080022e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	1e5a      	subs	r2, r3, #1
 80022f4:	2380      	movs	r3, #128	; 0x80
 80022f6:	045b      	lsls	r3, r3, #17
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d301      	bcc.n	8002300 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022fc:	2301      	movs	r3, #1
 80022fe:	e010      	b.n	8002322 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002300:	4b0a      	ldr	r3, [pc, #40]	; (800232c <SysTick_Config+0x44>)
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	3a01      	subs	r2, #1
 8002306:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002308:	2301      	movs	r3, #1
 800230a:	425b      	negs	r3, r3
 800230c:	2103      	movs	r1, #3
 800230e:	0018      	movs	r0, r3
 8002310:	f7ff ff7c 	bl	800220c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002314:	4b05      	ldr	r3, [pc, #20]	; (800232c <SysTick_Config+0x44>)
 8002316:	2200      	movs	r2, #0
 8002318:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800231a:	4b04      	ldr	r3, [pc, #16]	; (800232c <SysTick_Config+0x44>)
 800231c:	2207      	movs	r2, #7
 800231e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002320:	2300      	movs	r3, #0
}
 8002322:	0018      	movs	r0, r3
 8002324:	46bd      	mov	sp, r7
 8002326:	b002      	add	sp, #8
 8002328:	bd80      	pop	{r7, pc}
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	e000e010 	.word	0xe000e010

08002330 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	607a      	str	r2, [r7, #4]
 800233a:	210f      	movs	r1, #15
 800233c:	187b      	adds	r3, r7, r1
 800233e:	1c02      	adds	r2, r0, #0
 8002340:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	187b      	adds	r3, r7, r1
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	b25b      	sxtb	r3, r3
 800234a:	0011      	movs	r1, r2
 800234c:	0018      	movs	r0, r3
 800234e:	f7ff ff5d 	bl	800220c <__NVIC_SetPriority>
}
 8002352:	46c0      	nop			; (mov r8, r8)
 8002354:	46bd      	mov	sp, r7
 8002356:	b004      	add	sp, #16
 8002358:	bd80      	pop	{r7, pc}

0800235a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b082      	sub	sp, #8
 800235e:	af00      	add	r7, sp, #0
 8002360:	0002      	movs	r2, r0
 8002362:	1dfb      	adds	r3, r7, #7
 8002364:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002366:	1dfb      	adds	r3, r7, #7
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	b25b      	sxtb	r3, r3
 800236c:	0018      	movs	r0, r3
 800236e:	f7ff ff33 	bl	80021d8 <__NVIC_EnableIRQ>
}
 8002372:	46c0      	nop			; (mov r8, r8)
 8002374:	46bd      	mov	sp, r7
 8002376:	b002      	add	sp, #8
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b082      	sub	sp, #8
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	0018      	movs	r0, r3
 8002386:	f7ff ffaf 	bl	80022e8 <SysTick_Config>
 800238a:	0003      	movs	r3, r0
}
 800238c:	0018      	movs	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	b002      	add	sp, #8
 8002392:	bd80      	pop	{r7, pc}

08002394 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e077      	b.n	8002496 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a3d      	ldr	r2, [pc, #244]	; (80024a0 <HAL_DMA_Init+0x10c>)
 80023ac:	4694      	mov	ip, r2
 80023ae:	4463      	add	r3, ip
 80023b0:	2114      	movs	r1, #20
 80023b2:	0018      	movs	r0, r3
 80023b4:	f7fd fea6 	bl	8000104 <__udivsi3>
 80023b8:	0003      	movs	r3, r0
 80023ba:	009a      	lsls	r2, r3, #2
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2225      	movs	r2, #37	; 0x25
 80023c4:	2102      	movs	r1, #2
 80023c6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4934      	ldr	r1, [pc, #208]	; (80024a4 <HAL_DMA_Init+0x110>)
 80023d4:	400a      	ands	r2, r1
 80023d6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6819      	ldr	r1, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	431a      	orrs	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	431a      	orrs	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	431a      	orrs	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	431a      	orrs	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	431a      	orrs	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	431a      	orrs	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	430a      	orrs	r2, r1
 800240c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	0018      	movs	r0, r3
 8002412:	f000 f9cd 	bl	80027b0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689a      	ldr	r2, [r3, #8]
 800241a:	2380      	movs	r3, #128	; 0x80
 800241c:	01db      	lsls	r3, r3, #7
 800241e:	429a      	cmp	r2, r3
 8002420:	d102      	bne.n	8002428 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002430:	213f      	movs	r1, #63	; 0x3f
 8002432:	400a      	ands	r2, r1
 8002434:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800243e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d011      	beq.n	800246c <HAL_DMA_Init+0xd8>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b04      	cmp	r3, #4
 800244e:	d80d      	bhi.n	800246c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	0018      	movs	r0, r3
 8002454:	f000 f9d8 	bl	8002808 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002468:	605a      	str	r2, [r3, #4]
 800246a:	e008      	b.n	800247e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2225      	movs	r2, #37	; 0x25
 8002488:	2101      	movs	r1, #1
 800248a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2224      	movs	r2, #36	; 0x24
 8002490:	2100      	movs	r1, #0
 8002492:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	0018      	movs	r0, r3
 8002498:	46bd      	mov	sp, r7
 800249a:	b002      	add	sp, #8
 800249c:	bd80      	pop	{r7, pc}
 800249e:	46c0      	nop			; (mov r8, r8)
 80024a0:	bffdfff8 	.word	0xbffdfff8
 80024a4:	ffff800f 	.word	0xffff800f

080024a8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
 80024b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024b6:	2317      	movs	r3, #23
 80024b8:	18fb      	adds	r3, r7, r3
 80024ba:	2200      	movs	r2, #0
 80024bc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2224      	movs	r2, #36	; 0x24
 80024c2:	5c9b      	ldrb	r3, [r3, r2]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d101      	bne.n	80024cc <HAL_DMA_Start_IT+0x24>
 80024c8:	2302      	movs	r3, #2
 80024ca:	e06f      	b.n	80025ac <HAL_DMA_Start_IT+0x104>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2224      	movs	r2, #36	; 0x24
 80024d0:	2101      	movs	r1, #1
 80024d2:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2225      	movs	r2, #37	; 0x25
 80024d8:	5c9b      	ldrb	r3, [r3, r2]
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d157      	bne.n	8002590 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2225      	movs	r2, #37	; 0x25
 80024e4:	2102      	movs	r1, #2
 80024e6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2200      	movs	r2, #0
 80024ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2101      	movs	r1, #1
 80024fa:	438a      	bics	r2, r1
 80024fc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	68b9      	ldr	r1, [r7, #8]
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f000 f913 	bl	8002730 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	2b00      	cmp	r3, #0
 8002510:	d008      	beq.n	8002524 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	210e      	movs	r1, #14
 800251e:	430a      	orrs	r2, r1
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	e00f      	b.n	8002544 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2104      	movs	r1, #4
 8002530:	438a      	bics	r2, r1
 8002532:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	210a      	movs	r1, #10
 8002540:	430a      	orrs	r2, r1
 8002542:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	2380      	movs	r3, #128	; 0x80
 800254c:	025b      	lsls	r3, r3, #9
 800254e:	4013      	ands	r3, r2
 8002550:	d008      	beq.n	8002564 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255c:	2180      	movs	r1, #128	; 0x80
 800255e:	0049      	lsls	r1, r1, #1
 8002560:	430a      	orrs	r2, r1
 8002562:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002568:	2b00      	cmp	r3, #0
 800256a:	d008      	beq.n	800257e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002576:	2180      	movs	r1, #128	; 0x80
 8002578:	0049      	lsls	r1, r1, #1
 800257a:	430a      	orrs	r2, r1
 800257c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2101      	movs	r1, #1
 800258a:	430a      	orrs	r2, r1
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	e00a      	b.n	80025a6 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2280      	movs	r2, #128	; 0x80
 8002594:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2224      	movs	r2, #36	; 0x24
 800259a:	2100      	movs	r1, #0
 800259c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800259e:	2317      	movs	r3, #23
 80025a0:	18fb      	adds	r3, r7, r3
 80025a2:	2201      	movs	r2, #1
 80025a4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80025a6:	2317      	movs	r3, #23
 80025a8:	18fb      	adds	r3, r7, r3
 80025aa:	781b      	ldrb	r3, [r3, #0]
}
 80025ac:	0018      	movs	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	b006      	add	sp, #24
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80025bc:	4b55      	ldr	r3, [pc, #340]	; (8002714 <HAL_DMA_IRQHandler+0x160>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	221c      	movs	r2, #28
 80025d0:	4013      	ands	r3, r2
 80025d2:	2204      	movs	r2, #4
 80025d4:	409a      	lsls	r2, r3
 80025d6:	0013      	movs	r3, r2
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	4013      	ands	r3, r2
 80025dc:	d027      	beq.n	800262e <HAL_DMA_IRQHandler+0x7a>
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	2204      	movs	r2, #4
 80025e2:	4013      	ands	r3, r2
 80025e4:	d023      	beq.n	800262e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2220      	movs	r2, #32
 80025ee:	4013      	ands	r3, r2
 80025f0:	d107      	bne.n	8002602 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2104      	movs	r1, #4
 80025fe:	438a      	bics	r2, r1
 8002600:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8002602:	4b44      	ldr	r3, [pc, #272]	; (8002714 <HAL_DMA_IRQHandler+0x160>)
 8002604:	6859      	ldr	r1, [r3, #4]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	221c      	movs	r2, #28
 800260c:	4013      	ands	r3, r2
 800260e:	2204      	movs	r2, #4
 8002610:	409a      	lsls	r2, r3
 8002612:	4b40      	ldr	r3, [pc, #256]	; (8002714 <HAL_DMA_IRQHandler+0x160>)
 8002614:	430a      	orrs	r2, r1
 8002616:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261c:	2b00      	cmp	r3, #0
 800261e:	d100      	bne.n	8002622 <HAL_DMA_IRQHandler+0x6e>
 8002620:	e073      	b.n	800270a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	0010      	movs	r0, r2
 800262a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800262c:	e06d      	b.n	800270a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	221c      	movs	r2, #28
 8002634:	4013      	ands	r3, r2
 8002636:	2202      	movs	r2, #2
 8002638:	409a      	lsls	r2, r3
 800263a:	0013      	movs	r3, r2
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	4013      	ands	r3, r2
 8002640:	d02e      	beq.n	80026a0 <HAL_DMA_IRQHandler+0xec>
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	2202      	movs	r2, #2
 8002646:	4013      	ands	r3, r2
 8002648:	d02a      	beq.n	80026a0 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2220      	movs	r2, #32
 8002652:	4013      	ands	r3, r2
 8002654:	d10b      	bne.n	800266e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	210a      	movs	r1, #10
 8002662:	438a      	bics	r2, r1
 8002664:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2225      	movs	r2, #37	; 0x25
 800266a:	2101      	movs	r1, #1
 800266c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800266e:	4b29      	ldr	r3, [pc, #164]	; (8002714 <HAL_DMA_IRQHandler+0x160>)
 8002670:	6859      	ldr	r1, [r3, #4]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	221c      	movs	r2, #28
 8002678:	4013      	ands	r3, r2
 800267a:	2202      	movs	r2, #2
 800267c:	409a      	lsls	r2, r3
 800267e:	4b25      	ldr	r3, [pc, #148]	; (8002714 <HAL_DMA_IRQHandler+0x160>)
 8002680:	430a      	orrs	r2, r1
 8002682:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2224      	movs	r2, #36	; 0x24
 8002688:	2100      	movs	r1, #0
 800268a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002690:	2b00      	cmp	r3, #0
 8002692:	d03a      	beq.n	800270a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	0010      	movs	r0, r2
 800269c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800269e:	e034      	b.n	800270a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a4:	221c      	movs	r2, #28
 80026a6:	4013      	ands	r3, r2
 80026a8:	2208      	movs	r2, #8
 80026aa:	409a      	lsls	r2, r3
 80026ac:	0013      	movs	r3, r2
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	4013      	ands	r3, r2
 80026b2:	d02b      	beq.n	800270c <HAL_DMA_IRQHandler+0x158>
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	2208      	movs	r2, #8
 80026b8:	4013      	ands	r3, r2
 80026ba:	d027      	beq.n	800270c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	210e      	movs	r1, #14
 80026c8:	438a      	bics	r2, r1
 80026ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80026cc:	4b11      	ldr	r3, [pc, #68]	; (8002714 <HAL_DMA_IRQHandler+0x160>)
 80026ce:	6859      	ldr	r1, [r3, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d4:	221c      	movs	r2, #28
 80026d6:	4013      	ands	r3, r2
 80026d8:	2201      	movs	r2, #1
 80026da:	409a      	lsls	r2, r3
 80026dc:	4b0d      	ldr	r3, [pc, #52]	; (8002714 <HAL_DMA_IRQHandler+0x160>)
 80026de:	430a      	orrs	r2, r1
 80026e0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2225      	movs	r2, #37	; 0x25
 80026ec:	2101      	movs	r1, #1
 80026ee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2224      	movs	r2, #36	; 0x24
 80026f4:	2100      	movs	r1, #0
 80026f6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d005      	beq.n	800270c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	0010      	movs	r0, r2
 8002708:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	46c0      	nop			; (mov r8, r8)
}
 800270e:	46bd      	mov	sp, r7
 8002710:	b004      	add	sp, #16
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40020000 	.word	0x40020000

08002718 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2225      	movs	r2, #37	; 0x25
 8002724:	5c9b      	ldrb	r3, [r3, r2]
 8002726:	b2db      	uxtb	r3, r3
}
 8002728:	0018      	movs	r0, r3
 800272a:	46bd      	mov	sp, r7
 800272c:	b002      	add	sp, #8
 800272e:	bd80      	pop	{r7, pc}

08002730 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
 800273c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002746:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800274c:	2b00      	cmp	r3, #0
 800274e:	d004      	beq.n	800275a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002758:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800275a:	4b14      	ldr	r3, [pc, #80]	; (80027ac <DMA_SetConfig+0x7c>)
 800275c:	6859      	ldr	r1, [r3, #4]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	221c      	movs	r2, #28
 8002764:	4013      	ands	r3, r2
 8002766:	2201      	movs	r2, #1
 8002768:	409a      	lsls	r2, r3
 800276a:	4b10      	ldr	r3, [pc, #64]	; (80027ac <DMA_SetConfig+0x7c>)
 800276c:	430a      	orrs	r2, r1
 800276e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	2b10      	cmp	r3, #16
 800277e:	d108      	bne.n	8002792 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68ba      	ldr	r2, [r7, #8]
 800278e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002790:	e007      	b.n	80027a2 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68ba      	ldr	r2, [r7, #8]
 8002798:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	60da      	str	r2, [r3, #12]
}
 80027a2:	46c0      	nop			; (mov r8, r8)
 80027a4:	46bd      	mov	sp, r7
 80027a6:	b004      	add	sp, #16
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	46c0      	nop			; (mov r8, r8)
 80027ac:	40020000 	.word	0x40020000

080027b0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	089b      	lsrs	r3, r3, #2
 80027be:	4a10      	ldr	r2, [pc, #64]	; (8002800 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80027c0:	4694      	mov	ip, r2
 80027c2:	4463      	add	r3, ip
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	001a      	movs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	001a      	movs	r2, r3
 80027d2:	23ff      	movs	r3, #255	; 0xff
 80027d4:	4013      	ands	r3, r2
 80027d6:	3b08      	subs	r3, #8
 80027d8:	2114      	movs	r1, #20
 80027da:	0018      	movs	r0, r3
 80027dc:	f7fd fc92 	bl	8000104 <__udivsi3>
 80027e0:	0003      	movs	r3, r0
 80027e2:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a07      	ldr	r2, [pc, #28]	; (8002804 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80027e8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	221f      	movs	r2, #31
 80027ee:	4013      	ands	r3, r2
 80027f0:	2201      	movs	r2, #1
 80027f2:	409a      	lsls	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80027f8:	46c0      	nop			; (mov r8, r8)
 80027fa:	46bd      	mov	sp, r7
 80027fc:	b004      	add	sp, #16
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	10008200 	.word	0x10008200
 8002804:	40020880 	.word	0x40020880

08002808 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	223f      	movs	r2, #63	; 0x3f
 8002816:	4013      	ands	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	4a0a      	ldr	r2, [pc, #40]	; (8002848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800281e:	4694      	mov	ip, r2
 8002820:	4463      	add	r3, ip
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	001a      	movs	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a07      	ldr	r2, [pc, #28]	; (800284c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800282e:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	3b01      	subs	r3, #1
 8002834:	2203      	movs	r2, #3
 8002836:	4013      	ands	r3, r2
 8002838:	2201      	movs	r2, #1
 800283a:	409a      	lsls	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002840:	46c0      	nop			; (mov r8, r8)
 8002842:	46bd      	mov	sp, r7
 8002844:	b004      	add	sp, #16
 8002846:	bd80      	pop	{r7, pc}
 8002848:	1000823f 	.word	0x1000823f
 800284c:	40020940 	.word	0x40020940

08002850 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800285a:	2300      	movs	r3, #0
 800285c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800285e:	e147      	b.n	8002af0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2101      	movs	r1, #1
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	4091      	lsls	r1, r2
 800286a:	000a      	movs	r2, r1
 800286c:	4013      	ands	r3, r2
 800286e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d100      	bne.n	8002878 <HAL_GPIO_Init+0x28>
 8002876:	e138      	b.n	8002aea <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	2203      	movs	r2, #3
 800287e:	4013      	ands	r3, r2
 8002880:	2b01      	cmp	r3, #1
 8002882:	d005      	beq.n	8002890 <HAL_GPIO_Init+0x40>
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2203      	movs	r2, #3
 800288a:	4013      	ands	r3, r2
 800288c:	2b02      	cmp	r3, #2
 800288e:	d130      	bne.n	80028f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	2203      	movs	r2, #3
 800289c:	409a      	lsls	r2, r3
 800289e:	0013      	movs	r3, r2
 80028a0:	43da      	mvns	r2, r3
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	4013      	ands	r3, r2
 80028a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	68da      	ldr	r2, [r3, #12]
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	409a      	lsls	r2, r3
 80028b2:	0013      	movs	r3, r2
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028c6:	2201      	movs	r2, #1
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	409a      	lsls	r2, r3
 80028cc:	0013      	movs	r3, r2
 80028ce:	43da      	mvns	r2, r3
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	4013      	ands	r3, r2
 80028d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	091b      	lsrs	r3, r3, #4
 80028dc:	2201      	movs	r2, #1
 80028de:	401a      	ands	r2, r3
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	409a      	lsls	r2, r3
 80028e4:	0013      	movs	r3, r2
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2203      	movs	r2, #3
 80028f8:	4013      	ands	r3, r2
 80028fa:	2b03      	cmp	r3, #3
 80028fc:	d017      	beq.n	800292e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	2203      	movs	r2, #3
 800290a:	409a      	lsls	r2, r3
 800290c:	0013      	movs	r3, r2
 800290e:	43da      	mvns	r2, r3
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	4013      	ands	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	689a      	ldr	r2, [r3, #8]
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	409a      	lsls	r2, r3
 8002920:	0013      	movs	r3, r2
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	4313      	orrs	r3, r2
 8002926:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2203      	movs	r2, #3
 8002934:	4013      	ands	r3, r2
 8002936:	2b02      	cmp	r3, #2
 8002938:	d123      	bne.n	8002982 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	08da      	lsrs	r2, r3, #3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	3208      	adds	r2, #8
 8002942:	0092      	lsls	r2, r2, #2
 8002944:	58d3      	ldr	r3, [r2, r3]
 8002946:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	2207      	movs	r2, #7
 800294c:	4013      	ands	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	220f      	movs	r2, #15
 8002952:	409a      	lsls	r2, r3
 8002954:	0013      	movs	r3, r2
 8002956:	43da      	mvns	r2, r3
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	4013      	ands	r3, r2
 800295c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	691a      	ldr	r2, [r3, #16]
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	2107      	movs	r1, #7
 8002966:	400b      	ands	r3, r1
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	409a      	lsls	r2, r3
 800296c:	0013      	movs	r3, r2
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	4313      	orrs	r3, r2
 8002972:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	08da      	lsrs	r2, r3, #3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3208      	adds	r2, #8
 800297c:	0092      	lsls	r2, r2, #2
 800297e:	6939      	ldr	r1, [r7, #16]
 8002980:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	2203      	movs	r2, #3
 800298e:	409a      	lsls	r2, r3
 8002990:	0013      	movs	r3, r2
 8002992:	43da      	mvns	r2, r3
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	4013      	ands	r3, r2
 8002998:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2203      	movs	r2, #3
 80029a0:	401a      	ands	r2, r3
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	409a      	lsls	r2, r3
 80029a8:	0013      	movs	r3, r2
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	23c0      	movs	r3, #192	; 0xc0
 80029bc:	029b      	lsls	r3, r3, #10
 80029be:	4013      	ands	r3, r2
 80029c0:	d100      	bne.n	80029c4 <HAL_GPIO_Init+0x174>
 80029c2:	e092      	b.n	8002aea <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80029c4:	4a50      	ldr	r2, [pc, #320]	; (8002b08 <HAL_GPIO_Init+0x2b8>)
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	089b      	lsrs	r3, r3, #2
 80029ca:	3318      	adds	r3, #24
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	589b      	ldr	r3, [r3, r2]
 80029d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	2203      	movs	r2, #3
 80029d6:	4013      	ands	r3, r2
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	220f      	movs	r2, #15
 80029dc:	409a      	lsls	r2, r3
 80029de:	0013      	movs	r3, r2
 80029e0:	43da      	mvns	r2, r3
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	4013      	ands	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	23a0      	movs	r3, #160	; 0xa0
 80029ec:	05db      	lsls	r3, r3, #23
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d013      	beq.n	8002a1a <HAL_GPIO_Init+0x1ca>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a45      	ldr	r2, [pc, #276]	; (8002b0c <HAL_GPIO_Init+0x2bc>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d00d      	beq.n	8002a16 <HAL_GPIO_Init+0x1c6>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a44      	ldr	r2, [pc, #272]	; (8002b10 <HAL_GPIO_Init+0x2c0>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d007      	beq.n	8002a12 <HAL_GPIO_Init+0x1c2>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a43      	ldr	r2, [pc, #268]	; (8002b14 <HAL_GPIO_Init+0x2c4>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d101      	bne.n	8002a0e <HAL_GPIO_Init+0x1be>
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e006      	b.n	8002a1c <HAL_GPIO_Init+0x1cc>
 8002a0e:	2305      	movs	r3, #5
 8002a10:	e004      	b.n	8002a1c <HAL_GPIO_Init+0x1cc>
 8002a12:	2302      	movs	r3, #2
 8002a14:	e002      	b.n	8002a1c <HAL_GPIO_Init+0x1cc>
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <HAL_GPIO_Init+0x1cc>
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	2103      	movs	r1, #3
 8002a20:	400a      	ands	r2, r1
 8002a22:	00d2      	lsls	r2, r2, #3
 8002a24:	4093      	lsls	r3, r2
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002a2c:	4936      	ldr	r1, [pc, #216]	; (8002b08 <HAL_GPIO_Init+0x2b8>)
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	089b      	lsrs	r3, r3, #2
 8002a32:	3318      	adds	r3, #24
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a3a:	4b33      	ldr	r3, [pc, #204]	; (8002b08 <HAL_GPIO_Init+0x2b8>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	43da      	mvns	r2, r3
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	4013      	ands	r3, r2
 8002a48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	2380      	movs	r3, #128	; 0x80
 8002a50:	035b      	lsls	r3, r3, #13
 8002a52:	4013      	ands	r3, r2
 8002a54:	d003      	beq.n	8002a5e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a5e:	4b2a      	ldr	r3, [pc, #168]	; (8002b08 <HAL_GPIO_Init+0x2b8>)
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002a64:	4b28      	ldr	r3, [pc, #160]	; (8002b08 <HAL_GPIO_Init+0x2b8>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	43da      	mvns	r2, r3
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	4013      	ands	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	2380      	movs	r3, #128	; 0x80
 8002a7a:	039b      	lsls	r3, r3, #14
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	d003      	beq.n	8002a88 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a88:	4b1f      	ldr	r3, [pc, #124]	; (8002b08 <HAL_GPIO_Init+0x2b8>)
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a8e:	4a1e      	ldr	r2, [pc, #120]	; (8002b08 <HAL_GPIO_Init+0x2b8>)
 8002a90:	2384      	movs	r3, #132	; 0x84
 8002a92:	58d3      	ldr	r3, [r2, r3]
 8002a94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	43da      	mvns	r2, r3
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	2380      	movs	r3, #128	; 0x80
 8002aa6:	029b      	lsls	r3, r3, #10
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	d003      	beq.n	8002ab4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ab4:	4914      	ldr	r1, [pc, #80]	; (8002b08 <HAL_GPIO_Init+0x2b8>)
 8002ab6:	2284      	movs	r2, #132	; 0x84
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002abc:	4a12      	ldr	r2, [pc, #72]	; (8002b08 <HAL_GPIO_Init+0x2b8>)
 8002abe:	2380      	movs	r3, #128	; 0x80
 8002ac0:	58d3      	ldr	r3, [r2, r3]
 8002ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	43da      	mvns	r2, r3
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	4013      	ands	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685a      	ldr	r2, [r3, #4]
 8002ad2:	2380      	movs	r3, #128	; 0x80
 8002ad4:	025b      	lsls	r3, r3, #9
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	d003      	beq.n	8002ae2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ae2:	4909      	ldr	r1, [pc, #36]	; (8002b08 <HAL_GPIO_Init+0x2b8>)
 8002ae4:	2280      	movs	r2, #128	; 0x80
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	3301      	adds	r3, #1
 8002aee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	40da      	lsrs	r2, r3
 8002af8:	1e13      	subs	r3, r2, #0
 8002afa:	d000      	beq.n	8002afe <HAL_GPIO_Init+0x2ae>
 8002afc:	e6b0      	b.n	8002860 <HAL_GPIO_Init+0x10>
  }
}
 8002afe:	46c0      	nop			; (mov r8, r8)
 8002b00:	46c0      	nop			; (mov r8, r8)
 8002b02:	46bd      	mov	sp, r7
 8002b04:	b006      	add	sp, #24
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40021800 	.word	0x40021800
 8002b0c:	50000400 	.word	0x50000400
 8002b10:	50000800 	.word	0x50000800
 8002b14:	50000c00 	.word	0x50000c00

08002b18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	000a      	movs	r2, r1
 8002b22:	1cbb      	adds	r3, r7, #2
 8002b24:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	1cba      	adds	r2, r7, #2
 8002b2c:	8812      	ldrh	r2, [r2, #0]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	d004      	beq.n	8002b3c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002b32:	230f      	movs	r3, #15
 8002b34:	18fb      	adds	r3, r7, r3
 8002b36:	2201      	movs	r2, #1
 8002b38:	701a      	strb	r2, [r3, #0]
 8002b3a:	e003      	b.n	8002b44 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b3c:	230f      	movs	r3, #15
 8002b3e:	18fb      	adds	r3, r7, r3
 8002b40:	2200      	movs	r2, #0
 8002b42:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002b44:	230f      	movs	r3, #15
 8002b46:	18fb      	adds	r3, r7, r3
 8002b48:	781b      	ldrb	r3, [r3, #0]
}
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	b004      	add	sp, #16
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b082      	sub	sp, #8
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
 8002b5a:	0008      	movs	r0, r1
 8002b5c:	0011      	movs	r1, r2
 8002b5e:	1cbb      	adds	r3, r7, #2
 8002b60:	1c02      	adds	r2, r0, #0
 8002b62:	801a      	strh	r2, [r3, #0]
 8002b64:	1c7b      	adds	r3, r7, #1
 8002b66:	1c0a      	adds	r2, r1, #0
 8002b68:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b6a:	1c7b      	adds	r3, r7, #1
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d004      	beq.n	8002b7c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b72:	1cbb      	adds	r3, r7, #2
 8002b74:	881a      	ldrh	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b7a:	e003      	b.n	8002b84 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b7c:	1cbb      	adds	r3, r7, #2
 8002b7e:	881a      	ldrh	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b84:	46c0      	nop			; (mov r8, r8)
 8002b86:	46bd      	mov	sp, r7
 8002b88:	b002      	add	sp, #8
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	0002      	movs	r2, r0
 8002b94:	1dbb      	adds	r3, r7, #6
 8002b96:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002b98:	4b10      	ldr	r3, [pc, #64]	; (8002bdc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	1dba      	adds	r2, r7, #6
 8002b9e:	8812      	ldrh	r2, [r2, #0]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	d008      	beq.n	8002bb6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002ba4:	4b0d      	ldr	r3, [pc, #52]	; (8002bdc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002ba6:	1dba      	adds	r2, r7, #6
 8002ba8:	8812      	ldrh	r2, [r2, #0]
 8002baa:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002bac:	1dbb      	adds	r3, r7, #6
 8002bae:	881b      	ldrh	r3, [r3, #0]
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	f001 fc2d 	bl	8004410 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002bb6:	4b09      	ldr	r3, [pc, #36]	; (8002bdc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	1dba      	adds	r2, r7, #6
 8002bbc:	8812      	ldrh	r2, [r2, #0]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	d008      	beq.n	8002bd4 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002bc2:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002bc4:	1dba      	adds	r2, r7, #6
 8002bc6:	8812      	ldrh	r2, [r2, #0]
 8002bc8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002bca:	1dbb      	adds	r3, r7, #6
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	0018      	movs	r0, r3
 8002bd0:	f001 fc32 	bl	8004438 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002bd4:	46c0      	nop			; (mov r8, r8)
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	b002      	add	sp, #8
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40021800 	.word	0x40021800

08002be0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002be8:	4b19      	ldr	r3, [pc, #100]	; (8002c50 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a19      	ldr	r2, [pc, #100]	; (8002c54 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002bee:	4013      	ands	r3, r2
 8002bf0:	0019      	movs	r1, r3
 8002bf2:	4b17      	ldr	r3, [pc, #92]	; (8002c50 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	2380      	movs	r3, #128	; 0x80
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d11f      	bne.n	8002c44 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002c04:	4b14      	ldr	r3, [pc, #80]	; (8002c58 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	0013      	movs	r3, r2
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	189b      	adds	r3, r3, r2
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	4912      	ldr	r1, [pc, #72]	; (8002c5c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002c12:	0018      	movs	r0, r3
 8002c14:	f7fd fa76 	bl	8000104 <__udivsi3>
 8002c18:	0003      	movs	r3, r0
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c1e:	e008      	b.n	8002c32 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	e001      	b.n	8002c32 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e009      	b.n	8002c46 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c32:	4b07      	ldr	r3, [pc, #28]	; (8002c50 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002c34:	695a      	ldr	r2, [r3, #20]
 8002c36:	2380      	movs	r3, #128	; 0x80
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	401a      	ands	r2, r3
 8002c3c:	2380      	movs	r3, #128	; 0x80
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d0ed      	beq.n	8002c20 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	0018      	movs	r0, r3
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	b004      	add	sp, #16
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	46c0      	nop			; (mov r8, r8)
 8002c50:	40007000 	.word	0x40007000
 8002c54:	fffff9ff 	.word	0xfffff9ff
 8002c58:	20000008 	.word	0x20000008
 8002c5c:	000f4240 	.word	0x000f4240

08002c60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b088      	sub	sp, #32
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e2fe      	b.n	8003270 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2201      	movs	r2, #1
 8002c78:	4013      	ands	r3, r2
 8002c7a:	d100      	bne.n	8002c7e <HAL_RCC_OscConfig+0x1e>
 8002c7c:	e07c      	b.n	8002d78 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c7e:	4bc3      	ldr	r3, [pc, #780]	; (8002f8c <HAL_RCC_OscConfig+0x32c>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	2238      	movs	r2, #56	; 0x38
 8002c84:	4013      	ands	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c88:	4bc0      	ldr	r3, [pc, #768]	; (8002f8c <HAL_RCC_OscConfig+0x32c>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	2203      	movs	r2, #3
 8002c8e:	4013      	ands	r3, r2
 8002c90:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	2b10      	cmp	r3, #16
 8002c96:	d102      	bne.n	8002c9e <HAL_RCC_OscConfig+0x3e>
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	2b03      	cmp	r3, #3
 8002c9c:	d002      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d10b      	bne.n	8002cbc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca4:	4bb9      	ldr	r3, [pc, #740]	; (8002f8c <HAL_RCC_OscConfig+0x32c>)
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	2380      	movs	r3, #128	; 0x80
 8002caa:	029b      	lsls	r3, r3, #10
 8002cac:	4013      	ands	r3, r2
 8002cae:	d062      	beq.n	8002d76 <HAL_RCC_OscConfig+0x116>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d15e      	bne.n	8002d76 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e2d9      	b.n	8003270 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	2380      	movs	r3, #128	; 0x80
 8002cc2:	025b      	lsls	r3, r3, #9
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d107      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x78>
 8002cc8:	4bb0      	ldr	r3, [pc, #704]	; (8002f8c <HAL_RCC_OscConfig+0x32c>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	4baf      	ldr	r3, [pc, #700]	; (8002f8c <HAL_RCC_OscConfig+0x32c>)
 8002cce:	2180      	movs	r1, #128	; 0x80
 8002cd0:	0249      	lsls	r1, r1, #9
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	e020      	b.n	8002d1a <HAL_RCC_OscConfig+0xba>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	23a0      	movs	r3, #160	; 0xa0
 8002cde:	02db      	lsls	r3, r3, #11
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d10e      	bne.n	8002d02 <HAL_RCC_OscConfig+0xa2>
 8002ce4:	4ba9      	ldr	r3, [pc, #676]	; (8002f8c <HAL_RCC_OscConfig+0x32c>)
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	4ba8      	ldr	r3, [pc, #672]	; (8002f8c <HAL_RCC_OscConfig+0x32c>)
 8002cea:	2180      	movs	r1, #128	; 0x80
 8002cec:	02c9      	lsls	r1, r1, #11
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	4ba6      	ldr	r3, [pc, #664]	; (8002f8c <HAL_RCC_OscConfig+0x32c>)
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	4ba5      	ldr	r3, [pc, #660]	; (8002f8c <HAL_RCC_OscConfig+0x32c>)
 8002cf8:	2180      	movs	r1, #128	; 0x80
 8002cfa:	0249      	lsls	r1, r1, #9
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	e00b      	b.n	8002d1a <HAL_RCC_OscConfig+0xba>
 8002d02:	4ba2      	ldr	r3, [pc, #648]	; (8002f8c <HAL_RCC_OscConfig+0x32c>)
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	4ba1      	ldr	r3, [pc, #644]	; (8002f8c <HAL_RCC_OscConfig+0x32c>)
 8002d08:	49a1      	ldr	r1, [pc, #644]	; (8002f90 <HAL_RCC_OscConfig+0x330>)
 8002d0a:	400a      	ands	r2, r1
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	4b9f      	ldr	r3, [pc, #636]	; (8002f8c <HAL_RCC_OscConfig+0x32c>)
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	4b9e      	ldr	r3, [pc, #632]	; (8002f8c <HAL_RCC_OscConfig+0x32c>)
 8002d14:	499f      	ldr	r1, [pc, #636]	; (8002f94 <HAL_RCC_OscConfig+0x334>)
 8002d16:	400a      	ands	r2, r1
 8002d18:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d014      	beq.n	8002d4c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d22:	f7ff fa39 	bl	8002198 <HAL_GetTick>
 8002d26:	0003      	movs	r3, r0
 8002d28:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d2c:	f7ff fa34 	bl	8002198 <HAL_GetTick>
 8002d30:	0002      	movs	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b64      	cmp	r3, #100	; 0x64
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e298      	b.n	8003270 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d3e:	4b93      	ldr	r3, [pc, #588]	; (8002f8c <HAL_RCC_OscConfig+0x32c>)
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	2380      	movs	r3, #128	; 0x80
 8002d44:	029b      	lsls	r3, r3, #10
 8002d46:	4013      	ands	r3, r2
 8002d48:	d0f0      	beq.n	8002d2c <HAL_RCC_OscConfig+0xcc>
 8002d4a:	e015      	b.n	8002d78 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4c:	f7ff fa24 	bl	8002198 <HAL_GetTick>
 8002d50:	0003      	movs	r3, r0
 8002d52:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d56:	f7ff fa1f 	bl	8002198 <HAL_GetTick>
 8002d5a:	0002      	movs	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b64      	cmp	r3, #100	; 0x64
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e283      	b.n	8003270 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d68:	4b88      	ldr	r3, [pc, #544]	; (8002f8c <HAL_RCC_OscConfig+0x32c>)
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	2380      	movs	r3, #128	; 0x80
 8002d6e:	029b      	lsls	r3, r3, #10
 8002d70:	4013      	ands	r3, r2
 8002d72:	d1f0      	bne.n	8002d56 <HAL_RCC_OscConfig+0xf6>
 8002d74:	e000      	b.n	8002d78 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d76:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	4013      	ands	r3, r2
 8002d80:	d100      	bne.n	8002d84 <HAL_RCC_OscConfig+0x124>
 8002d82:	e099      	b.n	8002eb8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d84:	4b81      	ldr	r3, [pc, #516]	; (8002f8c <HAL_RCC_OscConfig+0x32c>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	2238      	movs	r2, #56	; 0x38
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d8e:	4b7f      	ldr	r3, [pc, #508]	; (8002f8c <HAL_RCC_OscConfig+0x32c>)
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	2203      	movs	r2, #3
 8002d94:	4013      	ands	r3, r2
 8002d96:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	2b10      	cmp	r3, #16
 8002d9c:	d102      	bne.n	8002da4 <HAL_RCC_OscConfig+0x144>
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d002      	beq.n	8002daa <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d135      	bne.n	8002e16 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002daa:	4b78      	ldr	r3, [pc, #480]	; (8002f8c <HAL_RCC_OscConfig+0x32c>)
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	2380      	movs	r3, #128	; 0x80
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	4013      	ands	r3, r2
 8002db4:	d005      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x162>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e256      	b.n	8003270 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc2:	4b72      	ldr	r3, [pc, #456]	; (8002f8c <HAL_RCC_OscConfig+0x32c>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	4a74      	ldr	r2, [pc, #464]	; (8002f98 <HAL_RCC_OscConfig+0x338>)
 8002dc8:	4013      	ands	r3, r2
 8002dca:	0019      	movs	r1, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	021a      	lsls	r2, r3, #8
 8002dd2:	4b6e      	ldr	r3, [pc, #440]	; (8002f8c <HAL_RCC_OscConfig+0x32c>)
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d112      	bne.n	8002e04 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002dde:	4b6b      	ldr	r3, [pc, #428]	; (8002f8c <HAL_RCC_OscConfig+0x32c>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a6e      	ldr	r2, [pc, #440]	; (8002f9c <HAL_RCC_OscConfig+0x33c>)
 8002de4:	4013      	ands	r3, r2
 8002de6:	0019      	movs	r1, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	691a      	ldr	r2, [r3, #16]
 8002dec:	4b67      	ldr	r3, [pc, #412]	; (8002f8c <HAL_RCC_OscConfig+0x32c>)
 8002dee:	430a      	orrs	r2, r1
 8002df0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002df2:	4b66      	ldr	r3, [pc, #408]	; (8002f8c <HAL_RCC_OscConfig+0x32c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	0adb      	lsrs	r3, r3, #11
 8002df8:	2207      	movs	r2, #7
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	4a68      	ldr	r2, [pc, #416]	; (8002fa0 <HAL_RCC_OscConfig+0x340>)
 8002dfe:	40da      	lsrs	r2, r3
 8002e00:	4b68      	ldr	r3, [pc, #416]	; (8002fa4 <HAL_RCC_OscConfig+0x344>)
 8002e02:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002e04:	4b68      	ldr	r3, [pc, #416]	; (8002fa8 <HAL_RCC_OscConfig+0x348>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	0018      	movs	r0, r3
 8002e0a:	f7ff f969 	bl	80020e0 <HAL_InitTick>
 8002e0e:	1e03      	subs	r3, r0, #0
 8002e10:	d051      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e22c      	b.n	8003270 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d030      	beq.n	8002e80 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002e1e:	4b5b      	ldr	r3, [pc, #364]	; (8002f8c <HAL_RCC_OscConfig+0x32c>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a5e      	ldr	r2, [pc, #376]	; (8002f9c <HAL_RCC_OscConfig+0x33c>)
 8002e24:	4013      	ands	r3, r2
 8002e26:	0019      	movs	r1, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	691a      	ldr	r2, [r3, #16]
 8002e2c:	4b57      	ldr	r3, [pc, #348]	; (8002f8c <HAL_RCC_OscConfig+0x32c>)
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002e32:	4b56      	ldr	r3, [pc, #344]	; (8002f8c <HAL_RCC_OscConfig+0x32c>)
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	4b55      	ldr	r3, [pc, #340]	; (8002f8c <HAL_RCC_OscConfig+0x32c>)
 8002e38:	2180      	movs	r1, #128	; 0x80
 8002e3a:	0049      	lsls	r1, r1, #1
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e40:	f7ff f9aa 	bl	8002198 <HAL_GetTick>
 8002e44:	0003      	movs	r3, r0
 8002e46:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e48:	e008      	b.n	8002e5c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e4a:	f7ff f9a5 	bl	8002198 <HAL_GetTick>
 8002e4e:	0002      	movs	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e209      	b.n	8003270 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e5c:	4b4b      	ldr	r3, [pc, #300]	; (8002f8c <HAL_RCC_OscConfig+0x32c>)
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	2380      	movs	r3, #128	; 0x80
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	4013      	ands	r3, r2
 8002e66:	d0f0      	beq.n	8002e4a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e68:	4b48      	ldr	r3, [pc, #288]	; (8002f8c <HAL_RCC_OscConfig+0x32c>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	4a4a      	ldr	r2, [pc, #296]	; (8002f98 <HAL_RCC_OscConfig+0x338>)
 8002e6e:	4013      	ands	r3, r2
 8002e70:	0019      	movs	r1, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	021a      	lsls	r2, r3, #8
 8002e78:	4b44      	ldr	r3, [pc, #272]	; (8002f8c <HAL_RCC_OscConfig+0x32c>)
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	605a      	str	r2, [r3, #4]
 8002e7e:	e01b      	b.n	8002eb8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002e80:	4b42      	ldr	r3, [pc, #264]	; (8002f8c <HAL_RCC_OscConfig+0x32c>)
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	4b41      	ldr	r3, [pc, #260]	; (8002f8c <HAL_RCC_OscConfig+0x32c>)
 8002e86:	4949      	ldr	r1, [pc, #292]	; (8002fac <HAL_RCC_OscConfig+0x34c>)
 8002e88:	400a      	ands	r2, r1
 8002e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e8c:	f7ff f984 	bl	8002198 <HAL_GetTick>
 8002e90:	0003      	movs	r3, r0
 8002e92:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e94:	e008      	b.n	8002ea8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e96:	f7ff f97f 	bl	8002198 <HAL_GetTick>
 8002e9a:	0002      	movs	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e1e3      	b.n	8003270 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ea8:	4b38      	ldr	r3, [pc, #224]	; (8002f8c <HAL_RCC_OscConfig+0x32c>)
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	2380      	movs	r3, #128	; 0x80
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	d1f0      	bne.n	8002e96 <HAL_RCC_OscConfig+0x236>
 8002eb4:	e000      	b.n	8002eb8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002eb6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2208      	movs	r2, #8
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	d047      	beq.n	8002f52 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002ec2:	4b32      	ldr	r3, [pc, #200]	; (8002f8c <HAL_RCC_OscConfig+0x32c>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	2238      	movs	r2, #56	; 0x38
 8002ec8:	4013      	ands	r3, r2
 8002eca:	2b18      	cmp	r3, #24
 8002ecc:	d10a      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002ece:	4b2f      	ldr	r3, [pc, #188]	; (8002f8c <HAL_RCC_OscConfig+0x32c>)
 8002ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	d03c      	beq.n	8002f52 <HAL_RCC_OscConfig+0x2f2>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d138      	bne.n	8002f52 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e1c5      	b.n	8003270 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d019      	beq.n	8002f20 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002eec:	4b27      	ldr	r3, [pc, #156]	; (8002f8c <HAL_RCC_OscConfig+0x32c>)
 8002eee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ef0:	4b26      	ldr	r3, [pc, #152]	; (8002f8c <HAL_RCC_OscConfig+0x32c>)
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef8:	f7ff f94e 	bl	8002198 <HAL_GetTick>
 8002efc:	0003      	movs	r3, r0
 8002efe:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f00:	e008      	b.n	8002f14 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f02:	f7ff f949 	bl	8002198 <HAL_GetTick>
 8002f06:	0002      	movs	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e1ad      	b.n	8003270 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f14:	4b1d      	ldr	r3, [pc, #116]	; (8002f8c <HAL_RCC_OscConfig+0x32c>)
 8002f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f18:	2202      	movs	r2, #2
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	d0f1      	beq.n	8002f02 <HAL_RCC_OscConfig+0x2a2>
 8002f1e:	e018      	b.n	8002f52 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002f20:	4b1a      	ldr	r3, [pc, #104]	; (8002f8c <HAL_RCC_OscConfig+0x32c>)
 8002f22:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f24:	4b19      	ldr	r3, [pc, #100]	; (8002f8c <HAL_RCC_OscConfig+0x32c>)
 8002f26:	2101      	movs	r1, #1
 8002f28:	438a      	bics	r2, r1
 8002f2a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2c:	f7ff f934 	bl	8002198 <HAL_GetTick>
 8002f30:	0003      	movs	r3, r0
 8002f32:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f34:	e008      	b.n	8002f48 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f36:	f7ff f92f 	bl	8002198 <HAL_GetTick>
 8002f3a:	0002      	movs	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e193      	b.n	8003270 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f48:	4b10      	ldr	r3, [pc, #64]	; (8002f8c <HAL_RCC_OscConfig+0x32c>)
 8002f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	4013      	ands	r3, r2
 8002f50:	d1f1      	bne.n	8002f36 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2204      	movs	r2, #4
 8002f58:	4013      	ands	r3, r2
 8002f5a:	d100      	bne.n	8002f5e <HAL_RCC_OscConfig+0x2fe>
 8002f5c:	e0c6      	b.n	80030ec <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f5e:	231f      	movs	r3, #31
 8002f60:	18fb      	adds	r3, r7, r3
 8002f62:	2200      	movs	r2, #0
 8002f64:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002f66:	4b09      	ldr	r3, [pc, #36]	; (8002f8c <HAL_RCC_OscConfig+0x32c>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	2238      	movs	r2, #56	; 0x38
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	2b20      	cmp	r3, #32
 8002f70:	d11e      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002f72:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <HAL_RCC_OscConfig+0x32c>)
 8002f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f76:	2202      	movs	r2, #2
 8002f78:	4013      	ands	r3, r2
 8002f7a:	d100      	bne.n	8002f7e <HAL_RCC_OscConfig+0x31e>
 8002f7c:	e0b6      	b.n	80030ec <HAL_RCC_OscConfig+0x48c>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d000      	beq.n	8002f88 <HAL_RCC_OscConfig+0x328>
 8002f86:	e0b1      	b.n	80030ec <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e171      	b.n	8003270 <HAL_RCC_OscConfig+0x610>
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	fffeffff 	.word	0xfffeffff
 8002f94:	fffbffff 	.word	0xfffbffff
 8002f98:	ffff80ff 	.word	0xffff80ff
 8002f9c:	ffffc7ff 	.word	0xffffc7ff
 8002fa0:	00f42400 	.word	0x00f42400
 8002fa4:	20000008 	.word	0x20000008
 8002fa8:	20000000 	.word	0x20000000
 8002fac:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fb0:	4bb1      	ldr	r3, [pc, #708]	; (8003278 <HAL_RCC_OscConfig+0x618>)
 8002fb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fb4:	2380      	movs	r3, #128	; 0x80
 8002fb6:	055b      	lsls	r3, r3, #21
 8002fb8:	4013      	ands	r3, r2
 8002fba:	d101      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x360>
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e000      	b.n	8002fc2 <HAL_RCC_OscConfig+0x362>
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d011      	beq.n	8002fea <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002fc6:	4bac      	ldr	r3, [pc, #688]	; (8003278 <HAL_RCC_OscConfig+0x618>)
 8002fc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fca:	4bab      	ldr	r3, [pc, #684]	; (8003278 <HAL_RCC_OscConfig+0x618>)
 8002fcc:	2180      	movs	r1, #128	; 0x80
 8002fce:	0549      	lsls	r1, r1, #21
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	63da      	str	r2, [r3, #60]	; 0x3c
 8002fd4:	4ba8      	ldr	r3, [pc, #672]	; (8003278 <HAL_RCC_OscConfig+0x618>)
 8002fd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fd8:	2380      	movs	r3, #128	; 0x80
 8002fda:	055b      	lsls	r3, r3, #21
 8002fdc:	4013      	ands	r3, r2
 8002fde:	60fb      	str	r3, [r7, #12]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002fe2:	231f      	movs	r3, #31
 8002fe4:	18fb      	adds	r3, r7, r3
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fea:	4ba4      	ldr	r3, [pc, #656]	; (800327c <HAL_RCC_OscConfig+0x61c>)
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	2380      	movs	r3, #128	; 0x80
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	d11a      	bne.n	800302c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ff6:	4ba1      	ldr	r3, [pc, #644]	; (800327c <HAL_RCC_OscConfig+0x61c>)
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	4ba0      	ldr	r3, [pc, #640]	; (800327c <HAL_RCC_OscConfig+0x61c>)
 8002ffc:	2180      	movs	r1, #128	; 0x80
 8002ffe:	0049      	lsls	r1, r1, #1
 8003000:	430a      	orrs	r2, r1
 8003002:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003004:	f7ff f8c8 	bl	8002198 <HAL_GetTick>
 8003008:	0003      	movs	r3, r0
 800300a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800300c:	e008      	b.n	8003020 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800300e:	f7ff f8c3 	bl	8002198 <HAL_GetTick>
 8003012:	0002      	movs	r2, r0
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e127      	b.n	8003270 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003020:	4b96      	ldr	r3, [pc, #600]	; (800327c <HAL_RCC_OscConfig+0x61c>)
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	2380      	movs	r3, #128	; 0x80
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	4013      	ands	r3, r2
 800302a:	d0f0      	beq.n	800300e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d106      	bne.n	8003042 <HAL_RCC_OscConfig+0x3e2>
 8003034:	4b90      	ldr	r3, [pc, #576]	; (8003278 <HAL_RCC_OscConfig+0x618>)
 8003036:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003038:	4b8f      	ldr	r3, [pc, #572]	; (8003278 <HAL_RCC_OscConfig+0x618>)
 800303a:	2101      	movs	r1, #1
 800303c:	430a      	orrs	r2, r1
 800303e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003040:	e01c      	b.n	800307c <HAL_RCC_OscConfig+0x41c>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	2b05      	cmp	r3, #5
 8003048:	d10c      	bne.n	8003064 <HAL_RCC_OscConfig+0x404>
 800304a:	4b8b      	ldr	r3, [pc, #556]	; (8003278 <HAL_RCC_OscConfig+0x618>)
 800304c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800304e:	4b8a      	ldr	r3, [pc, #552]	; (8003278 <HAL_RCC_OscConfig+0x618>)
 8003050:	2104      	movs	r1, #4
 8003052:	430a      	orrs	r2, r1
 8003054:	65da      	str	r2, [r3, #92]	; 0x5c
 8003056:	4b88      	ldr	r3, [pc, #544]	; (8003278 <HAL_RCC_OscConfig+0x618>)
 8003058:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800305a:	4b87      	ldr	r3, [pc, #540]	; (8003278 <HAL_RCC_OscConfig+0x618>)
 800305c:	2101      	movs	r1, #1
 800305e:	430a      	orrs	r2, r1
 8003060:	65da      	str	r2, [r3, #92]	; 0x5c
 8003062:	e00b      	b.n	800307c <HAL_RCC_OscConfig+0x41c>
 8003064:	4b84      	ldr	r3, [pc, #528]	; (8003278 <HAL_RCC_OscConfig+0x618>)
 8003066:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003068:	4b83      	ldr	r3, [pc, #524]	; (8003278 <HAL_RCC_OscConfig+0x618>)
 800306a:	2101      	movs	r1, #1
 800306c:	438a      	bics	r2, r1
 800306e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003070:	4b81      	ldr	r3, [pc, #516]	; (8003278 <HAL_RCC_OscConfig+0x618>)
 8003072:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003074:	4b80      	ldr	r3, [pc, #512]	; (8003278 <HAL_RCC_OscConfig+0x618>)
 8003076:	2104      	movs	r1, #4
 8003078:	438a      	bics	r2, r1
 800307a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d014      	beq.n	80030ae <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003084:	f7ff f888 	bl	8002198 <HAL_GetTick>
 8003088:	0003      	movs	r3, r0
 800308a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800308c:	e009      	b.n	80030a2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800308e:	f7ff f883 	bl	8002198 <HAL_GetTick>
 8003092:	0002      	movs	r2, r0
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	4a79      	ldr	r2, [pc, #484]	; (8003280 <HAL_RCC_OscConfig+0x620>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e0e6      	b.n	8003270 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030a2:	4b75      	ldr	r3, [pc, #468]	; (8003278 <HAL_RCC_OscConfig+0x618>)
 80030a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a6:	2202      	movs	r2, #2
 80030a8:	4013      	ands	r3, r2
 80030aa:	d0f0      	beq.n	800308e <HAL_RCC_OscConfig+0x42e>
 80030ac:	e013      	b.n	80030d6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ae:	f7ff f873 	bl	8002198 <HAL_GetTick>
 80030b2:	0003      	movs	r3, r0
 80030b4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030b6:	e009      	b.n	80030cc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b8:	f7ff f86e 	bl	8002198 <HAL_GetTick>
 80030bc:	0002      	movs	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	4a6f      	ldr	r2, [pc, #444]	; (8003280 <HAL_RCC_OscConfig+0x620>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e0d1      	b.n	8003270 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030cc:	4b6a      	ldr	r3, [pc, #424]	; (8003278 <HAL_RCC_OscConfig+0x618>)
 80030ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d0:	2202      	movs	r2, #2
 80030d2:	4013      	ands	r3, r2
 80030d4:	d1f0      	bne.n	80030b8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80030d6:	231f      	movs	r3, #31
 80030d8:	18fb      	adds	r3, r7, r3
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d105      	bne.n	80030ec <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80030e0:	4b65      	ldr	r3, [pc, #404]	; (8003278 <HAL_RCC_OscConfig+0x618>)
 80030e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030e4:	4b64      	ldr	r3, [pc, #400]	; (8003278 <HAL_RCC_OscConfig+0x618>)
 80030e6:	4967      	ldr	r1, [pc, #412]	; (8003284 <HAL_RCC_OscConfig+0x624>)
 80030e8:	400a      	ands	r2, r1
 80030ea:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d100      	bne.n	80030f6 <HAL_RCC_OscConfig+0x496>
 80030f4:	e0bb      	b.n	800326e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030f6:	4b60      	ldr	r3, [pc, #384]	; (8003278 <HAL_RCC_OscConfig+0x618>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	2238      	movs	r2, #56	; 0x38
 80030fc:	4013      	ands	r3, r2
 80030fe:	2b10      	cmp	r3, #16
 8003100:	d100      	bne.n	8003104 <HAL_RCC_OscConfig+0x4a4>
 8003102:	e07b      	b.n	80031fc <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	69db      	ldr	r3, [r3, #28]
 8003108:	2b02      	cmp	r3, #2
 800310a:	d156      	bne.n	80031ba <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800310c:	4b5a      	ldr	r3, [pc, #360]	; (8003278 <HAL_RCC_OscConfig+0x618>)
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	4b59      	ldr	r3, [pc, #356]	; (8003278 <HAL_RCC_OscConfig+0x618>)
 8003112:	495d      	ldr	r1, [pc, #372]	; (8003288 <HAL_RCC_OscConfig+0x628>)
 8003114:	400a      	ands	r2, r1
 8003116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003118:	f7ff f83e 	bl	8002198 <HAL_GetTick>
 800311c:	0003      	movs	r3, r0
 800311e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003120:	e008      	b.n	8003134 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003122:	f7ff f839 	bl	8002198 <HAL_GetTick>
 8003126:	0002      	movs	r2, r0
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e09d      	b.n	8003270 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003134:	4b50      	ldr	r3, [pc, #320]	; (8003278 <HAL_RCC_OscConfig+0x618>)
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	2380      	movs	r3, #128	; 0x80
 800313a:	049b      	lsls	r3, r3, #18
 800313c:	4013      	ands	r3, r2
 800313e:	d1f0      	bne.n	8003122 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003140:	4b4d      	ldr	r3, [pc, #308]	; (8003278 <HAL_RCC_OscConfig+0x618>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	4a51      	ldr	r2, [pc, #324]	; (800328c <HAL_RCC_OscConfig+0x62c>)
 8003146:	4013      	ands	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1a      	ldr	r2, [r3, #32]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003152:	431a      	orrs	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003158:	021b      	lsls	r3, r3, #8
 800315a:	431a      	orrs	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003160:	431a      	orrs	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800316c:	431a      	orrs	r2, r3
 800316e:	4b42      	ldr	r3, [pc, #264]	; (8003278 <HAL_RCC_OscConfig+0x618>)
 8003170:	430a      	orrs	r2, r1
 8003172:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003174:	4b40      	ldr	r3, [pc, #256]	; (8003278 <HAL_RCC_OscConfig+0x618>)
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	4b3f      	ldr	r3, [pc, #252]	; (8003278 <HAL_RCC_OscConfig+0x618>)
 800317a:	2180      	movs	r1, #128	; 0x80
 800317c:	0449      	lsls	r1, r1, #17
 800317e:	430a      	orrs	r2, r1
 8003180:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003182:	4b3d      	ldr	r3, [pc, #244]	; (8003278 <HAL_RCC_OscConfig+0x618>)
 8003184:	68da      	ldr	r2, [r3, #12]
 8003186:	4b3c      	ldr	r3, [pc, #240]	; (8003278 <HAL_RCC_OscConfig+0x618>)
 8003188:	2180      	movs	r1, #128	; 0x80
 800318a:	0549      	lsls	r1, r1, #21
 800318c:	430a      	orrs	r2, r1
 800318e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003190:	f7ff f802 	bl	8002198 <HAL_GetTick>
 8003194:	0003      	movs	r3, r0
 8003196:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003198:	e008      	b.n	80031ac <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800319a:	f7fe fffd 	bl	8002198 <HAL_GetTick>
 800319e:	0002      	movs	r2, r0
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d901      	bls.n	80031ac <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e061      	b.n	8003270 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ac:	4b32      	ldr	r3, [pc, #200]	; (8003278 <HAL_RCC_OscConfig+0x618>)
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	2380      	movs	r3, #128	; 0x80
 80031b2:	049b      	lsls	r3, r3, #18
 80031b4:	4013      	ands	r3, r2
 80031b6:	d0f0      	beq.n	800319a <HAL_RCC_OscConfig+0x53a>
 80031b8:	e059      	b.n	800326e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ba:	4b2f      	ldr	r3, [pc, #188]	; (8003278 <HAL_RCC_OscConfig+0x618>)
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	4b2e      	ldr	r3, [pc, #184]	; (8003278 <HAL_RCC_OscConfig+0x618>)
 80031c0:	4931      	ldr	r1, [pc, #196]	; (8003288 <HAL_RCC_OscConfig+0x628>)
 80031c2:	400a      	ands	r2, r1
 80031c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c6:	f7fe ffe7 	bl	8002198 <HAL_GetTick>
 80031ca:	0003      	movs	r3, r0
 80031cc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d0:	f7fe ffe2 	bl	8002198 <HAL_GetTick>
 80031d4:	0002      	movs	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e046      	b.n	8003270 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031e2:	4b25      	ldr	r3, [pc, #148]	; (8003278 <HAL_RCC_OscConfig+0x618>)
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	2380      	movs	r3, #128	; 0x80
 80031e8:	049b      	lsls	r3, r3, #18
 80031ea:	4013      	ands	r3, r2
 80031ec:	d1f0      	bne.n	80031d0 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80031ee:	4b22      	ldr	r3, [pc, #136]	; (8003278 <HAL_RCC_OscConfig+0x618>)
 80031f0:	68da      	ldr	r2, [r3, #12]
 80031f2:	4b21      	ldr	r3, [pc, #132]	; (8003278 <HAL_RCC_OscConfig+0x618>)
 80031f4:	4926      	ldr	r1, [pc, #152]	; (8003290 <HAL_RCC_OscConfig+0x630>)
 80031f6:	400a      	ands	r2, r1
 80031f8:	60da      	str	r2, [r3, #12]
 80031fa:	e038      	b.n	800326e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d101      	bne.n	8003208 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e033      	b.n	8003270 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003208:	4b1b      	ldr	r3, [pc, #108]	; (8003278 <HAL_RCC_OscConfig+0x618>)
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	2203      	movs	r2, #3
 8003212:	401a      	ands	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	429a      	cmp	r2, r3
 800321a:	d126      	bne.n	800326a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	2270      	movs	r2, #112	; 0x70
 8003220:	401a      	ands	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003226:	429a      	cmp	r2, r3
 8003228:	d11f      	bne.n	800326a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	23fe      	movs	r3, #254	; 0xfe
 800322e:	01db      	lsls	r3, r3, #7
 8003230:	401a      	ands	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003236:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003238:	429a      	cmp	r2, r3
 800323a:	d116      	bne.n	800326a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	23f8      	movs	r3, #248	; 0xf8
 8003240:	039b      	lsls	r3, r3, #14
 8003242:	401a      	ands	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003248:	429a      	cmp	r2, r3
 800324a:	d10e      	bne.n	800326a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	23e0      	movs	r3, #224	; 0xe0
 8003250:	051b      	lsls	r3, r3, #20
 8003252:	401a      	ands	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003258:	429a      	cmp	r2, r3
 800325a:	d106      	bne.n	800326a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	0f5b      	lsrs	r3, r3, #29
 8003260:	075a      	lsls	r2, r3, #29
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003266:	429a      	cmp	r2, r3
 8003268:	d001      	beq.n	800326e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e000      	b.n	8003270 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	0018      	movs	r0, r3
 8003272:	46bd      	mov	sp, r7
 8003274:	b008      	add	sp, #32
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40021000 	.word	0x40021000
 800327c:	40007000 	.word	0x40007000
 8003280:	00001388 	.word	0x00001388
 8003284:	efffffff 	.word	0xefffffff
 8003288:	feffffff 	.word	0xfeffffff
 800328c:	11c1808c 	.word	0x11c1808c
 8003290:	eefefffc 	.word	0xeefefffc

08003294 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d101      	bne.n	80032a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e0e9      	b.n	800347c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032a8:	4b76      	ldr	r3, [pc, #472]	; (8003484 <HAL_RCC_ClockConfig+0x1f0>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2207      	movs	r2, #7
 80032ae:	4013      	ands	r3, r2
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d91e      	bls.n	80032f4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b6:	4b73      	ldr	r3, [pc, #460]	; (8003484 <HAL_RCC_ClockConfig+0x1f0>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2207      	movs	r2, #7
 80032bc:	4393      	bics	r3, r2
 80032be:	0019      	movs	r1, r3
 80032c0:	4b70      	ldr	r3, [pc, #448]	; (8003484 <HAL_RCC_ClockConfig+0x1f0>)
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	430a      	orrs	r2, r1
 80032c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80032c8:	f7fe ff66 	bl	8002198 <HAL_GetTick>
 80032cc:	0003      	movs	r3, r0
 80032ce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80032d0:	e009      	b.n	80032e6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d2:	f7fe ff61 	bl	8002198 <HAL_GetTick>
 80032d6:	0002      	movs	r2, r0
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	4a6a      	ldr	r2, [pc, #424]	; (8003488 <HAL_RCC_ClockConfig+0x1f4>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e0ca      	b.n	800347c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80032e6:	4b67      	ldr	r3, [pc, #412]	; (8003484 <HAL_RCC_ClockConfig+0x1f0>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2207      	movs	r2, #7
 80032ec:	4013      	ands	r3, r2
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d1ee      	bne.n	80032d2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2202      	movs	r2, #2
 80032fa:	4013      	ands	r3, r2
 80032fc:	d015      	beq.n	800332a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2204      	movs	r2, #4
 8003304:	4013      	ands	r3, r2
 8003306:	d006      	beq.n	8003316 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003308:	4b60      	ldr	r3, [pc, #384]	; (800348c <HAL_RCC_ClockConfig+0x1f8>)
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	4b5f      	ldr	r3, [pc, #380]	; (800348c <HAL_RCC_ClockConfig+0x1f8>)
 800330e:	21e0      	movs	r1, #224	; 0xe0
 8003310:	01c9      	lsls	r1, r1, #7
 8003312:	430a      	orrs	r2, r1
 8003314:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003316:	4b5d      	ldr	r3, [pc, #372]	; (800348c <HAL_RCC_ClockConfig+0x1f8>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	4a5d      	ldr	r2, [pc, #372]	; (8003490 <HAL_RCC_ClockConfig+0x1fc>)
 800331c:	4013      	ands	r3, r2
 800331e:	0019      	movs	r1, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	4b59      	ldr	r3, [pc, #356]	; (800348c <HAL_RCC_ClockConfig+0x1f8>)
 8003326:	430a      	orrs	r2, r1
 8003328:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2201      	movs	r2, #1
 8003330:	4013      	ands	r3, r2
 8003332:	d057      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d107      	bne.n	800334c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800333c:	4b53      	ldr	r3, [pc, #332]	; (800348c <HAL_RCC_ClockConfig+0x1f8>)
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	2380      	movs	r3, #128	; 0x80
 8003342:	029b      	lsls	r3, r3, #10
 8003344:	4013      	ands	r3, r2
 8003346:	d12b      	bne.n	80033a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e097      	b.n	800347c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	2b02      	cmp	r3, #2
 8003352:	d107      	bne.n	8003364 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003354:	4b4d      	ldr	r3, [pc, #308]	; (800348c <HAL_RCC_ClockConfig+0x1f8>)
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	2380      	movs	r3, #128	; 0x80
 800335a:	049b      	lsls	r3, r3, #18
 800335c:	4013      	ands	r3, r2
 800335e:	d11f      	bne.n	80033a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e08b      	b.n	800347c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d107      	bne.n	800337c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800336c:	4b47      	ldr	r3, [pc, #284]	; (800348c <HAL_RCC_ClockConfig+0x1f8>)
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	2380      	movs	r3, #128	; 0x80
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	4013      	ands	r3, r2
 8003376:	d113      	bne.n	80033a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e07f      	b.n	800347c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	2b03      	cmp	r3, #3
 8003382:	d106      	bne.n	8003392 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003384:	4b41      	ldr	r3, [pc, #260]	; (800348c <HAL_RCC_ClockConfig+0x1f8>)
 8003386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003388:	2202      	movs	r2, #2
 800338a:	4013      	ands	r3, r2
 800338c:	d108      	bne.n	80033a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e074      	b.n	800347c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003392:	4b3e      	ldr	r3, [pc, #248]	; (800348c <HAL_RCC_ClockConfig+0x1f8>)
 8003394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003396:	2202      	movs	r2, #2
 8003398:	4013      	ands	r3, r2
 800339a:	d101      	bne.n	80033a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e06d      	b.n	800347c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033a0:	4b3a      	ldr	r3, [pc, #232]	; (800348c <HAL_RCC_ClockConfig+0x1f8>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	2207      	movs	r2, #7
 80033a6:	4393      	bics	r3, r2
 80033a8:	0019      	movs	r1, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	4b37      	ldr	r3, [pc, #220]	; (800348c <HAL_RCC_ClockConfig+0x1f8>)
 80033b0:	430a      	orrs	r2, r1
 80033b2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033b4:	f7fe fef0 	bl	8002198 <HAL_GetTick>
 80033b8:	0003      	movs	r3, r0
 80033ba:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033bc:	e009      	b.n	80033d2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033be:	f7fe feeb 	bl	8002198 <HAL_GetTick>
 80033c2:	0002      	movs	r2, r0
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	4a2f      	ldr	r2, [pc, #188]	; (8003488 <HAL_RCC_ClockConfig+0x1f4>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e054      	b.n	800347c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d2:	4b2e      	ldr	r3, [pc, #184]	; (800348c <HAL_RCC_ClockConfig+0x1f8>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	2238      	movs	r2, #56	; 0x38
 80033d8:	401a      	ands	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d1ec      	bne.n	80033be <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033e4:	4b27      	ldr	r3, [pc, #156]	; (8003484 <HAL_RCC_ClockConfig+0x1f0>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2207      	movs	r2, #7
 80033ea:	4013      	ands	r3, r2
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d21e      	bcs.n	8003430 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f2:	4b24      	ldr	r3, [pc, #144]	; (8003484 <HAL_RCC_ClockConfig+0x1f0>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2207      	movs	r2, #7
 80033f8:	4393      	bics	r3, r2
 80033fa:	0019      	movs	r1, r3
 80033fc:	4b21      	ldr	r3, [pc, #132]	; (8003484 <HAL_RCC_ClockConfig+0x1f0>)
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	430a      	orrs	r2, r1
 8003402:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003404:	f7fe fec8 	bl	8002198 <HAL_GetTick>
 8003408:	0003      	movs	r3, r0
 800340a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800340c:	e009      	b.n	8003422 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800340e:	f7fe fec3 	bl	8002198 <HAL_GetTick>
 8003412:	0002      	movs	r2, r0
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	4a1b      	ldr	r2, [pc, #108]	; (8003488 <HAL_RCC_ClockConfig+0x1f4>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e02c      	b.n	800347c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003422:	4b18      	ldr	r3, [pc, #96]	; (8003484 <HAL_RCC_ClockConfig+0x1f0>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2207      	movs	r2, #7
 8003428:	4013      	ands	r3, r2
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	429a      	cmp	r2, r3
 800342e:	d1ee      	bne.n	800340e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2204      	movs	r2, #4
 8003436:	4013      	ands	r3, r2
 8003438:	d009      	beq.n	800344e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800343a:	4b14      	ldr	r3, [pc, #80]	; (800348c <HAL_RCC_ClockConfig+0x1f8>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	4a15      	ldr	r2, [pc, #84]	; (8003494 <HAL_RCC_ClockConfig+0x200>)
 8003440:	4013      	ands	r3, r2
 8003442:	0019      	movs	r1, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68da      	ldr	r2, [r3, #12]
 8003448:	4b10      	ldr	r3, [pc, #64]	; (800348c <HAL_RCC_ClockConfig+0x1f8>)
 800344a:	430a      	orrs	r2, r1
 800344c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800344e:	f000 f829 	bl	80034a4 <HAL_RCC_GetSysClockFreq>
 8003452:	0001      	movs	r1, r0
 8003454:	4b0d      	ldr	r3, [pc, #52]	; (800348c <HAL_RCC_ClockConfig+0x1f8>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	0a1b      	lsrs	r3, r3, #8
 800345a:	220f      	movs	r2, #15
 800345c:	401a      	ands	r2, r3
 800345e:	4b0e      	ldr	r3, [pc, #56]	; (8003498 <HAL_RCC_ClockConfig+0x204>)
 8003460:	0092      	lsls	r2, r2, #2
 8003462:	58d3      	ldr	r3, [r2, r3]
 8003464:	221f      	movs	r2, #31
 8003466:	4013      	ands	r3, r2
 8003468:	000a      	movs	r2, r1
 800346a:	40da      	lsrs	r2, r3
 800346c:	4b0b      	ldr	r3, [pc, #44]	; (800349c <HAL_RCC_ClockConfig+0x208>)
 800346e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003470:	4b0b      	ldr	r3, [pc, #44]	; (80034a0 <HAL_RCC_ClockConfig+0x20c>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	0018      	movs	r0, r3
 8003476:	f7fe fe33 	bl	80020e0 <HAL_InitTick>
 800347a:	0003      	movs	r3, r0
}
 800347c:	0018      	movs	r0, r3
 800347e:	46bd      	mov	sp, r7
 8003480:	b004      	add	sp, #16
 8003482:	bd80      	pop	{r7, pc}
 8003484:	40022000 	.word	0x40022000
 8003488:	00001388 	.word	0x00001388
 800348c:	40021000 	.word	0x40021000
 8003490:	fffff0ff 	.word	0xfffff0ff
 8003494:	ffff8fff 	.word	0xffff8fff
 8003498:	080060a4 	.word	0x080060a4
 800349c:	20000008 	.word	0x20000008
 80034a0:	20000000 	.word	0x20000000

080034a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034aa:	4b3c      	ldr	r3, [pc, #240]	; (800359c <HAL_RCC_GetSysClockFreq+0xf8>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	2238      	movs	r2, #56	; 0x38
 80034b0:	4013      	ands	r3, r2
 80034b2:	d10f      	bne.n	80034d4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80034b4:	4b39      	ldr	r3, [pc, #228]	; (800359c <HAL_RCC_GetSysClockFreq+0xf8>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	0adb      	lsrs	r3, r3, #11
 80034ba:	2207      	movs	r2, #7
 80034bc:	4013      	ands	r3, r2
 80034be:	2201      	movs	r2, #1
 80034c0:	409a      	lsls	r2, r3
 80034c2:	0013      	movs	r3, r2
 80034c4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80034c6:	6839      	ldr	r1, [r7, #0]
 80034c8:	4835      	ldr	r0, [pc, #212]	; (80035a0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80034ca:	f7fc fe1b 	bl	8000104 <__udivsi3>
 80034ce:	0003      	movs	r3, r0
 80034d0:	613b      	str	r3, [r7, #16]
 80034d2:	e05d      	b.n	8003590 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034d4:	4b31      	ldr	r3, [pc, #196]	; (800359c <HAL_RCC_GetSysClockFreq+0xf8>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	2238      	movs	r2, #56	; 0x38
 80034da:	4013      	ands	r3, r2
 80034dc:	2b08      	cmp	r3, #8
 80034de:	d102      	bne.n	80034e6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034e0:	4b30      	ldr	r3, [pc, #192]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x100>)
 80034e2:	613b      	str	r3, [r7, #16]
 80034e4:	e054      	b.n	8003590 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034e6:	4b2d      	ldr	r3, [pc, #180]	; (800359c <HAL_RCC_GetSysClockFreq+0xf8>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	2238      	movs	r2, #56	; 0x38
 80034ec:	4013      	ands	r3, r2
 80034ee:	2b10      	cmp	r3, #16
 80034f0:	d138      	bne.n	8003564 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80034f2:	4b2a      	ldr	r3, [pc, #168]	; (800359c <HAL_RCC_GetSysClockFreq+0xf8>)
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	2203      	movs	r2, #3
 80034f8:	4013      	ands	r3, r2
 80034fa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034fc:	4b27      	ldr	r3, [pc, #156]	; (800359c <HAL_RCC_GetSysClockFreq+0xf8>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	091b      	lsrs	r3, r3, #4
 8003502:	2207      	movs	r2, #7
 8003504:	4013      	ands	r3, r2
 8003506:	3301      	adds	r3, #1
 8003508:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2b03      	cmp	r3, #3
 800350e:	d10d      	bne.n	800352c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003510:	68b9      	ldr	r1, [r7, #8]
 8003512:	4824      	ldr	r0, [pc, #144]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x100>)
 8003514:	f7fc fdf6 	bl	8000104 <__udivsi3>
 8003518:	0003      	movs	r3, r0
 800351a:	0019      	movs	r1, r3
 800351c:	4b1f      	ldr	r3, [pc, #124]	; (800359c <HAL_RCC_GetSysClockFreq+0xf8>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	0a1b      	lsrs	r3, r3, #8
 8003522:	227f      	movs	r2, #127	; 0x7f
 8003524:	4013      	ands	r3, r2
 8003526:	434b      	muls	r3, r1
 8003528:	617b      	str	r3, [r7, #20]
        break;
 800352a:	e00d      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800352c:	68b9      	ldr	r1, [r7, #8]
 800352e:	481c      	ldr	r0, [pc, #112]	; (80035a0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003530:	f7fc fde8 	bl	8000104 <__udivsi3>
 8003534:	0003      	movs	r3, r0
 8003536:	0019      	movs	r1, r3
 8003538:	4b18      	ldr	r3, [pc, #96]	; (800359c <HAL_RCC_GetSysClockFreq+0xf8>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	0a1b      	lsrs	r3, r3, #8
 800353e:	227f      	movs	r2, #127	; 0x7f
 8003540:	4013      	ands	r3, r2
 8003542:	434b      	muls	r3, r1
 8003544:	617b      	str	r3, [r7, #20]
        break;
 8003546:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003548:	4b14      	ldr	r3, [pc, #80]	; (800359c <HAL_RCC_GetSysClockFreq+0xf8>)
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	0f5b      	lsrs	r3, r3, #29
 800354e:	2207      	movs	r2, #7
 8003550:	4013      	ands	r3, r2
 8003552:	3301      	adds	r3, #1
 8003554:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003556:	6879      	ldr	r1, [r7, #4]
 8003558:	6978      	ldr	r0, [r7, #20]
 800355a:	f7fc fdd3 	bl	8000104 <__udivsi3>
 800355e:	0003      	movs	r3, r0
 8003560:	613b      	str	r3, [r7, #16]
 8003562:	e015      	b.n	8003590 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003564:	4b0d      	ldr	r3, [pc, #52]	; (800359c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	2238      	movs	r2, #56	; 0x38
 800356a:	4013      	ands	r3, r2
 800356c:	2b20      	cmp	r3, #32
 800356e:	d103      	bne.n	8003578 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003570:	2380      	movs	r3, #128	; 0x80
 8003572:	021b      	lsls	r3, r3, #8
 8003574:	613b      	str	r3, [r7, #16]
 8003576:	e00b      	b.n	8003590 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003578:	4b08      	ldr	r3, [pc, #32]	; (800359c <HAL_RCC_GetSysClockFreq+0xf8>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	2238      	movs	r2, #56	; 0x38
 800357e:	4013      	ands	r3, r2
 8003580:	2b18      	cmp	r3, #24
 8003582:	d103      	bne.n	800358c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003584:	23fa      	movs	r3, #250	; 0xfa
 8003586:	01db      	lsls	r3, r3, #7
 8003588:	613b      	str	r3, [r7, #16]
 800358a:	e001      	b.n	8003590 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800358c:	2300      	movs	r3, #0
 800358e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003590:	693b      	ldr	r3, [r7, #16]
}
 8003592:	0018      	movs	r0, r3
 8003594:	46bd      	mov	sp, r7
 8003596:	b006      	add	sp, #24
 8003598:	bd80      	pop	{r7, pc}
 800359a:	46c0      	nop			; (mov r8, r8)
 800359c:	40021000 	.word	0x40021000
 80035a0:	00f42400 	.word	0x00f42400
 80035a4:	007a1200 	.word	0x007a1200

080035a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e0a8      	b.n	800370c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d109      	bne.n	80035d6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	2382      	movs	r3, #130	; 0x82
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d009      	beq.n	80035e2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	61da      	str	r2, [r3, #28]
 80035d4:	e005      	b.n	80035e2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	225d      	movs	r2, #93	; 0x5d
 80035ec:	5c9b      	ldrb	r3, [r3, r2]
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d107      	bne.n	8003604 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	225c      	movs	r2, #92	; 0x5c
 80035f8:	2100      	movs	r1, #0
 80035fa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	0018      	movs	r0, r3
 8003600:	f001 f9f2 	bl	80049e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	225d      	movs	r2, #93	; 0x5d
 8003608:	2102      	movs	r1, #2
 800360a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2140      	movs	r1, #64	; 0x40
 8003618:	438a      	bics	r2, r1
 800361a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68da      	ldr	r2, [r3, #12]
 8003620:	23e0      	movs	r3, #224	; 0xe0
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	429a      	cmp	r2, r3
 8003626:	d902      	bls.n	800362e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003628:	2300      	movs	r3, #0
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	e002      	b.n	8003634 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800362e:	2380      	movs	r3, #128	; 0x80
 8003630:	015b      	lsls	r3, r3, #5
 8003632:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68da      	ldr	r2, [r3, #12]
 8003638:	23f0      	movs	r3, #240	; 0xf0
 800363a:	011b      	lsls	r3, r3, #4
 800363c:	429a      	cmp	r2, r3
 800363e:	d008      	beq.n	8003652 <HAL_SPI_Init+0xaa>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68da      	ldr	r2, [r3, #12]
 8003644:	23e0      	movs	r3, #224	; 0xe0
 8003646:	00db      	lsls	r3, r3, #3
 8003648:	429a      	cmp	r2, r3
 800364a:	d002      	beq.n	8003652 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	2382      	movs	r3, #130	; 0x82
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	401a      	ands	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6899      	ldr	r1, [r3, #8]
 8003660:	2384      	movs	r3, #132	; 0x84
 8003662:	021b      	lsls	r3, r3, #8
 8003664:	400b      	ands	r3, r1
 8003666:	431a      	orrs	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	2102      	movs	r1, #2
 800366e:	400b      	ands	r3, r1
 8003670:	431a      	orrs	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	2101      	movs	r1, #1
 8003678:	400b      	ands	r3, r1
 800367a:	431a      	orrs	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6999      	ldr	r1, [r3, #24]
 8003680:	2380      	movs	r3, #128	; 0x80
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	400b      	ands	r3, r1
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	69db      	ldr	r3, [r3, #28]
 800368c:	2138      	movs	r1, #56	; 0x38
 800368e:	400b      	ands	r3, r1
 8003690:	431a      	orrs	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	2180      	movs	r1, #128	; 0x80
 8003698:	400b      	ands	r3, r1
 800369a:	431a      	orrs	r2, r3
 800369c:	0011      	movs	r1, r2
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036a2:	2380      	movs	r3, #128	; 0x80
 80036a4:	019b      	lsls	r3, r3, #6
 80036a6:	401a      	ands	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	0c1b      	lsrs	r3, r3, #16
 80036b6:	2204      	movs	r2, #4
 80036b8:	401a      	ands	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036be:	2110      	movs	r1, #16
 80036c0:	400b      	ands	r3, r1
 80036c2:	431a      	orrs	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c8:	2108      	movs	r1, #8
 80036ca:	400b      	ands	r3, r1
 80036cc:	431a      	orrs	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68d9      	ldr	r1, [r3, #12]
 80036d2:	23f0      	movs	r3, #240	; 0xf0
 80036d4:	011b      	lsls	r3, r3, #4
 80036d6:	400b      	ands	r3, r1
 80036d8:	431a      	orrs	r2, r3
 80036da:	0011      	movs	r1, r2
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	2380      	movs	r3, #128	; 0x80
 80036e0:	015b      	lsls	r3, r3, #5
 80036e2:	401a      	ands	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	69da      	ldr	r2, [r3, #28]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4907      	ldr	r1, [pc, #28]	; (8003714 <HAL_SPI_Init+0x16c>)
 80036f8:	400a      	ands	r2, r1
 80036fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	225d      	movs	r2, #93	; 0x5d
 8003706:	2101      	movs	r1, #1
 8003708:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	0018      	movs	r0, r3
 800370e:	46bd      	mov	sp, r7
 8003710:	b004      	add	sp, #16
 8003712:	bd80      	pop	{r7, pc}
 8003714:	fffff7ff 	.word	0xfffff7ff

08003718 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	1dbb      	adds	r3, r7, #6
 8003724:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003726:	2317      	movs	r3, #23
 8003728:	18fb      	adds	r3, r7, r3
 800372a:	2200      	movs	r2, #0
 800372c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	225c      	movs	r2, #92	; 0x5c
 8003732:	5c9b      	ldrb	r3, [r3, r2]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d101      	bne.n	800373c <HAL_SPI_Transmit_DMA+0x24>
 8003738:	2302      	movs	r3, #2
 800373a:	e0e3      	b.n	8003904 <HAL_SPI_Transmit_DMA+0x1ec>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	225c      	movs	r2, #92	; 0x5c
 8003740:	2101      	movs	r1, #1
 8003742:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	225d      	movs	r2, #93	; 0x5d
 8003748:	5c9b      	ldrb	r3, [r3, r2]
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b01      	cmp	r3, #1
 800374e:	d004      	beq.n	800375a <HAL_SPI_Transmit_DMA+0x42>
  {
    errorcode = HAL_BUSY;
 8003750:	2317      	movs	r3, #23
 8003752:	18fb      	adds	r3, r7, r3
 8003754:	2202      	movs	r2, #2
 8003756:	701a      	strb	r2, [r3, #0]
    goto error;
 8003758:	e0cd      	b.n	80038f6 <HAL_SPI_Transmit_DMA+0x1de>
  }

  if ((pData == NULL) || (Size == 0U))
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d003      	beq.n	8003768 <HAL_SPI_Transmit_DMA+0x50>
 8003760:	1dbb      	adds	r3, r7, #6
 8003762:	881b      	ldrh	r3, [r3, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d104      	bne.n	8003772 <HAL_SPI_Transmit_DMA+0x5a>
  {
    errorcode = HAL_ERROR;
 8003768:	2317      	movs	r3, #23
 800376a:	18fb      	adds	r3, r7, r3
 800376c:	2201      	movs	r2, #1
 800376e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003770:	e0c1      	b.n	80038f6 <HAL_SPI_Transmit_DMA+0x1de>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	225d      	movs	r2, #93	; 0x5d
 8003776:	2103      	movs	r1, #3
 8003778:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	1dba      	adds	r2, r7, #6
 800378a:	8812      	ldrh	r2, [r2, #0]
 800378c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	1dba      	adds	r2, r7, #6
 8003792:	8812      	ldrh	r2, [r2, #0]
 8003794:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2244      	movs	r2, #68	; 0x44
 80037ac:	2100      	movs	r1, #0
 80037ae:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2246      	movs	r2, #70	; 0x46
 80037b4:	2100      	movs	r1, #0
 80037b6:	5299      	strh	r1, [r3, r2]

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	2380      	movs	r3, #128	; 0x80
 80037be:	021b      	lsls	r3, r3, #8
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d110      	bne.n	80037e6 <HAL_SPI_Transmit_DMA+0xce>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2140      	movs	r1, #64	; 0x40
 80037d0:	438a      	bics	r2, r1
 80037d2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2180      	movs	r1, #128	; 0x80
 80037e0:	01c9      	lsls	r1, r1, #7
 80037e2:	430a      	orrs	r2, r1
 80037e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ea:	4a48      	ldr	r2, [pc, #288]	; (800390c <HAL_SPI_Transmit_DMA+0x1f4>)
 80037ec:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f2:	4a47      	ldr	r2, [pc, #284]	; (8003910 <HAL_SPI_Transmit_DMA+0x1f8>)
 80037f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037fa:	4a46      	ldr	r2, [pc, #280]	; (8003914 <HAL_SPI_Transmit_DMA+0x1fc>)
 80037fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003802:	2200      	movs	r2, #0
 8003804:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4941      	ldr	r1, [pc, #260]	; (8003918 <HAL_SPI_Transmit_DMA+0x200>)
 8003812:	400a      	ands	r2, r1
 8003814:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	68da      	ldr	r2, [r3, #12]
 800381a:	23e0      	movs	r3, #224	; 0xe0
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	429a      	cmp	r2, r3
 8003820:	d82f      	bhi.n	8003882 <HAL_SPI_Transmit_DMA+0x16a>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003826:	699a      	ldr	r2, [r3, #24]
 8003828:	2380      	movs	r3, #128	; 0x80
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	429a      	cmp	r2, r3
 800382e:	d128      	bne.n	8003882 <HAL_SPI_Transmit_DMA+0x16a>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003834:	b29b      	uxth	r3, r3
 8003836:	001a      	movs	r2, r3
 8003838:	2301      	movs	r3, #1
 800383a:	4013      	ands	r3, r2
 800383c:	d10f      	bne.n	800385e <HAL_SPI_Transmit_DMA+0x146>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4933      	ldr	r1, [pc, #204]	; (8003918 <HAL_SPI_Transmit_DMA+0x200>)
 800384a:	400a      	ands	r2, r1
 800384c:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003852:	b29b      	uxth	r3, r3
 8003854:	085b      	lsrs	r3, r3, #1
 8003856:	b29a      	uxth	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800385c:	e011      	b.n	8003882 <HAL_SPI_Transmit_DMA+0x16a>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2180      	movs	r1, #128	; 0x80
 800386a:	01c9      	lsls	r1, r1, #7
 800386c:	430a      	orrs	r2, r1
 800386e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003874:	b29b      	uxth	r3, r3
 8003876:	085b      	lsrs	r3, r3, #1
 8003878:	b29b      	uxth	r3, r3
 800387a:	3301      	adds	r3, #1
 800387c:	b29a      	uxth	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388a:	0019      	movs	r1, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	330c      	adds	r3, #12
 8003892:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003898:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800389a:	f7fe fe05 	bl	80024a8 <HAL_DMA_Start_IT>
 800389e:	1e03      	subs	r3, r0, #0
 80038a0:	d00a      	beq.n	80038b8 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038a6:	2210      	movs	r2, #16
 80038a8:	431a      	orrs	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80038ae:	2317      	movs	r3, #23
 80038b0:	18fb      	adds	r3, r7, r3
 80038b2:	2201      	movs	r2, #1
 80038b4:	701a      	strb	r2, [r3, #0]

    goto error;
 80038b6:	e01e      	b.n	80038f6 <HAL_SPI_Transmit_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2240      	movs	r2, #64	; 0x40
 80038c0:	4013      	ands	r3, r2
 80038c2:	2b40      	cmp	r3, #64	; 0x40
 80038c4:	d007      	beq.n	80038d6 <HAL_SPI_Transmit_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2140      	movs	r1, #64	; 0x40
 80038d2:	430a      	orrs	r2, r1
 80038d4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2120      	movs	r1, #32
 80038e2:	430a      	orrs	r2, r1
 80038e4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2102      	movs	r1, #2
 80038f2:	430a      	orrs	r2, r1
 80038f4:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	225c      	movs	r2, #92	; 0x5c
 80038fa:	2100      	movs	r1, #0
 80038fc:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80038fe:	2317      	movs	r3, #23
 8003900:	18fb      	adds	r3, r7, r3
 8003902:	781b      	ldrb	r3, [r3, #0]
}
 8003904:	0018      	movs	r0, r3
 8003906:	46bd      	mov	sp, r7
 8003908:	b006      	add	sp, #24
 800390a:	bd80      	pop	{r7, pc}
 800390c:	080039f9 	.word	0x080039f9
 8003910:	0800394d 	.word	0x0800394d
 8003914:	08003a17 	.word	0x08003a17
 8003918:	ffffbfff 	.word	0xffffbfff

0800391c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8003924:	46c0      	nop			; (mov r8, r8)
 8003926:	46bd      	mov	sp, r7
 8003928:	b002      	add	sp, #8
 800392a:	bd80      	pop	{r7, pc}

0800392c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003934:	46c0      	nop			; (mov r8, r8)
 8003936:	46bd      	mov	sp, r7
 8003938:	b002      	add	sp, #8
 800393a:	bd80      	pop	{r7, pc}

0800393c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003944:	46c0      	nop			; (mov r8, r8)
 8003946:	46bd      	mov	sp, r7
 8003948:	b002      	add	sp, #8
 800394a:	bd80      	pop	{r7, pc}

0800394c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003958:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800395a:	f7fe fc1d 	bl	8002198 <HAL_GetTick>
 800395e:	0003      	movs	r3, r0
 8003960:	613b      	str	r3, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2220      	movs	r2, #32
 800396a:	4013      	ands	r3, r2
 800396c:	2b20      	cmp	r3, #32
 800396e:	d03c      	beq.n	80039ea <SPI_DMATransmitCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2120      	movs	r1, #32
 800397c:	438a      	bics	r2, r1
 800397e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2102      	movs	r1, #2
 800398c:	438a      	bics	r2, r1
 800398e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2164      	movs	r1, #100	; 0x64
 8003996:	0018      	movs	r0, r3
 8003998:	f000 f98e 	bl	8003cb8 <SPI_EndRxTxTransaction>
 800399c:	1e03      	subs	r3, r0, #0
 800399e:	d005      	beq.n	80039ac <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039a4:	2220      	movs	r2, #32
 80039a6:	431a      	orrs	r2, r3
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10a      	bne.n	80039ca <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039b4:	2300      	movs	r3, #0
 80039b6:	60fb      	str	r3, [r7, #12]
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	2200      	movs	r2, #0
 80039ce:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	225d      	movs	r2, #93	; 0x5d
 80039d4:	2101      	movs	r1, #1
 80039d6:	5499      	strb	r1, [r3, r2]

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d004      	beq.n	80039ea <SPI_DMATransmitCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	0018      	movs	r0, r3
 80039e4:	f7ff ffaa 	bl	800393c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80039e8:	e003      	b.n	80039f2 <SPI_DMATransmitCplt+0xa6>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	0018      	movs	r0, r3
 80039ee:	f7ff ff95 	bl	800391c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80039f2:	46bd      	mov	sp, r7
 80039f4:	b006      	add	sp, #24
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a04:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	0018      	movs	r0, r3
 8003a0a:	f7ff ff8f 	bl	800392c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003a0e:	46c0      	nop			; (mov r8, r8)
 8003a10:	46bd      	mov	sp, r7
 8003a12:	b004      	add	sp, #16
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b084      	sub	sp, #16
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a22:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2103      	movs	r1, #3
 8003a30:	438a      	bics	r2, r1
 8003a32:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a38:	2210      	movs	r2, #16
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	225d      	movs	r2, #93	; 0x5d
 8003a44:	2101      	movs	r1, #1
 8003a46:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	f7ff ff76 	bl	800393c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003a50:	46c0      	nop			; (mov r8, r8)
 8003a52:	46bd      	mov	sp, r7
 8003a54:	b004      	add	sp, #16
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b088      	sub	sp, #32
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	603b      	str	r3, [r7, #0]
 8003a64:	1dfb      	adds	r3, r7, #7
 8003a66:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a68:	f7fe fb96 	bl	8002198 <HAL_GetTick>
 8003a6c:	0002      	movs	r2, r0
 8003a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a70:	1a9b      	subs	r3, r3, r2
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	18d3      	adds	r3, r2, r3
 8003a76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a78:	f7fe fb8e 	bl	8002198 <HAL_GetTick>
 8003a7c:	0003      	movs	r3, r0
 8003a7e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a80:	4b3a      	ldr	r3, [pc, #232]	; (8003b6c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	015b      	lsls	r3, r3, #5
 8003a86:	0d1b      	lsrs	r3, r3, #20
 8003a88:	69fa      	ldr	r2, [r7, #28]
 8003a8a:	4353      	muls	r3, r2
 8003a8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a8e:	e058      	b.n	8003b42 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	3301      	adds	r3, #1
 8003a94:	d055      	beq.n	8003b42 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a96:	f7fe fb7f 	bl	8002198 <HAL_GetTick>
 8003a9a:	0002      	movs	r2, r0
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	69fa      	ldr	r2, [r7, #28]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d902      	bls.n	8003aac <SPI_WaitFlagStateUntilTimeout+0x54>
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d142      	bne.n	8003b32 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685a      	ldr	r2, [r3, #4]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	21e0      	movs	r1, #224	; 0xe0
 8003ab8:	438a      	bics	r2, r1
 8003aba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	2382      	movs	r3, #130	; 0x82
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d113      	bne.n	8003af0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	2380      	movs	r3, #128	; 0x80
 8003ace:	021b      	lsls	r3, r3, #8
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d005      	beq.n	8003ae0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	689a      	ldr	r2, [r3, #8]
 8003ad8:	2380      	movs	r3, #128	; 0x80
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d107      	bne.n	8003af0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2140      	movs	r1, #64	; 0x40
 8003aec:	438a      	bics	r2, r1
 8003aee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003af4:	2380      	movs	r3, #128	; 0x80
 8003af6:	019b      	lsls	r3, r3, #6
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d110      	bne.n	8003b1e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	491a      	ldr	r1, [pc, #104]	; (8003b70 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003b08:	400a      	ands	r2, r1
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2180      	movs	r1, #128	; 0x80
 8003b18:	0189      	lsls	r1, r1, #6
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	225d      	movs	r2, #93	; 0x5d
 8003b22:	2101      	movs	r1, #1
 8003b24:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	225c      	movs	r2, #92	; 0x5c
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e017      	b.n	8003b62 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	68ba      	ldr	r2, [r7, #8]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	425a      	negs	r2, r3
 8003b52:	4153      	adcs	r3, r2
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	001a      	movs	r2, r3
 8003b58:	1dfb      	adds	r3, r7, #7
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d197      	bne.n	8003a90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	0018      	movs	r0, r3
 8003b64:	46bd      	mov	sp, r7
 8003b66:	b008      	add	sp, #32
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	46c0      	nop			; (mov r8, r8)
 8003b6c:	20000008 	.word	0x20000008
 8003b70:	ffffdfff 	.word	0xffffdfff

08003b74 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b08a      	sub	sp, #40	; 0x28
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
 8003b80:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003b82:	2317      	movs	r3, #23
 8003b84:	18fb      	adds	r3, r7, r3
 8003b86:	2200      	movs	r2, #0
 8003b88:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003b8a:	f7fe fb05 	bl	8002198 <HAL_GetTick>
 8003b8e:	0002      	movs	r2, r0
 8003b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b92:	1a9b      	subs	r3, r3, r2
 8003b94:	683a      	ldr	r2, [r7, #0]
 8003b96:	18d3      	adds	r3, r2, r3
 8003b98:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003b9a:	f7fe fafd 	bl	8002198 <HAL_GetTick>
 8003b9e:	0003      	movs	r3, r0
 8003ba0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	330c      	adds	r3, #12
 8003ba8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003baa:	4b41      	ldr	r3, [pc, #260]	; (8003cb0 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	0013      	movs	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	189b      	adds	r3, r3, r2
 8003bb4:	00da      	lsls	r2, r3, #3
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	0d1b      	lsrs	r3, r3, #20
 8003bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bbc:	4353      	muls	r3, r2
 8003bbe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003bc0:	e068      	b.n	8003c94 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003bc2:	68ba      	ldr	r2, [r7, #8]
 8003bc4:	23c0      	movs	r3, #192	; 0xc0
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d10a      	bne.n	8003be2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d107      	bne.n	8003be2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	b2da      	uxtb	r2, r3
 8003bd8:	2117      	movs	r1, #23
 8003bda:	187b      	adds	r3, r7, r1
 8003bdc:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003bde:	187b      	adds	r3, r7, r1
 8003be0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	3301      	adds	r3, #1
 8003be6:	d055      	beq.n	8003c94 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003be8:	f7fe fad6 	bl	8002198 <HAL_GetTick>
 8003bec:	0002      	movs	r2, r0
 8003bee:	6a3b      	ldr	r3, [r7, #32]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d902      	bls.n	8003bfe <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d142      	bne.n	8003c84 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	21e0      	movs	r1, #224	; 0xe0
 8003c0a:	438a      	bics	r2, r1
 8003c0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	2382      	movs	r3, #130	; 0x82
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d113      	bne.n	8003c42 <SPI_WaitFifoStateUntilTimeout+0xce>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	689a      	ldr	r2, [r3, #8]
 8003c1e:	2380      	movs	r3, #128	; 0x80
 8003c20:	021b      	lsls	r3, r3, #8
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d005      	beq.n	8003c32 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	689a      	ldr	r2, [r3, #8]
 8003c2a:	2380      	movs	r3, #128	; 0x80
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d107      	bne.n	8003c42 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2140      	movs	r1, #64	; 0x40
 8003c3e:	438a      	bics	r2, r1
 8003c40:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c46:	2380      	movs	r3, #128	; 0x80
 8003c48:	019b      	lsls	r3, r3, #6
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d110      	bne.n	8003c70 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4916      	ldr	r1, [pc, #88]	; (8003cb4 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8003c5a:	400a      	ands	r2, r1
 8003c5c:	601a      	str	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2180      	movs	r1, #128	; 0x80
 8003c6a:	0189      	lsls	r1, r1, #6
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	225d      	movs	r2, #93	; 0x5d
 8003c74:	2101      	movs	r1, #1
 8003c76:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	225c      	movs	r2, #92	; 0x5c
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e010      	b.n	8003ca6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	3b01      	subs	r3, #1
 8003c92:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d18e      	bne.n	8003bc2 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	b00a      	add	sp, #40	; 0x28
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	46c0      	nop			; (mov r8, r8)
 8003cb0:	20000008 	.word	0x20000008
 8003cb4:	ffffdfff 	.word	0xffffdfff

08003cb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af02      	add	r7, sp, #8
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003cc4:	68ba      	ldr	r2, [r7, #8]
 8003cc6:	23c0      	movs	r3, #192	; 0xc0
 8003cc8:	0159      	lsls	r1, r3, #5
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	9300      	str	r3, [sp, #0]
 8003cd0:	0013      	movs	r3, r2
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f7ff ff4e 	bl	8003b74 <SPI_WaitFifoStateUntilTimeout>
 8003cd8:	1e03      	subs	r3, r0, #0
 8003cda:	d007      	beq.n	8003cec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e027      	b.n	8003d3c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	0013      	movs	r3, r2
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	2180      	movs	r1, #128	; 0x80
 8003cfa:	f7ff fead 	bl	8003a58 <SPI_WaitFlagStateUntilTimeout>
 8003cfe:	1e03      	subs	r3, r0, #0
 8003d00:	d007      	beq.n	8003d12 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d06:	2220      	movs	r2, #32
 8003d08:	431a      	orrs	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e014      	b.n	8003d3c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	23c0      	movs	r3, #192	; 0xc0
 8003d16:	00d9      	lsls	r1, r3, #3
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	0013      	movs	r3, r2
 8003d20:	2200      	movs	r2, #0
 8003d22:	f7ff ff27 	bl	8003b74 <SPI_WaitFifoStateUntilTimeout>
 8003d26:	1e03      	subs	r3, r0, #0
 8003d28:	d007      	beq.n	8003d3a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d2e:	2220      	movs	r2, #32
 8003d30:	431a      	orrs	r2, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e000      	b.n	8003d3c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	0018      	movs	r0, r3
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	b004      	add	sp, #16
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e04a      	b.n	8003dec <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	223d      	movs	r2, #61	; 0x3d
 8003d5a:	5c9b      	ldrb	r3, [r3, r2]
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d107      	bne.n	8003d72 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	223c      	movs	r2, #60	; 0x3c
 8003d66:	2100      	movs	r1, #0
 8003d68:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	0018      	movs	r0, r3
 8003d6e:	f000 ff9b 	bl	8004ca8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	223d      	movs	r2, #61	; 0x3d
 8003d76:	2102      	movs	r1, #2
 8003d78:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	3304      	adds	r3, #4
 8003d82:	0019      	movs	r1, r3
 8003d84:	0010      	movs	r0, r2
 8003d86:	f000 f889 	bl	8003e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2248      	movs	r2, #72	; 0x48
 8003d8e:	2101      	movs	r1, #1
 8003d90:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	223e      	movs	r2, #62	; 0x3e
 8003d96:	2101      	movs	r1, #1
 8003d98:	5499      	strb	r1, [r3, r2]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	223f      	movs	r2, #63	; 0x3f
 8003d9e:	2101      	movs	r1, #1
 8003da0:	5499      	strb	r1, [r3, r2]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2240      	movs	r2, #64	; 0x40
 8003da6:	2101      	movs	r1, #1
 8003da8:	5499      	strb	r1, [r3, r2]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2241      	movs	r2, #65	; 0x41
 8003dae:	2101      	movs	r1, #1
 8003db0:	5499      	strb	r1, [r3, r2]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2242      	movs	r2, #66	; 0x42
 8003db6:	2101      	movs	r1, #1
 8003db8:	5499      	strb	r1, [r3, r2]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2243      	movs	r2, #67	; 0x43
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2244      	movs	r2, #68	; 0x44
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	5499      	strb	r1, [r3, r2]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2245      	movs	r2, #69	; 0x45
 8003dce:	2101      	movs	r1, #1
 8003dd0:	5499      	strb	r1, [r3, r2]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2246      	movs	r2, #70	; 0x46
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	5499      	strb	r1, [r3, r2]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2247      	movs	r2, #71	; 0x47
 8003dde:	2101      	movs	r1, #1
 8003de0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	223d      	movs	r2, #61	; 0x3d
 8003de6:	2101      	movs	r1, #1
 8003de8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	0018      	movs	r0, r3
 8003dee:	46bd      	mov	sp, r7
 8003df0:	b002      	add	sp, #8
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	223d      	movs	r2, #61	; 0x3d
 8003e00:	5c9b      	ldrb	r3, [r3, r2]
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d001      	beq.n	8003e0c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e03a      	b.n	8003e82 <HAL_TIM_Base_Start+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	223d      	movs	r2, #61	; 0x3d
 8003e10:	2102      	movs	r1, #2
 8003e12:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a1c      	ldr	r2, [pc, #112]	; (8003e8c <HAL_TIM_Base_Start+0x98>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d00f      	beq.n	8003e3e <HAL_TIM_Base_Start+0x4a>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	2380      	movs	r3, #128	; 0x80
 8003e24:	05db      	lsls	r3, r3, #23
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d009      	beq.n	8003e3e <HAL_TIM_Base_Start+0x4a>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a18      	ldr	r2, [pc, #96]	; (8003e90 <HAL_TIM_Base_Start+0x9c>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d004      	beq.n	8003e3e <HAL_TIM_Base_Start+0x4a>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a16      	ldr	r2, [pc, #88]	; (8003e94 <HAL_TIM_Base_Start+0xa0>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d116      	bne.n	8003e6c <HAL_TIM_Base_Start+0x78>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	4a14      	ldr	r2, [pc, #80]	; (8003e98 <HAL_TIM_Base_Start+0xa4>)
 8003e46:	4013      	ands	r3, r2
 8003e48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2b06      	cmp	r3, #6
 8003e4e:	d016      	beq.n	8003e7e <HAL_TIM_Base_Start+0x8a>
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	2380      	movs	r3, #128	; 0x80
 8003e54:	025b      	lsls	r3, r3, #9
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d011      	beq.n	8003e7e <HAL_TIM_Base_Start+0x8a>
    {
      __HAL_TIM_ENABLE(htim);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2101      	movs	r1, #1
 8003e66:	430a      	orrs	r2, r1
 8003e68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e6a:	e008      	b.n	8003e7e <HAL_TIM_Base_Start+0x8a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2101      	movs	r1, #1
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	601a      	str	r2, [r3, #0]
 8003e7c:	e000      	b.n	8003e80 <HAL_TIM_Base_Start+0x8c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e7e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	0018      	movs	r0, r3
 8003e84:	46bd      	mov	sp, r7
 8003e86:	b004      	add	sp, #16
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	46c0      	nop			; (mov r8, r8)
 8003e8c:	40012c00 	.word	0x40012c00
 8003e90:	40000400 	.word	0x40000400
 8003e94:	40014000 	.word	0x40014000
 8003e98:	00010007 	.word	0x00010007

08003e9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a3b      	ldr	r2, [pc, #236]	; (8003f9c <TIM_Base_SetConfig+0x100>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d008      	beq.n	8003ec6 <TIM_Base_SetConfig+0x2a>
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	2380      	movs	r3, #128	; 0x80
 8003eb8:	05db      	lsls	r3, r3, #23
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d003      	beq.n	8003ec6 <TIM_Base_SetConfig+0x2a>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a37      	ldr	r2, [pc, #220]	; (8003fa0 <TIM_Base_SetConfig+0x104>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d108      	bne.n	8003ed8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2270      	movs	r2, #112	; 0x70
 8003eca:	4393      	bics	r3, r2
 8003ecc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a30      	ldr	r2, [pc, #192]	; (8003f9c <TIM_Base_SetConfig+0x100>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d018      	beq.n	8003f12 <TIM_Base_SetConfig+0x76>
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	2380      	movs	r3, #128	; 0x80
 8003ee4:	05db      	lsls	r3, r3, #23
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d013      	beq.n	8003f12 <TIM_Base_SetConfig+0x76>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a2c      	ldr	r2, [pc, #176]	; (8003fa0 <TIM_Base_SetConfig+0x104>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d00f      	beq.n	8003f12 <TIM_Base_SetConfig+0x76>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a2b      	ldr	r2, [pc, #172]	; (8003fa4 <TIM_Base_SetConfig+0x108>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d00b      	beq.n	8003f12 <TIM_Base_SetConfig+0x76>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a2a      	ldr	r2, [pc, #168]	; (8003fa8 <TIM_Base_SetConfig+0x10c>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d007      	beq.n	8003f12 <TIM_Base_SetConfig+0x76>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a29      	ldr	r2, [pc, #164]	; (8003fac <TIM_Base_SetConfig+0x110>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d003      	beq.n	8003f12 <TIM_Base_SetConfig+0x76>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a28      	ldr	r2, [pc, #160]	; (8003fb0 <TIM_Base_SetConfig+0x114>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d108      	bne.n	8003f24 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	4a27      	ldr	r2, [pc, #156]	; (8003fb4 <TIM_Base_SetConfig+0x118>)
 8003f16:	4013      	ands	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2280      	movs	r2, #128	; 0x80
 8003f28:	4393      	bics	r3, r2
 8003f2a:	001a      	movs	r2, r3
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	689a      	ldr	r2, [r3, #8]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a13      	ldr	r2, [pc, #76]	; (8003f9c <TIM_Base_SetConfig+0x100>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d00b      	beq.n	8003f6a <TIM_Base_SetConfig+0xce>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a14      	ldr	r2, [pc, #80]	; (8003fa8 <TIM_Base_SetConfig+0x10c>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d007      	beq.n	8003f6a <TIM_Base_SetConfig+0xce>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a13      	ldr	r2, [pc, #76]	; (8003fac <TIM_Base_SetConfig+0x110>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d003      	beq.n	8003f6a <TIM_Base_SetConfig+0xce>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a12      	ldr	r2, [pc, #72]	; (8003fb0 <TIM_Base_SetConfig+0x114>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d103      	bne.n	8003f72 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	691a      	ldr	r2, [r3, #16]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	4013      	ands	r3, r2
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d106      	bne.n	8003f92 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	4393      	bics	r3, r2
 8003f8c:	001a      	movs	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	611a      	str	r2, [r3, #16]
  }
}
 8003f92:	46c0      	nop			; (mov r8, r8)
 8003f94:	46bd      	mov	sp, r7
 8003f96:	b004      	add	sp, #16
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	46c0      	nop			; (mov r8, r8)
 8003f9c:	40012c00 	.word	0x40012c00
 8003fa0:	40000400 	.word	0x40000400
 8003fa4:	40002000 	.word	0x40002000
 8003fa8:	40014000 	.word	0x40014000
 8003fac:	40014400 	.word	0x40014400
 8003fb0:	40014800 	.word	0x40014800
 8003fb4:	fffffcff 	.word	0xfffffcff

08003fb8 <carStripe>:
wsfxEffect_TypeDef *carStripeCurrentFx;


void carStripeResetWaitingForCommand(void);

void carStripe(void) {
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af04      	add	r7, sp, #16

	//initialize LED stripe
	WS2812B_init(&stripe1, &hspi1, CAR_STRIPE_LAST_LED);
 8003fbe:	49d3      	ldr	r1, [pc, #844]	; (800430c <carStripe+0x354>)
 8003fc0:	4bd3      	ldr	r3, [pc, #844]	; (8004310 <carStripe+0x358>)
 8003fc2:	2260      	movs	r2, #96	; 0x60
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	f000 fea5 	bl	8004d14 <WS2812B_init>

	wsfx_init(&fxWave, &stripe1, 0, CAR_STRIPE_LAST_LED,
 8003fca:	49d1      	ldr	r1, [pc, #836]	; (8004310 <carStripe+0x358>)
 8003fcc:	48d1      	ldr	r0, [pc, #836]	; (8004314 <carStripe+0x35c>)
 8003fce:	4bd2      	ldr	r3, [pc, #840]	; (8004318 <carStripe+0x360>)
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	2360      	movs	r3, #96	; 0x60
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f001 f9a1 	bl	800531c <wsfx_init>
			wsfx_step_wave);
	wsfx_setValue(&fxWave, 255);
 8003fda:	4bce      	ldr	r3, [pc, #824]	; (8004314 <carStripe+0x35c>)
 8003fdc:	21ff      	movs	r1, #255	; 0xff
 8003fde:	0018      	movs	r0, r3
 8003fe0:	f001 f9e6 	bl	80053b0 <wsfx_setValue>
	wsfx_setPrescaler(&fxWave, 1);
 8003fe4:	4bcb      	ldr	r3, [pc, #812]	; (8004314 <carStripe+0x35c>)
 8003fe6:	2101      	movs	r1, #1
 8003fe8:	0018      	movs	r0, r3
 8003fea:	f001 f9ff 	bl	80053ec <wsfx_setPrescaler>
	wsfx_setRepeat(&fxWave, WSFX_REPEAT_MODE_ON);
 8003fee:	4bc9      	ldr	r3, [pc, #804]	; (8004314 <carStripe+0x35c>)
 8003ff0:	2101      	movs	r1, #1
 8003ff2:	0018      	movs	r0, r3
 8003ff4:	f001 f9eb 	bl	80053ce <wsfx_setRepeat>
	wsfx_setSaturation(&fxWave, 255);
 8003ff8:	4bc6      	ldr	r3, [pc, #792]	; (8004314 <carStripe+0x35c>)
 8003ffa:	21ff      	movs	r1, #255	; 0xff
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	f001 fa04 	bl	800540a <wsfx_setSaturation>
	wsfx_setShift(&fxWave, 4);
 8004002:	4bc4      	ldr	r3, [pc, #784]	; (8004314 <carStripe+0x35c>)
 8004004:	2104      	movs	r1, #4
 8004006:	0018      	movs	r0, r3
 8004008:	f001 fa0e 	bl	8005428 <wsfx_setShift>

	wsfx_init(&fxKnight, &stripe1, 41, 55, wsfx_step_movingLight);
 800400c:	49c0      	ldr	r1, [pc, #768]	; (8004310 <carStripe+0x358>)
 800400e:	48c3      	ldr	r0, [pc, #780]	; (800431c <carStripe+0x364>)
 8004010:	4bc3      	ldr	r3, [pc, #780]	; (8004320 <carStripe+0x368>)
 8004012:	9300      	str	r3, [sp, #0]
 8004014:	2337      	movs	r3, #55	; 0x37
 8004016:	2229      	movs	r2, #41	; 0x29
 8004018:	f001 f980 	bl	800531c <wsfx_init>
	wsfx_setColor(&fxKnight, 0);
 800401c:	4bbf      	ldr	r3, [pc, #764]	; (800431c <carStripe+0x364>)
 800401e:	2100      	movs	r1, #0
 8004020:	0018      	movs	r0, r3
 8004022:	f001 f9b6 	bl	8005392 <wsfx_setColor>
	wsfx_setValue(&fxKnight, 255);
 8004026:	4bbd      	ldr	r3, [pc, #756]	; (800431c <carStripe+0x364>)
 8004028:	21ff      	movs	r1, #255	; 0xff
 800402a:	0018      	movs	r0, r3
 800402c:	f001 f9c0 	bl	80053b0 <wsfx_setValue>
	wsfx_setPrescaler(&fxKnight, 50);
 8004030:	4bba      	ldr	r3, [pc, #744]	; (800431c <carStripe+0x364>)
 8004032:	2132      	movs	r1, #50	; 0x32
 8004034:	0018      	movs	r0, r3
 8004036:	f001 f9d9 	bl	80053ec <wsfx_setPrescaler>
	wsfx_setRepeat(&fxKnight, WSFX_REPEAT_MODE_ON);
 800403a:	4bb8      	ldr	r3, [pc, #736]	; (800431c <carStripe+0x364>)
 800403c:	2101      	movs	r1, #1
 800403e:	0018      	movs	r0, r3
 8004040:	f001 f9c5 	bl	80053ce <wsfx_setRepeat>

	wsfx_init(&fxGlow, &stripe1, 0, CAR_STRIPE_LAST_LED,
 8004044:	49b2      	ldr	r1, [pc, #712]	; (8004310 <carStripe+0x358>)
 8004046:	48b7      	ldr	r0, [pc, #732]	; (8004324 <carStripe+0x36c>)
 8004048:	4bb7      	ldr	r3, [pc, #732]	; (8004328 <carStripe+0x370>)
 800404a:	9300      	str	r3, [sp, #0]
 800404c:	2360      	movs	r3, #96	; 0x60
 800404e:	2200      	movs	r2, #0
 8004050:	f001 f964 	bl	800531c <wsfx_init>
			wsfx_step_constantColor);
	wsfx_setValue(&fxGlow, 255);
 8004054:	4bb3      	ldr	r3, [pc, #716]	; (8004324 <carStripe+0x36c>)
 8004056:	21ff      	movs	r1, #255	; 0xff
 8004058:	0018      	movs	r0, r3
 800405a:	f001 f9a9 	bl	80053b0 <wsfx_setValue>
	wsfx_setPrescaler(&fxGlow, 1);
 800405e:	4bb1      	ldr	r3, [pc, #708]	; (8004324 <carStripe+0x36c>)
 8004060:	2101      	movs	r1, #1
 8004062:	0018      	movs	r0, r3
 8004064:	f001 f9c2 	bl	80053ec <wsfx_setPrescaler>
	wsfx_setRepeat(&fxGlow, WSFX_REPEAT_MODE_ON);
 8004068:	4bae      	ldr	r3, [pc, #696]	; (8004324 <carStripe+0x36c>)
 800406a:	2101      	movs	r1, #1
 800406c:	0018      	movs	r0, r3
 800406e:	f001 f9ae 	bl	80053ce <wsfx_setRepeat>
	wsfx_setSaturation(&fxGlow, 255);
 8004072:	4bac      	ldr	r3, [pc, #688]	; (8004324 <carStripe+0x36c>)
 8004074:	21ff      	movs	r1, #255	; 0xff
 8004076:	0018      	movs	r0, r3
 8004078:	f001 f9c7 	bl	800540a <wsfx_setSaturation>

	wsfx_init(&fxPulse, &stripe1, 0, CAR_STRIPE_LAST_LED, wsfx_step_pulse);
 800407c:	49a4      	ldr	r1, [pc, #656]	; (8004310 <carStripe+0x358>)
 800407e:	48ab      	ldr	r0, [pc, #684]	; (800432c <carStripe+0x374>)
 8004080:	4bab      	ldr	r3, [pc, #684]	; (8004330 <carStripe+0x378>)
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	2360      	movs	r3, #96	; 0x60
 8004086:	2200      	movs	r2, #0
 8004088:	f001 f948 	bl	800531c <wsfx_init>
	wsfx_setValue(&fxPulse, 255);
 800408c:	4ba7      	ldr	r3, [pc, #668]	; (800432c <carStripe+0x374>)
 800408e:	21ff      	movs	r1, #255	; 0xff
 8004090:	0018      	movs	r0, r3
 8004092:	f001 f98d 	bl	80053b0 <wsfx_setValue>
	wsfx_setSaturation(&fxPulse, 80);
 8004096:	4ba5      	ldr	r3, [pc, #660]	; (800432c <carStripe+0x374>)
 8004098:	2150      	movs	r1, #80	; 0x50
 800409a:	0018      	movs	r0, r3
 800409c:	f001 f9b5 	bl	800540a <wsfx_setSaturation>
	wsfx_setColor(&fxPulse, 240);
 80040a0:	4ba2      	ldr	r3, [pc, #648]	; (800432c <carStripe+0x374>)
 80040a2:	21f0      	movs	r1, #240	; 0xf0
 80040a4:	0018      	movs	r0, r3
 80040a6:	f001 f974 	bl	8005392 <wsfx_setColor>
	wsfx_setPrescaler(&fxPulse, 1);
 80040aa:	4ba0      	ldr	r3, [pc, #640]	; (800432c <carStripe+0x374>)
 80040ac:	2101      	movs	r1, #1
 80040ae:	0018      	movs	r0, r3
 80040b0:	f001 f99c 	bl	80053ec <wsfx_setPrescaler>

	wsfx_init(&fxBlinker, &stripe1, 0, CAR_STRIPE_LAST_LED,
 80040b4:	4996      	ldr	r1, [pc, #600]	; (8004310 <carStripe+0x358>)
 80040b6:	489f      	ldr	r0, [pc, #636]	; (8004334 <carStripe+0x37c>)
 80040b8:	4b9f      	ldr	r3, [pc, #636]	; (8004338 <carStripe+0x380>)
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	2360      	movs	r3, #96	; 0x60
 80040be:	2200      	movs	r2, #0
 80040c0:	f001 f92c 	bl	800531c <wsfx_init>
			wsfx_step_blinker);
	wsfx_setPrescaler(&fxBlinker, 30);
 80040c4:	4b9b      	ldr	r3, [pc, #620]	; (8004334 <carStripe+0x37c>)
 80040c6:	211e      	movs	r1, #30
 80040c8:	0018      	movs	r0, r3
 80040ca:	f001 f98f 	bl	80053ec <wsfx_setPrescaler>
	wsfx_setValue(&fxBlinker, 255);
 80040ce:	4b99      	ldr	r3, [pc, #612]	; (8004334 <carStripe+0x37c>)
 80040d0:	21ff      	movs	r1, #255	; 0xff
 80040d2:	0018      	movs	r0, r3
 80040d4:	f001 f96c 	bl	80053b0 <wsfx_setValue>
	wsfx_setColor(&fxBlinker, 0);
 80040d8:	4b96      	ldr	r3, [pc, #600]	; (8004334 <carStripe+0x37c>)
 80040da:	2100      	movs	r1, #0
 80040dc:	0018      	movs	r0, r3
 80040de:	f001 f958 	bl	8005392 <wsfx_setColor>
	wsfx_setColorSecond(&fxBlinker, 240);
 80040e2:	4b94      	ldr	r3, [pc, #592]	; (8004334 <carStripe+0x37c>)
 80040e4:	21f0      	movs	r1, #240	; 0xf0
 80040e6:	0018      	movs	r0, r3
 80040e8:	f001 f9ad 	bl	8005446 <wsfx_setColorSecond>
	wsfx_setSaturation(&fxBlinker, 255);
 80040ec:	4b91      	ldr	r3, [pc, #580]	; (8004334 <carStripe+0x37c>)
 80040ee:	21ff      	movs	r1, #255	; 0xff
 80040f0:	0018      	movs	r0, r3
 80040f2:	f001 f98a 	bl	800540a <wsfx_setSaturation>


	wsfx_init(&fxStarting, &stripe1, 0, CAR_STRIPE_LAST_LED,
 80040f6:	4986      	ldr	r1, [pc, #536]	; (8004310 <carStripe+0x358>)
 80040f8:	4890      	ldr	r0, [pc, #576]	; (800433c <carStripe+0x384>)
 80040fa:	4b91      	ldr	r3, [pc, #580]	; (8004340 <carStripe+0x388>)
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	2360      	movs	r3, #96	; 0x60
 8004100:	2200      	movs	r2, #0
 8004102:	f001 f90b 	bl	800531c <wsfx_init>
			wsfx_step_starting);
	wsfx_setPrescaler(&fxStarting, 1);
 8004106:	4b8d      	ldr	r3, [pc, #564]	; (800433c <carStripe+0x384>)
 8004108:	2101      	movs	r1, #1
 800410a:	0018      	movs	r0, r3
 800410c:	f001 f96e 	bl	80053ec <wsfx_setPrescaler>
	wsfx_setValue(&fxStarting, 255);
 8004110:	4b8a      	ldr	r3, [pc, #552]	; (800433c <carStripe+0x384>)
 8004112:	21ff      	movs	r1, #255	; 0xff
 8004114:	0018      	movs	r0, r3
 8004116:	f001 f94b 	bl	80053b0 <wsfx_setValue>
	wsfx_setSaturation(&fxStarting, 50);
 800411a:	4b88      	ldr	r3, [pc, #544]	; (800433c <carStripe+0x384>)
 800411c:	2132      	movs	r1, #50	; 0x32
 800411e:	0018      	movs	r0, r3
 8004120:	f001 f973 	bl	800540a <wsfx_setSaturation>
	wsfx_setColor(&fxStarting, 240);
 8004124:	4b85      	ldr	r3, [pc, #532]	; (800433c <carStripe+0x384>)
 8004126:	21f0      	movs	r1, #240	; 0xf0
 8004128:	0018      	movs	r0, r3
 800412a:	f001 f932 	bl	8005392 <wsfx_setColor>

	wsfx_init(&fxWarp, &stripe1, 0, CAR_STRIPE_LAST_LED,
 800412e:	4978      	ldr	r1, [pc, #480]	; (8004310 <carStripe+0x358>)
 8004130:	4884      	ldr	r0, [pc, #528]	; (8004344 <carStripe+0x38c>)
 8004132:	4b85      	ldr	r3, [pc, #532]	; (8004348 <carStripe+0x390>)
 8004134:	9300      	str	r3, [sp, #0]
 8004136:	2360      	movs	r3, #96	; 0x60
 8004138:	2200      	movs	r2, #0
 800413a:	f001 f8ef 	bl	800531c <wsfx_init>
			wsfx_step_warpHalf);
	wsfx_setPrescaler(&fxWarp, 2);
 800413e:	4b81      	ldr	r3, [pc, #516]	; (8004344 <carStripe+0x38c>)
 8004140:	2102      	movs	r1, #2
 8004142:	0018      	movs	r0, r3
 8004144:	f001 f952 	bl	80053ec <wsfx_setPrescaler>
	wsfx_setValue(&fxWarp, 255);
 8004148:	4b7e      	ldr	r3, [pc, #504]	; (8004344 <carStripe+0x38c>)
 800414a:	21ff      	movs	r1, #255	; 0xff
 800414c:	0018      	movs	r0, r3
 800414e:	f001 f92f 	bl	80053b0 <wsfx_setValue>
	wsfx_setSaturation(&fxWarp, 0);
 8004152:	4b7c      	ldr	r3, [pc, #496]	; (8004344 <carStripe+0x38c>)
 8004154:	2100      	movs	r1, #0
 8004156:	0018      	movs	r0, r3
 8004158:	f001 f957 	bl	800540a <wsfx_setSaturation>
	wsfx_setRepeat(&fxWarp, WSFX_REPEAT_MODE_ON);
 800415c:	4b79      	ldr	r3, [pc, #484]	; (8004344 <carStripe+0x38c>)
 800415e:	2101      	movs	r1, #1
 8004160:	0018      	movs	r0, r3
 8004162:	f001 f934 	bl	80053ce <wsfx_setRepeat>

	//init receiver
	radio433_receiverInit(&radio, RADIO433_BARTS_FRAMELENGTH,
 8004166:	4a79      	ldr	r2, [pc, #484]	; (800434c <carStripe+0x394>)
 8004168:	4879      	ldr	r0, [pc, #484]	; (8004350 <carStripe+0x398>)
 800416a:	23ff      	movs	r3, #255	; 0xff
 800416c:	9301      	str	r3, [sp, #4]
 800416e:	2300      	movs	r3, #0
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	0013      	movs	r3, r2
 8004174:	2208      	movs	r2, #8
 8004176:	2120      	movs	r1, #32
 8004178:	f000 faa4 	bl	80046c4 <radio433_receiverInit>
	RADIO433_BARTS_ID_SHIFT,
	RADIO433_BARTS_ID_MASK, RADIO433_BARTS_DATA_SHIFT,
	RADIO433_BARTS_DATA_MASK);
	//attach pin for receiver
	radio433_receiverAttach(&radio, RADIO_RX_GPIO_Port, RADIO_RX_Pin, &htim16);
 800417c:	4b75      	ldr	r3, [pc, #468]	; (8004354 <carStripe+0x39c>)
 800417e:	4976      	ldr	r1, [pc, #472]	; (8004358 <carStripe+0x3a0>)
 8004180:	4873      	ldr	r0, [pc, #460]	; (8004350 <carStripe+0x398>)
 8004182:	2204      	movs	r2, #4
 8004184:	f000 fad9 	bl	800473a <radio433_receiverAttach>

	//init remote
	radio433_transmitterInit(&remote, 14854373, RADIO433_BARTS_FRAMELENGTH,
 8004188:	4974      	ldr	r1, [pc, #464]	; (800435c <carStripe+0x3a4>)
 800418a:	4875      	ldr	r0, [pc, #468]	; (8004360 <carStripe+0x3a8>)
 800418c:	23ff      	movs	r3, #255	; 0xff
 800418e:	9302      	str	r3, [sp, #8]
 8004190:	2300      	movs	r3, #0
 8004192:	9301      	str	r3, [sp, #4]
 8004194:	4b6d      	ldr	r3, [pc, #436]	; (800434c <carStripe+0x394>)
 8004196:	9300      	str	r3, [sp, #0]
 8004198:	2308      	movs	r3, #8
 800419a:	2220      	movs	r2, #32
 800419c:	f000 fbb2 	bl	8004904 <radio433_transmitterInit>

	while (1) {



		carStripeButtonData = radio433_receiverReadData(&radio, &remote);
 80041a0:	4a6f      	ldr	r2, [pc, #444]	; (8004360 <carStripe+0x3a8>)
 80041a2:	4b6b      	ldr	r3, [pc, #428]	; (8004350 <carStripe+0x398>)
 80041a4:	0011      	movs	r1, r2
 80041a6:	0018      	movs	r0, r3
 80041a8:	f000 faf5 	bl	8004796 <radio433_receiverReadData>
 80041ac:	0002      	movs	r2, r0
 80041ae:	4b6d      	ldr	r3, [pc, #436]	; (8004364 <carStripe+0x3ac>)
 80041b0:	601a      	str	r2, [r3, #0]

		if(carStripeButtonData != 0){
 80041b2:	4b6c      	ldr	r3, [pc, #432]	; (8004364 <carStripe+0x3ac>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d008      	beq.n	80041cc <carStripe+0x214>
			HAL_GPIO_WritePin(LED_HB_GPIO_Port, LED_HB_Pin, GPIO_PIN_SET);
 80041ba:	2380      	movs	r3, #128	; 0x80
 80041bc:	0059      	lsls	r1, r3, #1
 80041be:	23a0      	movs	r3, #160	; 0xa0
 80041c0:	05db      	lsls	r3, r3, #23
 80041c2:	2201      	movs	r2, #1
 80041c4:	0018      	movs	r0, r3
 80041c6:	f7fe fcc4 	bl	8002b52 <HAL_GPIO_WritePin>
 80041ca:	e007      	b.n	80041dc <carStripe+0x224>
		}else{
			HAL_GPIO_WritePin(LED_HB_GPIO_Port, LED_HB_Pin, GPIO_PIN_RESET);
 80041cc:	2380      	movs	r3, #128	; 0x80
 80041ce:	0059      	lsls	r1, r3, #1
 80041d0:	23a0      	movs	r3, #160	; 0xa0
 80041d2:	05db      	lsls	r3, r3, #23
 80041d4:	2200      	movs	r2, #0
 80041d6:	0018      	movs	r0, r3
 80041d8:	f7fe fcbb 	bl	8002b52 <HAL_GPIO_WritePin>
		}

		if (carStripeButtonData == RADIO433_BARTS_BUTTON_D) {
 80041dc:	4b61      	ldr	r3, [pc, #388]	; (8004364 <carStripe+0x3ac>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2b0e      	cmp	r3, #14
 80041e2:	d106      	bne.n	80041f2 <carStripe+0x23a>

			if (carStripeCommand == 0)
 80041e4:	4b60      	ldr	r3, [pc, #384]	; (8004368 <carStripe+0x3b0>)
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d102      	bne.n	80041f2 <carStripe+0x23a>
				carStripeCommand = 1;
 80041ec:	4b5e      	ldr	r3, [pc, #376]	; (8004368 <carStripe+0x3b0>)
 80041ee:	2201      	movs	r2, #1
 80041f0:	701a      	strb	r2, [r3, #0]

		}

		if (carStripeButtonData == RADIO433_BARTS_BUTTON_C) {
 80041f2:	4b5c      	ldr	r3, [pc, #368]	; (8004364 <carStripe+0x3ac>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2b0d      	cmp	r3, #13
 80041f8:	d11c      	bne.n	8004234 <carStripe+0x27c>

//			carStripeButtonReadPrescaler = 1;

			carStripeColor += 2;
 80041fa:	4b5c      	ldr	r3, [pc, #368]	; (800436c <carStripe+0x3b4>)
 80041fc:	881b      	ldrh	r3, [r3, #0]
 80041fe:	3302      	adds	r3, #2
 8004200:	b29a      	uxth	r2, r3
 8004202:	4b5a      	ldr	r3, [pc, #360]	; (800436c <carStripe+0x3b4>)
 8004204:	801a      	strh	r2, [r3, #0]

			if (carStripeColor >= 360)
 8004206:	4b59      	ldr	r3, [pc, #356]	; (800436c <carStripe+0x3b4>)
 8004208:	881a      	ldrh	r2, [r3, #0]
 800420a:	23b4      	movs	r3, #180	; 0xb4
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	429a      	cmp	r2, r3
 8004210:	d302      	bcc.n	8004218 <carStripe+0x260>
				carStripeColor = 0;
 8004212:	4b56      	ldr	r3, [pc, #344]	; (800436c <carStripe+0x3b4>)
 8004214:	2200      	movs	r2, #0
 8004216:	801a      	strh	r2, [r3, #0]

			wsfx_setColor(&fxKnight, carStripeColor);
 8004218:	4b54      	ldr	r3, [pc, #336]	; (800436c <carStripe+0x3b4>)
 800421a:	881a      	ldrh	r2, [r3, #0]
 800421c:	4b3f      	ldr	r3, [pc, #252]	; (800431c <carStripe+0x364>)
 800421e:	0011      	movs	r1, r2
 8004220:	0018      	movs	r0, r3
 8004222:	f001 f8b6 	bl	8005392 <wsfx_setColor>
			wsfx_setColor(&fxGlow, carStripeColor);
 8004226:	4b51      	ldr	r3, [pc, #324]	; (800436c <carStripe+0x3b4>)
 8004228:	881a      	ldrh	r2, [r3, #0]
 800422a:	4b3e      	ldr	r3, [pc, #248]	; (8004324 <carStripe+0x36c>)
 800422c:	0011      	movs	r1, r2
 800422e:	0018      	movs	r0, r3
 8004230:	f001 f8af 	bl	8005392 <wsfx_setColor>

		}

		if (carStripeButtonData == RADIO433_BARTS_BUTTON_B) {
 8004234:	4b4b      	ldr	r3, [pc, #300]	; (8004364 <carStripe+0x3ac>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2b0b      	cmp	r3, #11
 800423a:	d120      	bne.n	800427e <carStripe+0x2c6>

			if (carStripeCommand) {
 800423c:	4b4a      	ldr	r3, [pc, #296]	; (8004368 <carStripe+0x3b0>)
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d019      	beq.n	8004278 <carStripe+0x2c0>
				wsfx_stop(carStripeCurrentFx);
 8004244:	4b4a      	ldr	r3, [pc, #296]	; (8004370 <carStripe+0x3b8>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	0018      	movs	r0, r3
 800424a:	f001 f916 	bl	800547a <wsfx_stop>
				carStripeEffectNumber++;
 800424e:	4b49      	ldr	r3, [pc, #292]	; (8004374 <carStripe+0x3bc>)
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	b25b      	sxtb	r3, r3
 8004254:	b2db      	uxtb	r3, r3
 8004256:	3301      	adds	r3, #1
 8004258:	b2db      	uxtb	r3, r3
 800425a:	b25a      	sxtb	r2, r3
 800425c:	4b45      	ldr	r3, [pc, #276]	; (8004374 <carStripe+0x3bc>)
 800425e:	701a      	strb	r2, [r3, #0]
				if (carStripeEffectNumber > CAR_STRIPE_EFFECTS)
 8004260:	4b44      	ldr	r3, [pc, #272]	; (8004374 <carStripe+0x3bc>)
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	b25b      	sxtb	r3, r3
 8004266:	2b07      	cmp	r3, #7
 8004268:	dd02      	ble.n	8004270 <carStripe+0x2b8>
					carStripeEffectNumber = CAR_STRIPE_EFFECTS;
 800426a:	4b42      	ldr	r3, [pc, #264]	; (8004374 <carStripe+0x3bc>)
 800426c:	2207      	movs	r2, #7
 800426e:	701a      	strb	r2, [r3, #0]

				carStripeCommand = 0;
 8004270:	4b3d      	ldr	r3, [pc, #244]	; (8004368 <carStripe+0x3b0>)
 8004272:	2200      	movs	r2, #0
 8004274:	701a      	strb	r2, [r3, #0]
 8004276:	e002      	b.n	800427e <carStripe+0x2c6>

			} else {
				carStripeStopFlag = 1;
 8004278:	4b3f      	ldr	r3, [pc, #252]	; (8004378 <carStripe+0x3c0>)
 800427a:	2201      	movs	r2, #1
 800427c:	701a      	strb	r2, [r3, #0]
			}

		}

		if (carStripeButtonData == RADIO433_BARTS_BUTTON_A) {
 800427e:	4b39      	ldr	r3, [pc, #228]	; (8004364 <carStripe+0x3ac>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2b07      	cmp	r3, #7
 8004284:	d120      	bne.n	80042c8 <carStripe+0x310>

			if (carStripeCommand) {
 8004286:	4b38      	ldr	r3, [pc, #224]	; (8004368 <carStripe+0x3b0>)
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d019      	beq.n	80042c2 <carStripe+0x30a>
				wsfx_stop(carStripeCurrentFx);
 800428e:	4b38      	ldr	r3, [pc, #224]	; (8004370 <carStripe+0x3b8>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	0018      	movs	r0, r3
 8004294:	f001 f8f1 	bl	800547a <wsfx_stop>
				carStripeEffectNumber--;
 8004298:	4b36      	ldr	r3, [pc, #216]	; (8004374 <carStripe+0x3bc>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	b25b      	sxtb	r3, r3
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	3b01      	subs	r3, #1
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	b25a      	sxtb	r2, r3
 80042a6:	4b33      	ldr	r3, [pc, #204]	; (8004374 <carStripe+0x3bc>)
 80042a8:	701a      	strb	r2, [r3, #0]
				if (carStripeEffectNumber < 0)
 80042aa:	4b32      	ldr	r3, [pc, #200]	; (8004374 <carStripe+0x3bc>)
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	b25b      	sxtb	r3, r3
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	da02      	bge.n	80042ba <carStripe+0x302>
					carStripeEffectNumber = 0;
 80042b4:	4b2f      	ldr	r3, [pc, #188]	; (8004374 <carStripe+0x3bc>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	701a      	strb	r2, [r3, #0]

				carStripeCommand = 0;
 80042ba:	4b2b      	ldr	r3, [pc, #172]	; (8004368 <carStripe+0x3b0>)
 80042bc:	2200      	movs	r2, #0
 80042be:	701a      	strb	r2, [r3, #0]
 80042c0:	e002      	b.n	80042c8 <carStripe+0x310>

			} else {
				carStripeStartFlag = 1;
 80042c2:	4b2e      	ldr	r3, [pc, #184]	; (800437c <carStripe+0x3c4>)
 80042c4:	2201      	movs	r2, #1
 80042c6:	701a      	strb	r2, [r3, #0]
			}

		}

		switch (carStripeEffectNumber) {
 80042c8:	4b2a      	ldr	r3, [pc, #168]	; (8004374 <carStripe+0x3bc>)
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	b25b      	sxtb	r3, r3
 80042ce:	2b06      	cmp	r3, #6
 80042d0:	d85c      	bhi.n	800438c <carStripe+0x3d4>
 80042d2:	009a      	lsls	r2, r3, #2
 80042d4:	4b2a      	ldr	r3, [pc, #168]	; (8004380 <carStripe+0x3c8>)
 80042d6:	18d3      	adds	r3, r2, r3
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	469f      	mov	pc, r3
		case 0:
			carStripeCurrentFx = &fxPulse;
 80042dc:	4b24      	ldr	r3, [pc, #144]	; (8004370 <carStripe+0x3b8>)
 80042de:	4a13      	ldr	r2, [pc, #76]	; (800432c <carStripe+0x374>)
 80042e0:	601a      	str	r2, [r3, #0]
			break;
 80042e2:	e053      	b.n	800438c <carStripe+0x3d4>
		case 1:
			carStripeCurrentFx = &fxKnight;
 80042e4:	4b22      	ldr	r3, [pc, #136]	; (8004370 <carStripe+0x3b8>)
 80042e6:	4a0d      	ldr	r2, [pc, #52]	; (800431c <carStripe+0x364>)
 80042e8:	601a      	str	r2, [r3, #0]
			break;
 80042ea:	e04f      	b.n	800438c <carStripe+0x3d4>
		case 2:
			carStripeCurrentFx = &fxStarting;
 80042ec:	4b20      	ldr	r3, [pc, #128]	; (8004370 <carStripe+0x3b8>)
 80042ee:	4a13      	ldr	r2, [pc, #76]	; (800433c <carStripe+0x384>)
 80042f0:	601a      	str	r2, [r3, #0]
			break;
 80042f2:	e04b      	b.n	800438c <carStripe+0x3d4>
		case 3:
			carStripeCurrentFx = &fxWarp;
 80042f4:	4b1e      	ldr	r3, [pc, #120]	; (8004370 <carStripe+0x3b8>)
 80042f6:	4a13      	ldr	r2, [pc, #76]	; (8004344 <carStripe+0x38c>)
 80042f8:	601a      	str	r2, [r3, #0]
			break;
 80042fa:	e047      	b.n	800438c <carStripe+0x3d4>
		case 4:
			carStripeCurrentFx = &fxWave;
 80042fc:	4b1c      	ldr	r3, [pc, #112]	; (8004370 <carStripe+0x3b8>)
 80042fe:	4a05      	ldr	r2, [pc, #20]	; (8004314 <carStripe+0x35c>)
 8004300:	601a      	str	r2, [r3, #0]
			break;
 8004302:	e043      	b.n	800438c <carStripe+0x3d4>
		case 5:
			carStripeCurrentFx = &fxGlow;
 8004304:	4b1a      	ldr	r3, [pc, #104]	; (8004370 <carStripe+0x3b8>)
 8004306:	4a07      	ldr	r2, [pc, #28]	; (8004324 <carStripe+0x36c>)
 8004308:	601a      	str	r2, [r3, #0]
			break;
 800430a:	e03f      	b.n	800438c <carStripe+0x3d4>
 800430c:	200001e8 	.word	0x200001e8
 8004310:	2000007c 	.word	0x2000007c
 8004314:	20000160 	.word	0x20000160
 8004318:	08005bc3 	.word	0x08005bc3
 800431c:	20000088 	.word	0x20000088
 8004320:	0800554f 	.word	0x0800554f
 8004324:	200000ac 	.word	0x200000ac
 8004328:	08005aa9 	.word	0x08005aa9
 800432c:	200000d0 	.word	0x200000d0
 8004330:	080056e1 	.word	0x080056e1
 8004334:	200000f4 	.word	0x200000f4
 8004338:	0800579f 	.word	0x0800579f
 800433c:	20000118 	.word	0x20000118
 8004340:	0800586d 	.word	0x0800586d
 8004344:	2000013c 	.word	0x2000013c
 8004348:	08005af3 	.word	0x08005af3
 800434c:	00ffffff 	.word	0x00ffffff
 8004350:	20000184 	.word	0x20000184
 8004354:	200002ac 	.word	0x200002ac
 8004358:	50000400 	.word	0x50000400
 800435c:	00e2a8e5 	.word	0x00e2a8e5
 8004360:	200001b0 	.word	0x200001b0
 8004364:	200001d4 	.word	0x200001d4
 8004368:	200001de 	.word	0x200001de
 800436c:	200001da 	.word	0x200001da
 8004370:	200001e4 	.word	0x200001e4
 8004374:	200001d8 	.word	0x200001d8
 8004378:	200001dd 	.word	0x200001dd
 800437c:	200001dc 	.word	0x200001dc
 8004380:	08006088 	.word	0x08006088
		case 6:
			carStripeCurrentFx = &fxBlinker;
 8004384:	4b17      	ldr	r3, [pc, #92]	; (80043e4 <carStripe+0x42c>)
 8004386:	4a18      	ldr	r2, [pc, #96]	; (80043e8 <carStripe+0x430>)
 8004388:	601a      	str	r2, [r3, #0]
			break;
 800438a:	46c0      	nop			; (mov r8, r8)
		}

		if (carStripeStartFlag) {
 800438c:	4b17      	ldr	r3, [pc, #92]	; (80043ec <carStripe+0x434>)
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d007      	beq.n	80043a4 <carStripe+0x3ec>
			wsfx_start(carStripeCurrentFx);
 8004394:	4b13      	ldr	r3, [pc, #76]	; (80043e4 <carStripe+0x42c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	0018      	movs	r0, r3
 800439a:	f001 f863 	bl	8005464 <wsfx_start>
			carStripeStartFlag = 0;
 800439e:	4b13      	ldr	r3, [pc, #76]	; (80043ec <carStripe+0x434>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	701a      	strb	r2, [r3, #0]
		}

		if (carStripeStopFlag) {
 80043a4:	4b12      	ldr	r3, [pc, #72]	; (80043f0 <carStripe+0x438>)
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d007      	beq.n	80043bc <carStripe+0x404>
			wsfx_stop(carStripeCurrentFx);
 80043ac:	4b0d      	ldr	r3, [pc, #52]	; (80043e4 <carStripe+0x42c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	0018      	movs	r0, r3
 80043b2:	f001 f862 	bl	800547a <wsfx_stop>
			carStripeStopFlag = 0;
 80043b6:	4b0e      	ldr	r3, [pc, #56]	; (80043f0 <carStripe+0x438>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	701a      	strb	r2, [r3, #0]

		}

		carStripeButtonData = 0;
 80043bc:	4b0d      	ldr	r3, [pc, #52]	; (80043f4 <carStripe+0x43c>)
 80043be:	2200      	movs	r2, #0
 80043c0:	601a      	str	r2, [r3, #0]

		wsfx_increment(7, &fxKnight, &fxGlow, &fxPulse, &fxBlinker, &fxStarting,
 80043c2:	480d      	ldr	r0, [pc, #52]	; (80043f8 <carStripe+0x440>)
 80043c4:	4a0d      	ldr	r2, [pc, #52]	; (80043fc <carStripe+0x444>)
 80043c6:	490e      	ldr	r1, [pc, #56]	; (8004400 <carStripe+0x448>)
 80043c8:	4b0e      	ldr	r3, [pc, #56]	; (8004404 <carStripe+0x44c>)
 80043ca:	9303      	str	r3, [sp, #12]
 80043cc:	4b0e      	ldr	r3, [pc, #56]	; (8004408 <carStripe+0x450>)
 80043ce:	9302      	str	r3, [sp, #8]
 80043d0:	4b0e      	ldr	r3, [pc, #56]	; (800440c <carStripe+0x454>)
 80043d2:	9301      	str	r3, [sp, #4]
 80043d4:	4b04      	ldr	r3, [pc, #16]	; (80043e8 <carStripe+0x430>)
 80043d6:	9300      	str	r3, [sp, #0]
 80043d8:	0003      	movs	r3, r0
 80043da:	2007      	movs	r0, #7
 80043dc:	f000 ff22 	bl	8005224 <wsfx_increment>
		carStripeButtonData = radio433_receiverReadData(&radio, &remote);
 80043e0:	e6de      	b.n	80041a0 <carStripe+0x1e8>
 80043e2:	46c0      	nop			; (mov r8, r8)
 80043e4:	200001e4 	.word	0x200001e4
 80043e8:	200000f4 	.word	0x200000f4
 80043ec:	200001dc 	.word	0x200001dc
 80043f0:	200001dd 	.word	0x200001dd
 80043f4:	200001d4 	.word	0x200001d4
 80043f8:	200000d0 	.word	0x200000d0
 80043fc:	200000ac 	.word	0x200000ac
 8004400:	20000088 	.word	0x20000088
 8004404:	20000160 	.word	0x20000160
 8004408:	2000013c 	.word	0x2000013c
 800440c:	20000118 	.word	0x20000118

08004410 <HAL_GPIO_EXTI_Rising_Callback>:
				&fxWarp, &fxWave);

	}

}
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	0002      	movs	r2, r0
 8004418:	1dbb      	adds	r3, r7, #6
 800441a:	801a      	strh	r2, [r3, #0]
	radio433_receiverCallbackEXTI(&radio, GPIO_Pin);
 800441c:	1dbb      	adds	r3, r7, #6
 800441e:	881a      	ldrh	r2, [r3, #0]
 8004420:	4b04      	ldr	r3, [pc, #16]	; (8004434 <HAL_GPIO_EXTI_Rising_Callback+0x24>)
 8004422:	0011      	movs	r1, r2
 8004424:	0018      	movs	r0, r3
 8004426:	f000 f9da 	bl	80047de <radio433_receiverCallbackEXTI>
}
 800442a:	46c0      	nop			; (mov r8, r8)
 800442c:	46bd      	mov	sp, r7
 800442e:	b002      	add	sp, #8
 8004430:	bd80      	pop	{r7, pc}
 8004432:	46c0      	nop			; (mov r8, r8)
 8004434:	20000184 	.word	0x20000184

08004438 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	0002      	movs	r2, r0
 8004440:	1dbb      	adds	r3, r7, #6
 8004442:	801a      	strh	r2, [r3, #0]
	radio433_receiverCallbackEXTI(&radio, GPIO_Pin);
 8004444:	1dbb      	adds	r3, r7, #6
 8004446:	881a      	ldrh	r2, [r3, #0]
 8004448:	4b04      	ldr	r3, [pc, #16]	; (800445c <HAL_GPIO_EXTI_Falling_Callback+0x24>)
 800444a:	0011      	movs	r1, r2
 800444c:	0018      	movs	r0, r3
 800444e:	f000 f9c6 	bl	80047de <radio433_receiverCallbackEXTI>
}
 8004452:	46c0      	nop			; (mov r8, r8)
 8004454:	46bd      	mov	sp, r7
 8004456:	b002      	add	sp, #8
 8004458:	bd80      	pop	{r7, pc}
 800445a:	46c0      	nop			; (mov r8, r8)
 800445c:	20000184 	.word	0x20000184

08004460 <carStripeResetWaitingForCommand>:

void carStripeResetWaitingForCommand(void) {
 8004460:	b580      	push	{r7, lr}
 8004462:	af00      	add	r7, sp, #0

	if (carStripeCommand) {
 8004464:	4b0d      	ldr	r3, [pc, #52]	; (800449c <carStripeResetWaitingForCommand+0x3c>)
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d014      	beq.n	8004496 <carStripeResetWaitingForCommand+0x36>
		carStripeCommandResetCounter++;
 800446c:	4b0c      	ldr	r3, [pc, #48]	; (80044a0 <carStripeResetWaitingForCommand+0x40>)
 800446e:	881b      	ldrh	r3, [r3, #0]
 8004470:	b29b      	uxth	r3, r3
 8004472:	3301      	adds	r3, #1
 8004474:	b29a      	uxth	r2, r3
 8004476:	4b0a      	ldr	r3, [pc, #40]	; (80044a0 <carStripeResetWaitingForCommand+0x40>)
 8004478:	801a      	strh	r2, [r3, #0]
		if (carStripeCommandResetCounter > carStripeCommandResetTime){
 800447a:	4b09      	ldr	r3, [pc, #36]	; (80044a0 <carStripeResetWaitingForCommand+0x40>)
 800447c:	881b      	ldrh	r3, [r3, #0]
 800447e:	b29a      	uxth	r2, r3
 8004480:	4b08      	ldr	r3, [pc, #32]	; (80044a4 <carStripeResetWaitingForCommand+0x44>)
 8004482:	881b      	ldrh	r3, [r3, #0]
 8004484:	b29b      	uxth	r3, r3
 8004486:	429a      	cmp	r2, r3
 8004488:	d905      	bls.n	8004496 <carStripeResetWaitingForCommand+0x36>
			carStripeCommand = 0;
 800448a:	4b04      	ldr	r3, [pc, #16]	; (800449c <carStripeResetWaitingForCommand+0x3c>)
 800448c:	2200      	movs	r2, #0
 800448e:	701a      	strb	r2, [r3, #0]
			carStripeCommandResetCounter = 0;
 8004490:	4b03      	ldr	r3, [pc, #12]	; (80044a0 <carStripeResetWaitingForCommand+0x40>)
 8004492:	2200      	movs	r2, #0
 8004494:	801a      	strh	r2, [r3, #0]
		}

	}
}
 8004496:	46c0      	nop			; (mov r8, r8)
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	200001de 	.word	0x200001de
 80044a0:	200001e0 	.word	0x200001e0
 80044a4:	20000006 	.word	0x20000006

080044a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80044ae:	4b0c      	ldr	r3, [pc, #48]	; (80044e0 <MX_DMA_Init+0x38>)
 80044b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044b2:	4b0b      	ldr	r3, [pc, #44]	; (80044e0 <MX_DMA_Init+0x38>)
 80044b4:	2101      	movs	r1, #1
 80044b6:	430a      	orrs	r2, r1
 80044b8:	639a      	str	r2, [r3, #56]	; 0x38
 80044ba:	4b09      	ldr	r3, [pc, #36]	; (80044e0 <MX_DMA_Init+0x38>)
 80044bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044be:	2201      	movs	r2, #1
 80044c0:	4013      	ands	r3, r2
 80044c2:	607b      	str	r3, [r7, #4]
 80044c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80044c6:	2200      	movs	r2, #0
 80044c8:	2100      	movs	r1, #0
 80044ca:	2009      	movs	r0, #9
 80044cc:	f7fd ff30 	bl	8002330 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80044d0:	2009      	movs	r0, #9
 80044d2:	f7fd ff42 	bl	800235a <HAL_NVIC_EnableIRQ>

}
 80044d6:	46c0      	nop			; (mov r8, r8)
 80044d8:	46bd      	mov	sp, r7
 80044da:	b002      	add	sp, #8
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	46c0      	nop			; (mov r8, r8)
 80044e0:	40021000 	.word	0x40021000

080044e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80044e4:	b590      	push	{r4, r7, lr}
 80044e6:	b089      	sub	sp, #36	; 0x24
 80044e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044ea:	240c      	movs	r4, #12
 80044ec:	193b      	adds	r3, r7, r4
 80044ee:	0018      	movs	r0, r3
 80044f0:	2314      	movs	r3, #20
 80044f2:	001a      	movs	r2, r3
 80044f4:	2100      	movs	r1, #0
 80044f6:	f001 fc8d 	bl	8005e14 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80044fa:	4b35      	ldr	r3, [pc, #212]	; (80045d0 <MX_GPIO_Init+0xec>)
 80044fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044fe:	4b34      	ldr	r3, [pc, #208]	; (80045d0 <MX_GPIO_Init+0xec>)
 8004500:	2101      	movs	r1, #1
 8004502:	430a      	orrs	r2, r1
 8004504:	635a      	str	r2, [r3, #52]	; 0x34
 8004506:	4b32      	ldr	r3, [pc, #200]	; (80045d0 <MX_GPIO_Init+0xec>)
 8004508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800450a:	2201      	movs	r2, #1
 800450c:	4013      	ands	r3, r2
 800450e:	60bb      	str	r3, [r7, #8]
 8004510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004512:	4b2f      	ldr	r3, [pc, #188]	; (80045d0 <MX_GPIO_Init+0xec>)
 8004514:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004516:	4b2e      	ldr	r3, [pc, #184]	; (80045d0 <MX_GPIO_Init+0xec>)
 8004518:	2102      	movs	r1, #2
 800451a:	430a      	orrs	r2, r1
 800451c:	635a      	str	r2, [r3, #52]	; 0x34
 800451e:	4b2c      	ldr	r3, [pc, #176]	; (80045d0 <MX_GPIO_Init+0xec>)
 8004520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004522:	2202      	movs	r2, #2
 8004524:	4013      	ands	r3, r2
 8004526:	607b      	str	r3, [r7, #4]
 8004528:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_TX_GPIO_Port, RADIO_TX_Pin, GPIO_PIN_RESET);
 800452a:	4b2a      	ldr	r3, [pc, #168]	; (80045d4 <MX_GPIO_Init+0xf0>)
 800452c:	2200      	movs	r2, #0
 800452e:	2102      	movs	r1, #2
 8004530:	0018      	movs	r0, r3
 8004532:	f7fe fb0e 	bl	8002b52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_HB_GPIO_Port, LED_HB_Pin, GPIO_PIN_RESET);
 8004536:	2380      	movs	r3, #128	; 0x80
 8004538:	0059      	lsls	r1, r3, #1
 800453a:	23a0      	movs	r3, #160	; 0xa0
 800453c:	05db      	lsls	r3, r3, #23
 800453e:	2200      	movs	r2, #0
 8004540:	0018      	movs	r0, r3
 8004542:	f7fe fb06 	bl	8002b52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_TX_Pin;
 8004546:	193b      	adds	r3, r7, r4
 8004548:	2202      	movs	r2, #2
 800454a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800454c:	193b      	adds	r3, r7, r4
 800454e:	2201      	movs	r2, #1
 8004550:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004552:	193b      	adds	r3, r7, r4
 8004554:	2200      	movs	r2, #0
 8004556:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004558:	193b      	adds	r3, r7, r4
 800455a:	2200      	movs	r2, #0
 800455c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RADIO_TX_GPIO_Port, &GPIO_InitStruct);
 800455e:	193b      	adds	r3, r7, r4
 8004560:	4a1c      	ldr	r2, [pc, #112]	; (80045d4 <MX_GPIO_Init+0xf0>)
 8004562:	0019      	movs	r1, r3
 8004564:	0010      	movs	r0, r2
 8004566:	f7fe f973 	bl	8002850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_RX_Pin;
 800456a:	0021      	movs	r1, r4
 800456c:	187b      	adds	r3, r7, r1
 800456e:	2204      	movs	r2, #4
 8004570:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004572:	187b      	adds	r3, r7, r1
 8004574:	22c4      	movs	r2, #196	; 0xc4
 8004576:	0392      	lsls	r2, r2, #14
 8004578:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800457a:	187b      	adds	r3, r7, r1
 800457c:	2201      	movs	r2, #1
 800457e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RADIO_RX_GPIO_Port, &GPIO_InitStruct);
 8004580:	000c      	movs	r4, r1
 8004582:	187b      	adds	r3, r7, r1
 8004584:	4a13      	ldr	r2, [pc, #76]	; (80045d4 <MX_GPIO_Init+0xf0>)
 8004586:	0019      	movs	r1, r3
 8004588:	0010      	movs	r0, r2
 800458a:	f7fe f961 	bl	8002850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_HB_Pin;
 800458e:	0021      	movs	r1, r4
 8004590:	187b      	adds	r3, r7, r1
 8004592:	2280      	movs	r2, #128	; 0x80
 8004594:	0052      	lsls	r2, r2, #1
 8004596:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004598:	187b      	adds	r3, r7, r1
 800459a:	2201      	movs	r2, #1
 800459c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800459e:	187b      	adds	r3, r7, r1
 80045a0:	2200      	movs	r2, #0
 80045a2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045a4:	187b      	adds	r3, r7, r1
 80045a6:	2200      	movs	r2, #0
 80045a8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_HB_GPIO_Port, &GPIO_InitStruct);
 80045aa:	187a      	adds	r2, r7, r1
 80045ac:	23a0      	movs	r3, #160	; 0xa0
 80045ae:	05db      	lsls	r3, r3, #23
 80045b0:	0011      	movs	r1, r2
 80045b2:	0018      	movs	r0, r3
 80045b4:	f7fe f94c 	bl	8002850 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80045b8:	2200      	movs	r2, #0
 80045ba:	2100      	movs	r1, #0
 80045bc:	2006      	movs	r0, #6
 80045be:	f7fd feb7 	bl	8002330 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80045c2:	2006      	movs	r0, #6
 80045c4:	f7fd fec9 	bl	800235a <HAL_NVIC_EnableIRQ>

}
 80045c8:	46c0      	nop			; (mov r8, r8)
 80045ca:	46bd      	mov	sp, r7
 80045cc:	b009      	add	sp, #36	; 0x24
 80045ce:	bd90      	pop	{r4, r7, pc}
 80045d0:	40021000 	.word	0x40021000
 80045d4:	50000400 	.word	0x50000400

080045d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80045dc:	f7fd fd60 	bl	80020a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80045e0:	f000 f80d 	bl	80045fe <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80045e4:	f7ff ff7e 	bl	80044e4 <MX_GPIO_Init>
  MX_DMA_Init();
 80045e8:	f7ff ff5e 	bl	80044a8 <MX_DMA_Init>
  MX_SPI1_Init();
 80045ec:	f000 f9be 	bl	800496c <MX_SPI1_Init>
  MX_TIM16_Init();
 80045f0:	f000 fb06 	bl	8004c00 <MX_TIM16_Init>
  MX_TIM17_Init();
 80045f4:	f000 fb2e 	bl	8004c54 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
	carStripe();
 80045f8:	f7ff fcde 	bl	8003fb8 <carStripe>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80045fc:	e7fe      	b.n	80045fc <main+0x24>

080045fe <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80045fe:	b590      	push	{r4, r7, lr}
 8004600:	b093      	sub	sp, #76	; 0x4c
 8004602:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004604:	2410      	movs	r4, #16
 8004606:	193b      	adds	r3, r7, r4
 8004608:	0018      	movs	r0, r3
 800460a:	2338      	movs	r3, #56	; 0x38
 800460c:	001a      	movs	r2, r3
 800460e:	2100      	movs	r1, #0
 8004610:	f001 fc00 	bl	8005e14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004614:	003b      	movs	r3, r7
 8004616:	0018      	movs	r0, r3
 8004618:	2310      	movs	r3, #16
 800461a:	001a      	movs	r2, r3
 800461c:	2100      	movs	r1, #0
 800461e:	f001 fbf9 	bl	8005e14 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004622:	2380      	movs	r3, #128	; 0x80
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	0018      	movs	r0, r3
 8004628:	f7fe fada 	bl	8002be0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800462c:	193b      	adds	r3, r7, r4
 800462e:	2202      	movs	r2, #2
 8004630:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004632:	193b      	adds	r3, r7, r4
 8004634:	2280      	movs	r2, #128	; 0x80
 8004636:	0052      	lsls	r2, r2, #1
 8004638:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800463a:	0021      	movs	r1, r4
 800463c:	187b      	adds	r3, r7, r1
 800463e:	2200      	movs	r2, #0
 8004640:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004642:	187b      	adds	r3, r7, r1
 8004644:	2240      	movs	r2, #64	; 0x40
 8004646:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004648:	187b      	adds	r3, r7, r1
 800464a:	2202      	movs	r2, #2
 800464c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800464e:	187b      	adds	r3, r7, r1
 8004650:	2202      	movs	r2, #2
 8004652:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8004654:	187b      	adds	r3, r7, r1
 8004656:	2200      	movs	r2, #0
 8004658:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800465a:	187b      	adds	r3, r7, r1
 800465c:	2208      	movs	r2, #8
 800465e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004660:	187b      	adds	r3, r7, r1
 8004662:	2280      	movs	r2, #128	; 0x80
 8004664:	0292      	lsls	r2, r2, #10
 8004666:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004668:	187b      	adds	r3, r7, r1
 800466a:	2280      	movs	r2, #128	; 0x80
 800466c:	0492      	lsls	r2, r2, #18
 800466e:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004670:	187b      	adds	r3, r7, r1
 8004672:	2280      	movs	r2, #128	; 0x80
 8004674:	0592      	lsls	r2, r2, #22
 8004676:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004678:	187b      	adds	r3, r7, r1
 800467a:	0018      	movs	r0, r3
 800467c:	f7fe faf0 	bl	8002c60 <HAL_RCC_OscConfig>
 8004680:	1e03      	subs	r3, r0, #0
 8004682:	d001      	beq.n	8004688 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8004684:	f000 f819 	bl	80046ba <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004688:	003b      	movs	r3, r7
 800468a:	2207      	movs	r2, #7
 800468c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800468e:	003b      	movs	r3, r7
 8004690:	2202      	movs	r2, #2
 8004692:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004694:	003b      	movs	r3, r7
 8004696:	2200      	movs	r2, #0
 8004698:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800469a:	003b      	movs	r3, r7
 800469c:	2200      	movs	r2, #0
 800469e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80046a0:	003b      	movs	r3, r7
 80046a2:	2102      	movs	r1, #2
 80046a4:	0018      	movs	r0, r3
 80046a6:	f7fe fdf5 	bl	8003294 <HAL_RCC_ClockConfig>
 80046aa:	1e03      	subs	r3, r0, #0
 80046ac:	d001      	beq.n	80046b2 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80046ae:	f000 f804 	bl	80046ba <Error_Handler>
  }
}
 80046b2:	46c0      	nop			; (mov r8, r8)
 80046b4:	46bd      	mov	sp, r7
 80046b6:	b013      	add	sp, #76	; 0x4c
 80046b8:	bd90      	pop	{r4, r7, pc}

080046ba <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80046ba:	b580      	push	{r7, lr}
 80046bc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80046be:	b672      	cpsid	i
}
 80046c0:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80046c2:	e7fe      	b.n	80046c2 <Error_Handler+0x8>

080046c4 <radio433_receiverInit>:
 * @param: right shift for data from transmitter(1 for 1527 coding)
 * @param: bit mask for data from transmitter(0xf for 1527 encoding)
 */
void radio433_receiverInit(radio433_receiverTypeDef *radio, uint8_t frameLength,
		uint8_t idShift, uint32_t idBitMask, uint8_t dataShift,
		uint32_t dataBitMask) {
 80046c4:	b590      	push	{r4, r7, lr}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	0008      	movs	r0, r1
 80046ce:	0011      	movs	r1, r2
 80046d0:	607b      	str	r3, [r7, #4]
 80046d2:	240b      	movs	r4, #11
 80046d4:	193b      	adds	r3, r7, r4
 80046d6:	1c02      	adds	r2, r0, #0
 80046d8:	701a      	strb	r2, [r3, #0]
 80046da:	200a      	movs	r0, #10
 80046dc:	183b      	adds	r3, r7, r0
 80046de:	1c0a      	adds	r2, r1, #0
 80046e0:	701a      	strb	r2, [r3, #0]

	radio->frameLength = frameLength;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	193a      	adds	r2, r7, r4
 80046e6:	7812      	ldrb	r2, [r2, #0]
 80046e8:	711a      	strb	r2, [r3, #4]

	radio->rxDataFrame = 0;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	609a      	str	r2, [r3, #8]

	radio->rxPort = RADIO433_UNDEFINED;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	60da      	str	r2, [r3, #12]
	radio->rxPin = RADIO433_UNDEFINED;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	821a      	strh	r2, [r3, #16]
	radio->timer = RADIO433_UNDEFINED;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	601a      	str	r2, [r3, #0]

	radio->actualReceivingBit = 0;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	749a      	strb	r2, [r3, #18]

	radio->idShift = idShift;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	183a      	adds	r2, r7, r0
 800470c:	7812      	ldrb	r2, [r2, #0]
 800470e:	74da      	strb	r2, [r3, #19]
	radio->dataShift = dataShift;
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	2318      	movs	r3, #24
 8004714:	2108      	movs	r1, #8
 8004716:	185b      	adds	r3, r3, r1
 8004718:	19db      	adds	r3, r3, r7
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	7513      	strb	r3, [r2, #20]

	radio->idBitMask = idBitMask;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	619a      	str	r2, [r3, #24]
	radio->dataBitMask = dataBitMask;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004728:	61da      	str	r2, [r3, #28]

	radio->skippingReceivedCounter = 0;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2228      	movs	r2, #40	; 0x28
 800472e:	2100      	movs	r1, #0
 8004730:	5499      	strb	r1, [r3, r2]

}
 8004732:	46c0      	nop			; (mov r8, r8)
 8004734:	46bd      	mov	sp, r7
 8004736:	b005      	add	sp, #20
 8004738:	bd90      	pop	{r4, r7, pc}

0800473a <radio433_receiverAttach>:
 * @param: radio struct
 * @param: port
 * @param: pin
 */
void radio433_receiverAttach(radio433_receiverTypeDef *radio,
		GPIO_TypeDef *port, uint16_t pin, TIM_HandleTypeDef *timer) {
 800473a:	b580      	push	{r7, lr}
 800473c:	b084      	sub	sp, #16
 800473e:	af00      	add	r7, sp, #0
 8004740:	60f8      	str	r0, [r7, #12]
 8004742:	60b9      	str	r1, [r7, #8]
 8004744:	603b      	str	r3, [r7, #0]
 8004746:	1dbb      	adds	r3, r7, #6
 8004748:	801a      	strh	r2, [r3, #0]
	radio->rxPort = port;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	68ba      	ldr	r2, [r7, #8]
 800474e:	60da      	str	r2, [r3, #12]
	radio->rxPin = pin;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	1dba      	adds	r2, r7, #6
 8004754:	8812      	ldrh	r2, [r2, #0]
 8004756:	821a      	strh	r2, [r3, #16]
	radio->timer = timer;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	683a      	ldr	r2, [r7, #0]
 800475c:	601a      	str	r2, [r3, #0]

	HAL_TIM_Base_Start(timer);
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	0018      	movs	r0, r3
 8004762:	f7ff fb47 	bl	8003df4 <HAL_TIM_Base_Start>
}
 8004766:	46c0      	nop			; (mov r8, r8)
 8004768:	46bd      	mov	sp, r7
 800476a:	b004      	add	sp, #16
 800476c:	bd80      	pop	{r7, pc}

0800476e <_radio433_pullData>:

static uint32_t _radio433_pullData(uint32_t dataFrame, uint8_t shift,
		uint32_t bitMask) {
 800476e:	b580      	push	{r7, lr}
 8004770:	b084      	sub	sp, #16
 8004772:	af00      	add	r7, sp, #0
 8004774:	60f8      	str	r0, [r7, #12]
 8004776:	607a      	str	r2, [r7, #4]
 8004778:	200b      	movs	r0, #11
 800477a:	183b      	adds	r3, r7, r0
 800477c:	1c0a      	adds	r2, r1, #0
 800477e:	701a      	strb	r2, [r3, #0]

	return (dataFrame >> shift) & bitMask;
 8004780:	183b      	adds	r3, r7, r0
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	40da      	lsrs	r2, r3
 8004788:	0013      	movs	r3, r2
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	4013      	ands	r3, r2

}
 800478e:	0018      	movs	r0, r3
 8004790:	46bd      	mov	sp, r7
 8004792:	b004      	add	sp, #16
 8004794:	bd80      	pop	{r7, pc}

08004796 <radio433_receiverReadData>:
 * @param: radio struct
 * @param: transmitter struct(for compare id)
 * @retval: data or 0
 */
uint32_t radio433_receiverReadData(radio433_receiverTypeDef *radio,
		radio433_transmitterTypeDef *transmitter) {
 8004796:	b580      	push	{r7, lr}
 8004798:	b084      	sub	sp, #16
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
 800479e:	6039      	str	r1, [r7, #0]

	uint32_t retval;

	if (radio->id == transmitter->id) {
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a1a      	ldr	r2, [r3, #32]
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d10d      	bne.n	80047c8 <radio433_receiverReadData+0x32>
		retval = radio->data;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	60fb      	str	r3, [r7, #12]

		//clear output
		radio->data = 0;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	625a      	str	r2, [r3, #36]	; 0x24
		radio->id = 0;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	621a      	str	r2, [r3, #32]

		//reset skipping counter
		radio->skippingReceivedCounter = RADIO433_SKIPPING_AFTER_READ;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2228      	movs	r2, #40	; 0x28
 80047c2:	2103      	movs	r1, #3
 80047c4:	5499      	strb	r1, [r3, r2]
 80047c6:	e005      	b.n	80047d4 <radio433_receiverReadData+0x3e>

	} else {
		radio->skippingReceivedCounter = 0;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2228      	movs	r2, #40	; 0x28
 80047cc:	2100      	movs	r1, #0
 80047ce:	5499      	strb	r1, [r3, r2]
		retval = 0;
 80047d0:	2300      	movs	r3, #0
 80047d2:	60fb      	str	r3, [r7, #12]
	}

	return retval;
 80047d4:	68fb      	ldr	r3, [r7, #12]

}
 80047d6:	0018      	movs	r0, r3
 80047d8:	46bd      	mov	sp, r7
 80047da:	b004      	add	sp, #16
 80047dc:	bd80      	pop	{r7, pc}

080047de <radio433_receiverCallbackEXTI>:
 *
 * @param: radio struct
 * @param: pin received from EXTI(GPIO_Pin)- for compare
 */
void radio433_receiverCallbackEXTI(radio433_receiverTypeDef *radio,
		uint16_t pin) {
 80047de:	b580      	push	{r7, lr}
 80047e0:	b082      	sub	sp, #8
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
 80047e6:	000a      	movs	r2, r1
 80047e8:	1cbb      	adds	r3, r7, #2
 80047ea:	801a      	strh	r2, [r3, #0]

	if (pin == radio->rxPin && radio->timer != RADIO433_UNDEFINED) {
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	8a1b      	ldrh	r3, [r3, #16]
 80047f0:	1cba      	adds	r2, r7, #2
 80047f2:	8812      	ldrh	r2, [r2, #0]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d000      	beq.n	80047fa <radio433_receiverCallbackEXTI+0x1c>
 80047f8:	e080      	b.n	80048fc <radio433_receiverCallbackEXTI+0x11e>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d100      	bne.n	8004804 <radio433_receiverCallbackEXTI+0x26>
 8004802:	e07b      	b.n	80048fc <radio433_receiverCallbackEXTI+0x11e>



		if (HAL_GPIO_ReadPin(radio->rxPort, radio->rxPin) == GPIO_PIN_SET) { // rising edge
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68da      	ldr	r2, [r3, #12]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	8a1b      	ldrh	r3, [r3, #16]
 800480c:	0019      	movs	r1, r3
 800480e:	0010      	movs	r0, r2
 8004810:	f7fe f982 	bl	8002b18 <HAL_GPIO_ReadPin>
 8004814:	0003      	movs	r3, r0
 8004816:	2b01      	cmp	r3, #1
 8004818:	d110      	bne.n	800483c <radio433_receiverCallbackEXTI+0x5e>

			if (radio->timer->Instance->CNT
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004822:	23fa      	movs	r3, #250	; 0xfa
 8004824:	005b      	lsls	r3, r3, #1
 8004826:	429a      	cmp	r2, r3
 8004828:	d902      	bls.n	8004830 <radio433_receiverCallbackEXTI+0x52>
					> RADIO433_CNT_FRAME_INTERVAL_TRESHOLD) {
				radio->actualReceivingBit = 0;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	749a      	strb	r2, [r3, #18]

			}
			radio->timer->Instance->CNT = 0;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2200      	movs	r2, #0
 8004838:	625a      	str	r2, [r3, #36]	; 0x24

				}
			}
		}
	}
}
 800483a:	e05f      	b.n	80048fc <radio433_receiverCallbackEXTI+0x11e>
			if (radio->timer->Instance->CNT > RADIO433_CNT_BIT_STATE_TRESHOLD) {
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004844:	2b63      	cmp	r3, #99	; 0x63
 8004846:	d90e      	bls.n	8004866 <radio433_receiverCallbackEXTI+0x88>
								<< ((radio->frameLength - 1)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	791b      	ldrb	r3, [r3, #4]
 800484c:	3b01      	subs	r3, #1
										- radio->actualReceivingBit);
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	7c92      	ldrb	r2, [r2, #18]
 8004852:	b2d2      	uxtb	r2, r2
 8004854:	1a9b      	subs	r3, r3, r2
								<< ((radio->frameLength - 1)
 8004856:	2201      	movs	r2, #1
 8004858:	409a      	lsls	r2, r3
				radio->rxDataFrame |=
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	431a      	orrs	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	609a      	str	r2, [r3, #8]
 8004864:	e00f      	b.n	8004886 <radio433_receiverCallbackEXTI+0xa8>
								<< ((radio->frameLength - 1)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	791b      	ldrb	r3, [r3, #4]
 800486a:	3b01      	subs	r3, #1
										- radio->actualReceivingBit));
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	7c92      	ldrb	r2, [r2, #18]
 8004870:	b2d2      	uxtb	r2, r2
 8004872:	1a9b      	subs	r3, r3, r2
								<< ((radio->frameLength - 1)
 8004874:	2201      	movs	r2, #1
 8004876:	409a      	lsls	r2, r3
 8004878:	0013      	movs	r3, r2
						~(1
 800487a:	43da      	mvns	r2, r3
				radio->rxDataFrame &=
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	401a      	ands	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	609a      	str	r2, [r3, #8]
			radio->actualReceivingBit++;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	7c9b      	ldrb	r3, [r3, #18]
 800488a:	b2db      	uxtb	r3, r3
 800488c:	3301      	adds	r3, #1
 800488e:	b2da      	uxtb	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	749a      	strb	r2, [r3, #18]
			if (radio->actualReceivingBit >= radio->frameLength) {
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	7c9b      	ldrb	r3, [r3, #18]
 8004898:	b2da      	uxtb	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	791b      	ldrb	r3, [r3, #4]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d32c      	bcc.n	80048fc <radio433_receiverCallbackEXTI+0x11e>
				radio->actualReceivingBit = 0;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	749a      	strb	r2, [r3, #18]
				if (radio->skippingReceivedCounter > 0)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2228      	movs	r2, #40	; 0x28
 80048ac:	5c9b      	ldrb	r3, [r3, r2]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d007      	beq.n	80048c2 <radio433_receiverCallbackEXTI+0xe4>
					radio->skippingReceivedCounter--;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2228      	movs	r2, #40	; 0x28
 80048b6:	5c9b      	ldrb	r3, [r3, r2]
 80048b8:	3b01      	subs	r3, #1
 80048ba:	b2d9      	uxtb	r1, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2228      	movs	r2, #40	; 0x28
 80048c0:	5499      	strb	r1, [r3, r2]
				if (radio->skippingReceivedCounter == 0) {
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2228      	movs	r2, #40	; 0x28
 80048c6:	5c9b      	ldrb	r3, [r3, r2]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d117      	bne.n	80048fc <radio433_receiverCallbackEXTI+0x11e>
					radio->id = _radio433_pullData(radio->rxDataFrame,
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6898      	ldr	r0, [r3, #8]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	7cd9      	ldrb	r1, [r3, #19]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	001a      	movs	r2, r3
 80048da:	f7ff ff48 	bl	800476e <_radio433_pullData>
 80048de:	0002      	movs	r2, r0
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	621a      	str	r2, [r3, #32]
					radio->data = _radio433_pullData(radio->rxDataFrame,
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6898      	ldr	r0, [r3, #8]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	7d19      	ldrb	r1, [r3, #20]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	69db      	ldr	r3, [r3, #28]
 80048f0:	001a      	movs	r2, r3
 80048f2:	f7ff ff3c 	bl	800476e <_radio433_pullData>
 80048f6:	0002      	movs	r2, r0
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	625a      	str	r2, [r3, #36]	; 0x24
}
 80048fc:	46c0      	nop			; (mov r8, r8)
 80048fe:	46bd      	mov	sp, r7
 8004900:	b002      	add	sp, #8
 8004902:	bd80      	pop	{r7, pc}

08004904 <radio433_transmitterInit>:
 * @param: data shift
 * @param: data bit mask
 */
void radio433_transmitterInit(radio433_transmitterTypeDef *transmitter,
		uint32_t id, uint8_t frameLength, uint8_t idShift, uint32_t idBitMask,
		uint8_t dataShift, uint32_t dataBitMask) {
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	0019      	movs	r1, r3
 8004910:	1dfb      	adds	r3, r7, #7
 8004912:	701a      	strb	r2, [r3, #0]
 8004914:	1dbb      	adds	r3, r7, #6
 8004916:	1c0a      	adds	r2, r1, #0
 8004918:	701a      	strb	r2, [r3, #0]

	transmitter->frameLength = frameLength;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	1dfa      	adds	r2, r7, #7
 800491e:	7812      	ldrb	r2, [r2, #0]
 8004920:	711a      	strb	r2, [r3, #4]
	transmitter->txDataFrame = 0;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	609a      	str	r2, [r3, #8]
	transmitter->id = id;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	68ba      	ldr	r2, [r7, #8]
 800492c:	60da      	str	r2, [r3, #12]
	transmitter->data = 0;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	611a      	str	r2, [r3, #16]

	transmitter->txPort = RADIO433_UNDEFINED;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	615a      	str	r2, [r3, #20]
	transmitter->txPin = RADIO433_UNDEFINED;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	831a      	strh	r2, [r3, #24]
	transmitter->timer = RADIO433_UNDEFINED;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	601a      	str	r2, [r3, #0]

	transmitter->idShift = idShift;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	1dba      	adds	r2, r7, #6
 800494a:	7812      	ldrb	r2, [r2, #0]
 800494c:	769a      	strb	r2, [r3, #26]
	transmitter->dataShift = dataShift;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	221c      	movs	r2, #28
 8004952:	18ba      	adds	r2, r7, r2
 8004954:	7812      	ldrb	r2, [r2, #0]
 8004956:	76da      	strb	r2, [r3, #27]

	transmitter->idBitMask = idBitMask;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	61da      	str	r2, [r3, #28]
	transmitter->dataBitMask = dataBitMask;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6a3a      	ldr	r2, [r7, #32]
 8004962:	621a      	str	r2, [r3, #32]

}
 8004964:	46c0      	nop			; (mov r8, r8)
 8004966:	46bd      	mov	sp, r7
 8004968:	b004      	add	sp, #16
 800496a:	bd80      	pop	{r7, pc}

0800496c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004970:	4b1b      	ldr	r3, [pc, #108]	; (80049e0 <MX_SPI1_Init+0x74>)
 8004972:	4a1c      	ldr	r2, [pc, #112]	; (80049e4 <MX_SPI1_Init+0x78>)
 8004974:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004976:	4b1a      	ldr	r3, [pc, #104]	; (80049e0 <MX_SPI1_Init+0x74>)
 8004978:	2282      	movs	r2, #130	; 0x82
 800497a:	0052      	lsls	r2, r2, #1
 800497c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800497e:	4b18      	ldr	r3, [pc, #96]	; (80049e0 <MX_SPI1_Init+0x74>)
 8004980:	2200      	movs	r2, #0
 8004982:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004984:	4b16      	ldr	r3, [pc, #88]	; (80049e0 <MX_SPI1_Init+0x74>)
 8004986:	22e0      	movs	r2, #224	; 0xe0
 8004988:	00d2      	lsls	r2, r2, #3
 800498a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800498c:	4b14      	ldr	r3, [pc, #80]	; (80049e0 <MX_SPI1_Init+0x74>)
 800498e:	2200      	movs	r2, #0
 8004990:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004992:	4b13      	ldr	r3, [pc, #76]	; (80049e0 <MX_SPI1_Init+0x74>)
 8004994:	2200      	movs	r2, #0
 8004996:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004998:	4b11      	ldr	r3, [pc, #68]	; (80049e0 <MX_SPI1_Init+0x74>)
 800499a:	2280      	movs	r2, #128	; 0x80
 800499c:	0092      	lsls	r2, r2, #2
 800499e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80049a0:	4b0f      	ldr	r3, [pc, #60]	; (80049e0 <MX_SPI1_Init+0x74>)
 80049a2:	2210      	movs	r2, #16
 80049a4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80049a6:	4b0e      	ldr	r3, [pc, #56]	; (80049e0 <MX_SPI1_Init+0x74>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80049ac:	4b0c      	ldr	r3, [pc, #48]	; (80049e0 <MX_SPI1_Init+0x74>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049b2:	4b0b      	ldr	r3, [pc, #44]	; (80049e0 <MX_SPI1_Init+0x74>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80049b8:	4b09      	ldr	r3, [pc, #36]	; (80049e0 <MX_SPI1_Init+0x74>)
 80049ba:	2207      	movs	r2, #7
 80049bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80049be:	4b08      	ldr	r3, [pc, #32]	; (80049e0 <MX_SPI1_Init+0x74>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80049c4:	4b06      	ldr	r3, [pc, #24]	; (80049e0 <MX_SPI1_Init+0x74>)
 80049c6:	2208      	movs	r2, #8
 80049c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80049ca:	4b05      	ldr	r3, [pc, #20]	; (80049e0 <MX_SPI1_Init+0x74>)
 80049cc:	0018      	movs	r0, r3
 80049ce:	f7fe fdeb 	bl	80035a8 <HAL_SPI_Init>
 80049d2:	1e03      	subs	r3, r0, #0
 80049d4:	d001      	beq.n	80049da <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80049d6:	f7ff fe70 	bl	80046ba <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80049da:	46c0      	nop			; (mov r8, r8)
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	200001e8 	.word	0x200001e8
 80049e4:	40013000 	.word	0x40013000

080049e8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80049e8:	b590      	push	{r4, r7, lr}
 80049ea:	b08b      	sub	sp, #44	; 0x2c
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049f0:	2414      	movs	r4, #20
 80049f2:	193b      	adds	r3, r7, r4
 80049f4:	0018      	movs	r0, r3
 80049f6:	2314      	movs	r3, #20
 80049f8:	001a      	movs	r2, r3
 80049fa:	2100      	movs	r1, #0
 80049fc:	f001 fa0a 	bl	8005e14 <memset>
  if(spiHandle->Instance==SPI1)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a30      	ldr	r2, [pc, #192]	; (8004ac8 <HAL_SPI_MspInit+0xe0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d15a      	bne.n	8004ac0 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004a0a:	4b30      	ldr	r3, [pc, #192]	; (8004acc <HAL_SPI_MspInit+0xe4>)
 8004a0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a0e:	4b2f      	ldr	r3, [pc, #188]	; (8004acc <HAL_SPI_MspInit+0xe4>)
 8004a10:	2180      	movs	r1, #128	; 0x80
 8004a12:	0149      	lsls	r1, r1, #5
 8004a14:	430a      	orrs	r2, r1
 8004a16:	641a      	str	r2, [r3, #64]	; 0x40
 8004a18:	4b2c      	ldr	r3, [pc, #176]	; (8004acc <HAL_SPI_MspInit+0xe4>)
 8004a1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a1c:	2380      	movs	r3, #128	; 0x80
 8004a1e:	015b      	lsls	r3, r3, #5
 8004a20:	4013      	ands	r3, r2
 8004a22:	613b      	str	r3, [r7, #16]
 8004a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a26:	4b29      	ldr	r3, [pc, #164]	; (8004acc <HAL_SPI_MspInit+0xe4>)
 8004a28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a2a:	4b28      	ldr	r3, [pc, #160]	; (8004acc <HAL_SPI_MspInit+0xe4>)
 8004a2c:	2101      	movs	r1, #1
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	635a      	str	r2, [r3, #52]	; 0x34
 8004a32:	4b26      	ldr	r3, [pc, #152]	; (8004acc <HAL_SPI_MspInit+0xe4>)
 8004a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a36:	2201      	movs	r2, #1
 8004a38:	4013      	ands	r3, r2
 8004a3a:	60fb      	str	r3, [r7, #12]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA2     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8004a3e:	0021      	movs	r1, r4
 8004a40:	187b      	adds	r3, r7, r1
 8004a42:	2206      	movs	r2, #6
 8004a44:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a46:	187b      	adds	r3, r7, r1
 8004a48:	2202      	movs	r2, #2
 8004a4a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a4c:	187b      	adds	r3, r7, r1
 8004a4e:	2200      	movs	r2, #0
 8004a50:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a52:	187b      	adds	r3, r7, r1
 8004a54:	2200      	movs	r2, #0
 8004a56:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004a58:	187b      	adds	r3, r7, r1
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a5e:	187a      	adds	r2, r7, r1
 8004a60:	23a0      	movs	r3, #160	; 0xa0
 8004a62:	05db      	lsls	r3, r3, #23
 8004a64:	0011      	movs	r1, r2
 8004a66:	0018      	movs	r0, r3
 8004a68:	f7fd fef2 	bl	8002850 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8004a6c:	4b18      	ldr	r3, [pc, #96]	; (8004ad0 <HAL_SPI_MspInit+0xe8>)
 8004a6e:	4a19      	ldr	r2, [pc, #100]	; (8004ad4 <HAL_SPI_MspInit+0xec>)
 8004a70:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8004a72:	4b17      	ldr	r3, [pc, #92]	; (8004ad0 <HAL_SPI_MspInit+0xe8>)
 8004a74:	2211      	movs	r2, #17
 8004a76:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004a78:	4b15      	ldr	r3, [pc, #84]	; (8004ad0 <HAL_SPI_MspInit+0xe8>)
 8004a7a:	2210      	movs	r2, #16
 8004a7c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a7e:	4b14      	ldr	r3, [pc, #80]	; (8004ad0 <HAL_SPI_MspInit+0xe8>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004a84:	4b12      	ldr	r3, [pc, #72]	; (8004ad0 <HAL_SPI_MspInit+0xe8>)
 8004a86:	2280      	movs	r2, #128	; 0x80
 8004a88:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a8a:	4b11      	ldr	r3, [pc, #68]	; (8004ad0 <HAL_SPI_MspInit+0xe8>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a90:	4b0f      	ldr	r3, [pc, #60]	; (8004ad0 <HAL_SPI_MspInit+0xe8>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004a96:	4b0e      	ldr	r3, [pc, #56]	; (8004ad0 <HAL_SPI_MspInit+0xe8>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004a9c:	4b0c      	ldr	r3, [pc, #48]	; (8004ad0 <HAL_SPI_MspInit+0xe8>)
 8004a9e:	2280      	movs	r2, #128	; 0x80
 8004aa0:	0192      	lsls	r2, r2, #6
 8004aa2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004aa4:	4b0a      	ldr	r3, [pc, #40]	; (8004ad0 <HAL_SPI_MspInit+0xe8>)
 8004aa6:	0018      	movs	r0, r3
 8004aa8:	f7fd fc74 	bl	8002394 <HAL_DMA_Init>
 8004aac:	1e03      	subs	r3, r0, #0
 8004aae:	d001      	beq.n	8004ab4 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8004ab0:	f7ff fe03 	bl	80046ba <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a06      	ldr	r2, [pc, #24]	; (8004ad0 <HAL_SPI_MspInit+0xe8>)
 8004ab8:	655a      	str	r2, [r3, #84]	; 0x54
 8004aba:	4b05      	ldr	r3, [pc, #20]	; (8004ad0 <HAL_SPI_MspInit+0xe8>)
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004ac0:	46c0      	nop			; (mov r8, r8)
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	b00b      	add	sp, #44	; 0x2c
 8004ac6:	bd90      	pop	{r4, r7, pc}
 8004ac8:	40013000 	.word	0x40013000
 8004acc:	40021000 	.word	0x40021000
 8004ad0:	2000024c 	.word	0x2000024c
 8004ad4:	40020008 	.word	0x40020008

08004ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ade:	4b11      	ldr	r3, [pc, #68]	; (8004b24 <HAL_MspInit+0x4c>)
 8004ae0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ae2:	4b10      	ldr	r3, [pc, #64]	; (8004b24 <HAL_MspInit+0x4c>)
 8004ae4:	2101      	movs	r1, #1
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	641a      	str	r2, [r3, #64]	; 0x40
 8004aea:	4b0e      	ldr	r3, [pc, #56]	; (8004b24 <HAL_MspInit+0x4c>)
 8004aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aee:	2201      	movs	r2, #1
 8004af0:	4013      	ands	r3, r2
 8004af2:	607b      	str	r3, [r7, #4]
 8004af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004af6:	4b0b      	ldr	r3, [pc, #44]	; (8004b24 <HAL_MspInit+0x4c>)
 8004af8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004afa:	4b0a      	ldr	r3, [pc, #40]	; (8004b24 <HAL_MspInit+0x4c>)
 8004afc:	2180      	movs	r1, #128	; 0x80
 8004afe:	0549      	lsls	r1, r1, #21
 8004b00:	430a      	orrs	r2, r1
 8004b02:	63da      	str	r2, [r3, #60]	; 0x3c
 8004b04:	4b07      	ldr	r3, [pc, #28]	; (8004b24 <HAL_MspInit+0x4c>)
 8004b06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b08:	2380      	movs	r3, #128	; 0x80
 8004b0a:	055b      	lsls	r3, r3, #21
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	603b      	str	r3, [r7, #0]
 8004b10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 8004b12:	2380      	movs	r3, #128	; 0x80
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	0018      	movs	r0, r3
 8004b18:	f7fd fb48 	bl	80021ac <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b1c:	46c0      	nop			; (mov r8, r8)
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	b002      	add	sp, #8
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	40021000 	.word	0x40021000

08004b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8004b2c:	e7fe      	b.n	8004b2c <NMI_Handler+0x4>

08004b2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b32:	e7fe      	b.n	8004b32 <HardFault_Handler+0x4>

08004b34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004b38:	46c0      	nop			; (mov r8, r8)
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004b42:	46c0      	nop			; (mov r8, r8)
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	carStripeResetWaitingForCommand();
 8004b4c:	f7ff fc88 	bl	8004460 <carStripeResetWaitingForCommand>
	wsfx_interruptCallback();
 8004b50:	f000 fcb0 	bl	80054b4 <wsfx_interruptCallback>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004b54:	f7fd fb0e 	bl	8002174 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004b58:	46c0      	nop			; (mov r8, r8)
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RADIO_RX_Pin);
 8004b62:	2004      	movs	r0, #4
 8004b64:	f7fe f812 	bl	8002b8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8004b68:	46c0      	nop			; (mov r8, r8)
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
	...

08004b70 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8004b74:	4b03      	ldr	r3, [pc, #12]	; (8004b84 <DMA1_Channel1_IRQHandler+0x14>)
 8004b76:	0018      	movs	r0, r3
 8004b78:	f7fd fd1c 	bl	80025b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004b7c:	46c0      	nop			; (mov r8, r8)
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	46c0      	nop			; (mov r8, r8)
 8004b84:	2000024c 	.word	0x2000024c

08004b88 <_sbrk>:
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	4a14      	ldr	r2, [pc, #80]	; (8004be4 <_sbrk+0x5c>)
 8004b92:	4b15      	ldr	r3, [pc, #84]	; (8004be8 <_sbrk+0x60>)
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	617b      	str	r3, [r7, #20]
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	613b      	str	r3, [r7, #16]
 8004b9c:	4b13      	ldr	r3, [pc, #76]	; (8004bec <_sbrk+0x64>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d102      	bne.n	8004baa <_sbrk+0x22>
 8004ba4:	4b11      	ldr	r3, [pc, #68]	; (8004bec <_sbrk+0x64>)
 8004ba6:	4a12      	ldr	r2, [pc, #72]	; (8004bf0 <_sbrk+0x68>)
 8004ba8:	601a      	str	r2, [r3, #0]
 8004baa:	4b10      	ldr	r3, [pc, #64]	; (8004bec <_sbrk+0x64>)
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	18d3      	adds	r3, r2, r3
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d207      	bcs.n	8004bc8 <_sbrk+0x40>
 8004bb8:	f001 f946 	bl	8005e48 <__errno>
 8004bbc:	0003      	movs	r3, r0
 8004bbe:	220c      	movs	r2, #12
 8004bc0:	601a      	str	r2, [r3, #0]
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	425b      	negs	r3, r3
 8004bc6:	e009      	b.n	8004bdc <_sbrk+0x54>
 8004bc8:	4b08      	ldr	r3, [pc, #32]	; (8004bec <_sbrk+0x64>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	60fb      	str	r3, [r7, #12]
 8004bce:	4b07      	ldr	r3, [pc, #28]	; (8004bec <_sbrk+0x64>)
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	18d2      	adds	r2, r2, r3
 8004bd6:	4b05      	ldr	r3, [pc, #20]	; (8004bec <_sbrk+0x64>)
 8004bd8:	601a      	str	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	0018      	movs	r0, r3
 8004bde:	46bd      	mov	sp, r7
 8004be0:	b006      	add	sp, #24
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	20009000 	.word	0x20009000
 8004be8:	00000400 	.word	0x00000400
 8004bec:	200002a8 	.word	0x200002a8
 8004bf0:	20000498 	.word	0x20000498

08004bf4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004bf8:	46c0      	nop			; (mov r8, r8)
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
	...

08004c00 <MX_TIM16_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8004c04:	4b0f      	ldr	r3, [pc, #60]	; (8004c44 <MX_TIM16_Init+0x44>)
 8004c06:	4a10      	ldr	r2, [pc, #64]	; (8004c48 <MX_TIM16_Init+0x48>)
 8004c08:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 511;
 8004c0a:	4b0e      	ldr	r3, [pc, #56]	; (8004c44 <MX_TIM16_Init+0x44>)
 8004c0c:	4a0f      	ldr	r2, [pc, #60]	; (8004c4c <MX_TIM16_Init+0x4c>)
 8004c0e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c10:	4b0c      	ldr	r3, [pc, #48]	; (8004c44 <MX_TIM16_Init+0x44>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8004c16:	4b0b      	ldr	r3, [pc, #44]	; (8004c44 <MX_TIM16_Init+0x44>)
 8004c18:	4a0d      	ldr	r2, [pc, #52]	; (8004c50 <MX_TIM16_Init+0x50>)
 8004c1a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c1c:	4b09      	ldr	r3, [pc, #36]	; (8004c44 <MX_TIM16_Init+0x44>)
 8004c1e:	2200      	movs	r2, #0
 8004c20:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8004c22:	4b08      	ldr	r3, [pc, #32]	; (8004c44 <MX_TIM16_Init+0x44>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c28:	4b06      	ldr	r3, [pc, #24]	; (8004c44 <MX_TIM16_Init+0x44>)
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004c2e:	4b05      	ldr	r3, [pc, #20]	; (8004c44 <MX_TIM16_Init+0x44>)
 8004c30:	0018      	movs	r0, r3
 8004c32:	f7ff f887 	bl	8003d44 <HAL_TIM_Base_Init>
 8004c36:	1e03      	subs	r3, r0, #0
 8004c38:	d001      	beq.n	8004c3e <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8004c3a:	f7ff fd3e 	bl	80046ba <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8004c3e:	46c0      	nop			; (mov r8, r8)
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	200002ac 	.word	0x200002ac
 8004c48:	40014400 	.word	0x40014400
 8004c4c:	000001ff 	.word	0x000001ff
 8004c50:	0000ffff 	.word	0x0000ffff

08004c54 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8004c58:	4b0f      	ldr	r3, [pc, #60]	; (8004c98 <MX_TIM17_Init+0x44>)
 8004c5a:	4a10      	ldr	r2, [pc, #64]	; (8004c9c <MX_TIM17_Init+0x48>)
 8004c5c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 511;
 8004c5e:	4b0e      	ldr	r3, [pc, #56]	; (8004c98 <MX_TIM17_Init+0x44>)
 8004c60:	4a0f      	ldr	r2, [pc, #60]	; (8004ca0 <MX_TIM17_Init+0x4c>)
 8004c62:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c64:	4b0c      	ldr	r3, [pc, #48]	; (8004c98 <MX_TIM17_Init+0x44>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8004c6a:	4b0b      	ldr	r3, [pc, #44]	; (8004c98 <MX_TIM17_Init+0x44>)
 8004c6c:	4a0d      	ldr	r2, [pc, #52]	; (8004ca4 <MX_TIM17_Init+0x50>)
 8004c6e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c70:	4b09      	ldr	r3, [pc, #36]	; (8004c98 <MX_TIM17_Init+0x44>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8004c76:	4b08      	ldr	r3, [pc, #32]	; (8004c98 <MX_TIM17_Init+0x44>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c7c:	4b06      	ldr	r3, [pc, #24]	; (8004c98 <MX_TIM17_Init+0x44>)
 8004c7e:	2200      	movs	r2, #0
 8004c80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8004c82:	4b05      	ldr	r3, [pc, #20]	; (8004c98 <MX_TIM17_Init+0x44>)
 8004c84:	0018      	movs	r0, r3
 8004c86:	f7ff f85d 	bl	8003d44 <HAL_TIM_Base_Init>
 8004c8a:	1e03      	subs	r3, r0, #0
 8004c8c:	d001      	beq.n	8004c92 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8004c8e:	f7ff fd14 	bl	80046ba <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8004c92:	46c0      	nop			; (mov r8, r8)
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	200002f8 	.word	0x200002f8
 8004c9c:	40014800 	.word	0x40014800
 8004ca0:	000001ff 	.word	0x000001ff
 8004ca4:	0000ffff 	.word	0x0000ffff

08004ca8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a14      	ldr	r2, [pc, #80]	; (8004d08 <HAL_TIM_Base_MspInit+0x60>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d10e      	bne.n	8004cd8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004cba:	4b14      	ldr	r3, [pc, #80]	; (8004d0c <HAL_TIM_Base_MspInit+0x64>)
 8004cbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cbe:	4b13      	ldr	r3, [pc, #76]	; (8004d0c <HAL_TIM_Base_MspInit+0x64>)
 8004cc0:	2180      	movs	r1, #128	; 0x80
 8004cc2:	0289      	lsls	r1, r1, #10
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	641a      	str	r2, [r3, #64]	; 0x40
 8004cc8:	4b10      	ldr	r3, [pc, #64]	; (8004d0c <HAL_TIM_Base_MspInit+0x64>)
 8004cca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ccc:	2380      	movs	r3, #128	; 0x80
 8004cce:	029b      	lsls	r3, r3, #10
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	60fb      	str	r3, [r7, #12]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8004cd6:	e012      	b.n	8004cfe <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM17)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a0c      	ldr	r2, [pc, #48]	; (8004d10 <HAL_TIM_Base_MspInit+0x68>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d10d      	bne.n	8004cfe <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8004ce2:	4b0a      	ldr	r3, [pc, #40]	; (8004d0c <HAL_TIM_Base_MspInit+0x64>)
 8004ce4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ce6:	4b09      	ldr	r3, [pc, #36]	; (8004d0c <HAL_TIM_Base_MspInit+0x64>)
 8004ce8:	2180      	movs	r1, #128	; 0x80
 8004cea:	02c9      	lsls	r1, r1, #11
 8004cec:	430a      	orrs	r2, r1
 8004cee:	641a      	str	r2, [r3, #64]	; 0x40
 8004cf0:	4b06      	ldr	r3, [pc, #24]	; (8004d0c <HAL_TIM_Base_MspInit+0x64>)
 8004cf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cf4:	2380      	movs	r3, #128	; 0x80
 8004cf6:	02db      	lsls	r3, r3, #11
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	60bb      	str	r3, [r7, #8]
 8004cfc:	68bb      	ldr	r3, [r7, #8]
}
 8004cfe:	46c0      	nop			; (mov r8, r8)
 8004d00:	46bd      	mov	sp, r7
 8004d02:	b004      	add	sp, #16
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	46c0      	nop			; (mov r8, r8)
 8004d08:	40014400 	.word	0x40014400
 8004d0c:	40021000 	.word	0x40021000
 8004d10:	40014800 	.word	0x40014800

08004d14 <WS2812B_init>:

static void _WS2812B_bitsToBytes(uint8_t *destination, uint8_t *source,
		uint16_t sourceSize, uint16_t rightShift, uint8_t high, int8_t low);

void WS2812B_init(ws2812_Stripe_TypeDef *stripe, SPI_HandleTypeDef *spi,
		uint16_t ledCount) {
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	1dbb      	adds	r3, r7, #6
 8004d20:	801a      	strh	r2, [r3, #0]
	stripe->spi = spi;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	601a      	str	r2, [r3, #0]
	stripe->ledCount = ledCount;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	1dba      	adds	r2, r7, #6
 8004d2c:	8812      	ldrh	r2, [r2, #0]
 8004d2e:	811a      	strh	r2, [r3, #8]
	stripe->colorBuffer = malloc(stripe->ledCount * 3);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	891b      	ldrh	r3, [r3, #8]
 8004d34:	001a      	movs	r2, r3
 8004d36:	0013      	movs	r3, r2
 8004d38:	005b      	lsls	r3, r3, #1
 8004d3a:	189b      	adds	r3, r3, r2
 8004d3c:	0018      	movs	r0, r3
 8004d3e:	f000 ffab 	bl	8005c98 <malloc>
 8004d42:	0003      	movs	r3, r0
 8004d44:	001a      	movs	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	605a      	str	r2, [r3, #4]
	memset(stripe->colorBuffer, 0x0, stripe->ledCount * 3);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6858      	ldr	r0, [r3, #4]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	891b      	ldrh	r3, [r3, #8]
 8004d52:	001a      	movs	r2, r3
 8004d54:	0013      	movs	r3, r2
 8004d56:	005b      	lsls	r3, r3, #1
 8004d58:	189b      	adds	r3, r3, r2
 8004d5a:	001a      	movs	r2, r3
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	f001 f859 	bl	8005e14 <memset>
}
 8004d62:	46c0      	nop			; (mov r8, r8)
 8004d64:	46bd      	mov	sp, r7
 8004d66:	b004      	add	sp, #16
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <WS2812B_setLedColorRGB>:

void WS2812B_setLedColorRGB(ws2812_Stripe_TypeDef *stripe, uint16_t id,
		uint32_t color) {
 8004d6a:	b5b0      	push	{r4, r5, r7, lr}
 8004d6c:	b086      	sub	sp, #24
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	60f8      	str	r0, [r7, #12]
 8004d72:	607a      	str	r2, [r7, #4]
 8004d74:	200a      	movs	r0, #10
 8004d76:	183b      	adds	r3, r7, r0
 8004d78:	1c0a      	adds	r2, r1, #0
 8004d7a:	801a      	strh	r2, [r3, #0]

	if (id >= stripe->ledCount || id < 0)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	891b      	ldrh	r3, [r3, #8]
 8004d80:	183a      	adds	r2, r7, r0
 8004d82:	8812      	ldrh	r2, [r2, #0]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d227      	bcs.n	8004dd8 <WS2812B_setLedColorRGB+0x6e>
		return;

	uint8_t red = (color >> 16) & 0xff;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	0c1a      	lsrs	r2, r3, #16
 8004d8c:	2117      	movs	r1, #23
 8004d8e:	187b      	adds	r3, r7, r1
 8004d90:	701a      	strb	r2, [r3, #0]
	uint8_t green = (color >> 8) & 0xff;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	0a1a      	lsrs	r2, r3, #8
 8004d96:	2416      	movs	r4, #22
 8004d98:	193b      	adds	r3, r7, r4
 8004d9a:	701a      	strb	r2, [r3, #0]
	uint8_t blue = color & 0xff;
 8004d9c:	2515      	movs	r5, #21
 8004d9e:	197b      	adds	r3, r7, r5
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	701a      	strb	r2, [r3, #0]

	uint32_t convertedColor = blue << 16 | red << 8 | green;
 8004da4:	197b      	adds	r3, r7, r5
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	041a      	lsls	r2, r3, #16
 8004daa:	187b      	adds	r3, r7, r1
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	021b      	lsls	r3, r3, #8
 8004db0:	431a      	orrs	r2, r3
 8004db2:	193b      	adds	r3, r7, r4
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	613b      	str	r3, [r7, #16]

	memcpy(&stripe->colorBuffer[id * 3], &convertedColor, 3);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6859      	ldr	r1, [r3, #4]
 8004dbe:	183b      	adds	r3, r7, r0
 8004dc0:	881a      	ldrh	r2, [r3, #0]
 8004dc2:	0013      	movs	r3, r2
 8004dc4:	005b      	lsls	r3, r3, #1
 8004dc6:	189b      	adds	r3, r3, r2
 8004dc8:	18cb      	adds	r3, r1, r3
 8004dca:	2210      	movs	r2, #16
 8004dcc:	18b9      	adds	r1, r7, r2
 8004dce:	2203      	movs	r2, #3
 8004dd0:	0018      	movs	r0, r3
 8004dd2:	f001 f865 	bl	8005ea0 <memcpy>
 8004dd6:	e000      	b.n	8004dda <WS2812B_setLedColorRGB+0x70>
		return;
 8004dd8:	46c0      	nop			; (mov r8, r8)

}
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	b006      	add	sp, #24
 8004dde:	bdb0      	pop	{r4, r5, r7, pc}

08004de0 <WS2812B_setLedColorHSV>:

void WS2812B_setLedColorHSV(ws2812_Stripe_TypeDef *stripe, uint16_t id,
		uint16_t hueDegree, uint8_t saturation, uint8_t value) {
 8004de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004de2:	b08f      	sub	sp, #60	; 0x3c
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	000c      	movs	r4, r1
 8004dea:	0010      	movs	r0, r2
 8004dec:	0019      	movs	r1, r3
 8004dee:	230a      	movs	r3, #10
 8004df0:	18fb      	adds	r3, r7, r3
 8004df2:	1c22      	adds	r2, r4, #0
 8004df4:	801a      	strh	r2, [r3, #0]
 8004df6:	2408      	movs	r4, #8
 8004df8:	193b      	adds	r3, r7, r4
 8004dfa:	1c02      	adds	r2, r0, #0
 8004dfc:	801a      	strh	r2, [r3, #0]
 8004dfe:	1dfb      	adds	r3, r7, #7
 8004e00:	1c0a      	adds	r2, r1, #0
 8004e02:	701a      	strb	r2, [r3, #0]

	uint8_t red, green, blue;
	float redPrime, greenPrime, bluePrime;

	if (hueDegree >= 360)
 8004e04:	193b      	adds	r3, r7, r4
 8004e06:	881a      	ldrh	r2, [r3, #0]
 8004e08:	23b4      	movs	r3, #180	; 0xb4
 8004e0a:	005b      	lsls	r3, r3, #1
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d303      	bcc.n	8004e18 <WS2812B_setLedColorHSV+0x38>
		hueDegree = 360;
 8004e10:	193b      	adds	r3, r7, r4
 8004e12:	22b4      	movs	r2, #180	; 0xb4
 8004e14:	0052      	lsls	r2, r2, #1
 8004e16:	801a      	strh	r2, [r3, #0]

	float value_f = (float) value / 255;
 8004e18:	2348      	movs	r3, #72	; 0x48
 8004e1a:	2208      	movs	r2, #8
 8004e1c:	189b      	adds	r3, r3, r2
 8004e1e:	19db      	adds	r3, r3, r7
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	0018      	movs	r0, r3
 8004e24:	f7fc f9c4 	bl	80011b0 <__aeabi_ui2f>
 8004e28:	1c03      	adds	r3, r0, #0
 8004e2a:	4980      	ldr	r1, [pc, #512]	; (800502c <WS2812B_setLedColorHSV+0x24c>)
 8004e2c:	1c18      	adds	r0, r3, #0
 8004e2e:	f7fb fcd1 	bl	80007d4 <__aeabi_fdiv>
 8004e32:	1c03      	adds	r3, r0, #0
 8004e34:	62bb      	str	r3, [r7, #40]	; 0x28
	float saturation_f = (float) saturation / 255;
 8004e36:	1dfb      	adds	r3, r7, #7
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	0018      	movs	r0, r3
 8004e3c:	f7fc f9b8 	bl	80011b0 <__aeabi_ui2f>
 8004e40:	1c03      	adds	r3, r0, #0
 8004e42:	497a      	ldr	r1, [pc, #488]	; (800502c <WS2812B_setLedColorHSV+0x24c>)
 8004e44:	1c18      	adds	r0, r3, #0
 8004e46:	f7fb fcc5 	bl	80007d4 <__aeabi_fdiv>
 8004e4a:	1c03      	adds	r3, r0, #0
 8004e4c:	627b      	str	r3, [r7, #36]	; 0x24

	//chroma- high level of color
	//x- ascending/descending level of color
	float chroma = value_f * saturation_f;
 8004e4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e52:	f7fb fe89 	bl	8000b68 <__aeabi_fmul>
 8004e56:	1c03      	adds	r3, r0, #0
 8004e58:	623b      	str	r3, [r7, #32]
	float x = chroma * (1 - fabs(fmodf(((float) hueDegree / 60), 2) - 1)); //changing
 8004e5a:	6a38      	ldr	r0, [r7, #32]
 8004e5c:	f7fd f834 	bl	8001ec8 <__aeabi_f2d>
 8004e60:	0004      	movs	r4, r0
 8004e62:	000d      	movs	r5, r1
 8004e64:	2608      	movs	r6, #8
 8004e66:	19bb      	adds	r3, r7, r6
 8004e68:	881b      	ldrh	r3, [r3, #0]
 8004e6a:	0018      	movs	r0, r3
 8004e6c:	f7fc f9a0 	bl	80011b0 <__aeabi_ui2f>
 8004e70:	1c03      	adds	r3, r0, #0
 8004e72:	496f      	ldr	r1, [pc, #444]	; (8005030 <WS2812B_setLedColorHSV+0x250>)
 8004e74:	1c18      	adds	r0, r3, #0
 8004e76:	f7fb fcad 	bl	80007d4 <__aeabi_fdiv>
 8004e7a:	1c03      	adds	r3, r0, #0
 8004e7c:	1c1a      	adds	r2, r3, #0
 8004e7e:	2380      	movs	r3, #128	; 0x80
 8004e80:	05db      	lsls	r3, r3, #23
 8004e82:	1c19      	adds	r1, r3, #0
 8004e84:	1c10      	adds	r0, r2, #0
 8004e86:	f001 f814 	bl	8005eb2 <fmodf>
 8004e8a:	1c03      	adds	r3, r0, #0
 8004e8c:	21fe      	movs	r1, #254	; 0xfe
 8004e8e:	0589      	lsls	r1, r1, #22
 8004e90:	1c18      	adds	r0, r3, #0
 8004e92:	f7fb ffb7 	bl	8000e04 <__aeabi_fsub>
 8004e96:	1c03      	adds	r3, r0, #0
 8004e98:	005b      	lsls	r3, r3, #1
 8004e9a:	085b      	lsrs	r3, r3, #1
 8004e9c:	1c18      	adds	r0, r3, #0
 8004e9e:	f7fd f813 	bl	8001ec8 <__aeabi_f2d>
 8004ea2:	0002      	movs	r2, r0
 8004ea4:	000b      	movs	r3, r1
 8004ea6:	2000      	movs	r0, #0
 8004ea8:	4962      	ldr	r1, [pc, #392]	; (8005034 <WS2812B_setLedColorHSV+0x254>)
 8004eaa:	f7fc fc8b 	bl	80017c4 <__aeabi_dsub>
 8004eae:	0002      	movs	r2, r0
 8004eb0:	000b      	movs	r3, r1
 8004eb2:	0020      	movs	r0, r4
 8004eb4:	0029      	movs	r1, r5
 8004eb6:	f7fc f9c3 	bl	8001240 <__aeabi_dmul>
 8004eba:	0002      	movs	r2, r0
 8004ebc:	000b      	movs	r3, r1
 8004ebe:	0010      	movs	r0, r2
 8004ec0:	0019      	movs	r1, r3
 8004ec2:	f7fd f849 	bl	8001f58 <__aeabi_d2f>
 8004ec6:	1c03      	adds	r3, r0, #0
 8004ec8:	61fb      	str	r3, [r7, #28]
	float m = value_f - chroma;
 8004eca:	6a39      	ldr	r1, [r7, #32]
 8004ecc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ece:	f7fb ff99 	bl	8000e04 <__aeabi_fsub>
 8004ed2:	1c03      	adds	r3, r0, #0
 8004ed4:	61bb      	str	r3, [r7, #24]

	if (0 <= hueDegree && hueDegree < 60) {
 8004ed6:	19bb      	adds	r3, r7, r6
 8004ed8:	881b      	ldrh	r3, [r3, #0]
 8004eda:	2b3b      	cmp	r3, #59	; 0x3b
 8004edc:	d806      	bhi.n	8004eec <WS2812B_setLedColorHSV+0x10c>
		redPrime = chroma; //red high
 8004ede:	6a3b      	ldr	r3, [r7, #32]
 8004ee0:	637b      	str	r3, [r7, #52]	; 0x34
		greenPrime = x; //green changing
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	633b      	str	r3, [r7, #48]	; 0x30
		bluePrime = 0; //blue zero
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eea:	e054      	b.n	8004f96 <WS2812B_setLedColorHSV+0x1b6>
	} else if (60 <= hueDegree && hueDegree < 120) {
 8004eec:	2208      	movs	r2, #8
 8004eee:	18bb      	adds	r3, r7, r2
 8004ef0:	881b      	ldrh	r3, [r3, #0]
 8004ef2:	2b3b      	cmp	r3, #59	; 0x3b
 8004ef4:	d90a      	bls.n	8004f0c <WS2812B_setLedColorHSV+0x12c>
 8004ef6:	18bb      	adds	r3, r7, r2
 8004ef8:	881b      	ldrh	r3, [r3, #0]
 8004efa:	2b77      	cmp	r3, #119	; 0x77
 8004efc:	d806      	bhi.n	8004f0c <WS2812B_setLedColorHSV+0x12c>
		redPrime = x;
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	637b      	str	r3, [r7, #52]	; 0x34
		greenPrime = chroma;
 8004f02:	6a3b      	ldr	r3, [r7, #32]
 8004f04:	633b      	str	r3, [r7, #48]	; 0x30
		bluePrime = 0;
 8004f06:	2300      	movs	r3, #0
 8004f08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f0a:	e044      	b.n	8004f96 <WS2812B_setLedColorHSV+0x1b6>
	} else if (120 <= hueDegree && hueDegree < 180) {
 8004f0c:	2208      	movs	r2, #8
 8004f0e:	18bb      	adds	r3, r7, r2
 8004f10:	881b      	ldrh	r3, [r3, #0]
 8004f12:	2b77      	cmp	r3, #119	; 0x77
 8004f14:	d90a      	bls.n	8004f2c <WS2812B_setLedColorHSV+0x14c>
 8004f16:	18bb      	adds	r3, r7, r2
 8004f18:	881b      	ldrh	r3, [r3, #0]
 8004f1a:	2bb3      	cmp	r3, #179	; 0xb3
 8004f1c:	d806      	bhi.n	8004f2c <WS2812B_setLedColorHSV+0x14c>
		redPrime = 0;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	637b      	str	r3, [r7, #52]	; 0x34
		greenPrime = chroma;
 8004f22:	6a3b      	ldr	r3, [r7, #32]
 8004f24:	633b      	str	r3, [r7, #48]	; 0x30
		bluePrime = x;
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f2a:	e034      	b.n	8004f96 <WS2812B_setLedColorHSV+0x1b6>
	} else if (180 <= hueDegree && hueDegree < 240) {
 8004f2c:	2208      	movs	r2, #8
 8004f2e:	18bb      	adds	r3, r7, r2
 8004f30:	881b      	ldrh	r3, [r3, #0]
 8004f32:	2bb3      	cmp	r3, #179	; 0xb3
 8004f34:	d90a      	bls.n	8004f4c <WS2812B_setLedColorHSV+0x16c>
 8004f36:	18bb      	adds	r3, r7, r2
 8004f38:	881b      	ldrh	r3, [r3, #0]
 8004f3a:	2bef      	cmp	r3, #239	; 0xef
 8004f3c:	d806      	bhi.n	8004f4c <WS2812B_setLedColorHSV+0x16c>
		redPrime = 0;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	637b      	str	r3, [r7, #52]	; 0x34
		greenPrime = x;
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	633b      	str	r3, [r7, #48]	; 0x30
		bluePrime = chroma;
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f4a:	e024      	b.n	8004f96 <WS2812B_setLedColorHSV+0x1b6>
	} else if (240 <= hueDegree && hueDegree < 300) {
 8004f4c:	2208      	movs	r2, #8
 8004f4e:	18bb      	adds	r3, r7, r2
 8004f50:	881b      	ldrh	r3, [r3, #0]
 8004f52:	2bef      	cmp	r3, #239	; 0xef
 8004f54:	d90c      	bls.n	8004f70 <WS2812B_setLedColorHSV+0x190>
 8004f56:	18bb      	adds	r3, r7, r2
 8004f58:	881a      	ldrh	r2, [r3, #0]
 8004f5a:	2396      	movs	r3, #150	; 0x96
 8004f5c:	005b      	lsls	r3, r3, #1
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d206      	bcs.n	8004f70 <WS2812B_setLedColorHSV+0x190>
		redPrime = x;
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	637b      	str	r3, [r7, #52]	; 0x34
		greenPrime = 0;
 8004f66:	2300      	movs	r3, #0
 8004f68:	633b      	str	r3, [r7, #48]	; 0x30
		bluePrime = chroma;
 8004f6a:	6a3b      	ldr	r3, [r7, #32]
 8004f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f6e:	e012      	b.n	8004f96 <WS2812B_setLedColorHSV+0x1b6>
	} else if (300 <= hueDegree && hueDegree < 360) {
 8004f70:	2108      	movs	r1, #8
 8004f72:	187b      	adds	r3, r7, r1
 8004f74:	881a      	ldrh	r2, [r3, #0]
 8004f76:	2396      	movs	r3, #150	; 0x96
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d30b      	bcc.n	8004f96 <WS2812B_setLedColorHSV+0x1b6>
 8004f7e:	187b      	adds	r3, r7, r1
 8004f80:	881a      	ldrh	r2, [r3, #0]
 8004f82:	23b4      	movs	r3, #180	; 0xb4
 8004f84:	005b      	lsls	r3, r3, #1
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d205      	bcs.n	8004f96 <WS2812B_setLedColorHSV+0x1b6>
		redPrime = chroma;
 8004f8a:	6a3b      	ldr	r3, [r7, #32]
 8004f8c:	637b      	str	r3, [r7, #52]	; 0x34
		greenPrime = 0;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	633b      	str	r3, [r7, #48]	; 0x30
		bluePrime = x;
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	red = (redPrime + m) * 255;
 8004f96:	69b9      	ldr	r1, [r7, #24]
 8004f98:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004f9a:	f7fb fa7b 	bl	8000494 <__aeabi_fadd>
 8004f9e:	1c03      	adds	r3, r0, #0
 8004fa0:	4922      	ldr	r1, [pc, #136]	; (800502c <WS2812B_setLedColorHSV+0x24c>)
 8004fa2:	1c18      	adds	r0, r3, #0
 8004fa4:	f7fb fde0 	bl	8000b68 <__aeabi_fmul>
 8004fa8:	1c03      	adds	r3, r0, #0
 8004faa:	2517      	movs	r5, #23
 8004fac:	197c      	adds	r4, r7, r5
 8004fae:	1c18      	adds	r0, r3, #0
 8004fb0:	f7fb fa58 	bl	8000464 <__aeabi_f2uiz>
 8004fb4:	0003      	movs	r3, r0
 8004fb6:	7023      	strb	r3, [r4, #0]
	green = (greenPrime + m) * 255;
 8004fb8:	69b9      	ldr	r1, [r7, #24]
 8004fba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004fbc:	f7fb fa6a 	bl	8000494 <__aeabi_fadd>
 8004fc0:	1c03      	adds	r3, r0, #0
 8004fc2:	491a      	ldr	r1, [pc, #104]	; (800502c <WS2812B_setLedColorHSV+0x24c>)
 8004fc4:	1c18      	adds	r0, r3, #0
 8004fc6:	f7fb fdcf 	bl	8000b68 <__aeabi_fmul>
 8004fca:	1c03      	adds	r3, r0, #0
 8004fcc:	2616      	movs	r6, #22
 8004fce:	19bc      	adds	r4, r7, r6
 8004fd0:	1c18      	adds	r0, r3, #0
 8004fd2:	f7fb fa47 	bl	8000464 <__aeabi_f2uiz>
 8004fd6:	0003      	movs	r3, r0
 8004fd8:	7023      	strb	r3, [r4, #0]
	blue = (bluePrime + m) * 255;
 8004fda:	69b9      	ldr	r1, [r7, #24]
 8004fdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004fde:	f7fb fa59 	bl	8000494 <__aeabi_fadd>
 8004fe2:	1c03      	adds	r3, r0, #0
 8004fe4:	4911      	ldr	r1, [pc, #68]	; (800502c <WS2812B_setLedColorHSV+0x24c>)
 8004fe6:	1c18      	adds	r0, r3, #0
 8004fe8:	f7fb fdbe 	bl	8000b68 <__aeabi_fmul>
 8004fec:	1c03      	adds	r3, r0, #0
 8004fee:	2215      	movs	r2, #21
 8004ff0:	18bc      	adds	r4, r7, r2
 8004ff2:	1c18      	adds	r0, r3, #0
 8004ff4:	f7fb fa36 	bl	8000464 <__aeabi_f2uiz>
 8004ff8:	0003      	movs	r3, r0
 8004ffa:	7023      	strb	r3, [r4, #0]

	uint32_t color = red << 16 | green << 8 | blue;
 8004ffc:	197b      	adds	r3, r7, r5
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	041a      	lsls	r2, r3, #16
 8005002:	19bb      	adds	r3, r7, r6
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	021b      	lsls	r3, r3, #8
 8005008:	431a      	orrs	r2, r3
 800500a:	2315      	movs	r3, #21
 800500c:	18fb      	adds	r3, r7, r3
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	4313      	orrs	r3, r2
 8005012:	613b      	str	r3, [r7, #16]

	WS2812B_setLedColorRGB(stripe, id, color);
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	230a      	movs	r3, #10
 8005018:	18fb      	adds	r3, r7, r3
 800501a:	8819      	ldrh	r1, [r3, #0]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	0018      	movs	r0, r3
 8005020:	f7ff fea3 	bl	8004d6a <WS2812B_setLedColorRGB>

}
 8005024:	46c0      	nop			; (mov r8, r8)
 8005026:	46bd      	mov	sp, r7
 8005028:	b00f      	add	sp, #60	; 0x3c
 800502a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800502c:	437f0000 	.word	0x437f0000
 8005030:	42700000 	.word	0x42700000
 8005034:	3ff00000 	.word	0x3ff00000

08005038 <WS2812B_Refresh>:

void WS2812B_Refresh(ws2812_Stripe_TypeDef *stripe) {
 8005038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800503a:	b08f      	sub	sp, #60	; 0x3c
 800503c:	af02      	add	r7, sp, #8
 800503e:	61f8      	str	r0, [r7, #28]
 8005040:	4669      	mov	r1, sp
 8005042:	000e      	movs	r6, r1

	uint16_t colorBufferSize = stripe->ledCount * 3;
 8005044:	69f9      	ldr	r1, [r7, #28]
 8005046:	8909      	ldrh	r1, [r1, #8]
 8005048:	2016      	movs	r0, #22
 800504a:	0002      	movs	r2, r0
 800504c:	2318      	movs	r3, #24
 800504e:	18c3      	adds	r3, r0, r3
 8005050:	19d8      	adds	r0, r3, r7
 8005052:	1c0b      	adds	r3, r1, #0
 8005054:	1c19      	adds	r1, r3, #0
 8005056:	1849      	adds	r1, r1, r1
 8005058:	469c      	mov	ip, r3
 800505a:	4461      	add	r1, ip
 800505c:	8001      	strh	r1, [r0, #0]
	uint16_t sendBufferSize = (colorBufferSize * 8) + 40; // one byte for each bit in each LED + 40 for reset
 800505e:	0010      	movs	r0, r2
 8005060:	2318      	movs	r3, #24
 8005062:	18c3      	adds	r3, r0, r3
 8005064:	19d9      	adds	r1, r3, r7
 8005066:	8809      	ldrh	r1, [r1, #0]
 8005068:	3105      	adds	r1, #5
 800506a:	b288      	uxth	r0, r1
 800506c:	2114      	movs	r1, #20
 800506e:	000b      	movs	r3, r1
 8005070:	2218      	movs	r2, #24
 8005072:	188a      	adds	r2, r1, r2
 8005074:	19d1      	adds	r1, r2, r7
 8005076:	00c0      	lsls	r0, r0, #3
 8005078:	8008      	strh	r0, [r1, #0]

	bitState sendBuffer[sendBufferSize];
 800507a:	0019      	movs	r1, r3
 800507c:	2318      	movs	r3, #24
 800507e:	18cb      	adds	r3, r1, r3
 8005080:	19d9      	adds	r1, r3, r7
 8005082:	8809      	ldrh	r1, [r1, #0]
 8005084:	0008      	movs	r0, r1
 8005086:	3801      	subs	r0, #1
 8005088:	62b8      	str	r0, [r7, #40]	; 0x28
 800508a:	6139      	str	r1, [r7, #16]
 800508c:	2000      	movs	r0, #0
 800508e:	6178      	str	r0, [r7, #20]
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	0f58      	lsrs	r0, r3, #29
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	00dd      	lsls	r5, r3, #3
 8005098:	4305      	orrs	r5, r0
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	00dc      	lsls	r4, r3, #3
 800509e:	6039      	str	r1, [r7, #0]
 80050a0:	2000      	movs	r0, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	683c      	ldr	r4, [r7, #0]
 80050a6:	687d      	ldr	r5, [r7, #4]
 80050a8:	0023      	movs	r3, r4
 80050aa:	0f58      	lsrs	r0, r3, #29
 80050ac:	002b      	movs	r3, r5
 80050ae:	00db      	lsls	r3, r3, #3
 80050b0:	60fb      	str	r3, [r7, #12]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	4303      	orrs	r3, r0
 80050b6:	60fb      	str	r3, [r7, #12]
 80050b8:	0023      	movs	r3, r4
 80050ba:	00db      	lsls	r3, r3, #3
 80050bc:	60bb      	str	r3, [r7, #8]
 80050be:	000b      	movs	r3, r1
 80050c0:	3307      	adds	r3, #7
 80050c2:	08db      	lsrs	r3, r3, #3
 80050c4:	00db      	lsls	r3, r3, #3
 80050c6:	466a      	mov	r2, sp
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	469d      	mov	sp, r3
 80050cc:	ab02      	add	r3, sp, #8
 80050ce:	3300      	adds	r3, #0
 80050d0:	627b      	str	r3, [r7, #36]	; 0x24

	_WS2812B_bitsToBytes(sendBuffer, stripe->colorBuffer, colorBufferSize, 40,
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	6859      	ldr	r1, [r3, #4]
 80050d6:	2016      	movs	r0, #22
 80050d8:	2318      	movs	r3, #24
 80050da:	18c3      	adds	r3, r0, r3
 80050dc:	19db      	adds	r3, r3, r7
 80050de:	881a      	ldrh	r2, [r3, #0]
 80050e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050e2:	2380      	movs	r3, #128	; 0x80
 80050e4:	425b      	negs	r3, r3
 80050e6:	9301      	str	r3, [sp, #4]
 80050e8:	23f8      	movs	r3, #248	; 0xf8
 80050ea:	9300      	str	r3, [sp, #0]
 80050ec:	2328      	movs	r3, #40	; 0x28
 80050ee:	f000 f81c 	bl	800512a <_WS2812B_bitsToBytes>

#if DMA_MODE == 0
	HAL_SPI_Transmit(stripe->spi, sendBuffer, sendBufferSize, 200); // Additional 3 for reset signal
#else

	if (HAL_SPI_Transmit_DMA(stripe->spi, sendBuffer, sendBufferSize) == HAL_OK)
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	6818      	ldr	r0, [r3, #0]
 80050f6:	2114      	movs	r1, #20
 80050f8:	2318      	movs	r3, #24
 80050fa:	18cb      	adds	r3, r1, r3
 80050fc:	19db      	adds	r3, r3, r7
 80050fe:	881a      	ldrh	r2, [r3, #0]
 8005100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005102:	0019      	movs	r1, r3
 8005104:	f7fe fb08 	bl	8003718 <HAL_SPI_Transmit_DMA>
 8005108:	1e03      	subs	r3, r0, #0
 800510a:	d109      	bne.n	8005120 <WS2812B_Refresh+0xe8>
		while (HAL_DMA_GetState(stripe->spi->hdmatx) != HAL_DMA_STATE_READY)
 800510c:	46c0      	nop			; (mov r8, r8)
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005114:	0018      	movs	r0, r3
 8005116:	f7fd faff 	bl	8002718 <HAL_DMA_GetState>
 800511a:	0003      	movs	r3, r0
 800511c:	2b01      	cmp	r3, #1
 800511e:	d1f6      	bne.n	800510e <WS2812B_Refresh+0xd6>
 8005120:	46b5      	mov	sp, r6
			;

#endif

}
 8005122:	46c0      	nop			; (mov r8, r8)
 8005124:	46bd      	mov	sp, r7
 8005126:	b00d      	add	sp, #52	; 0x34
 8005128:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800512a <_WS2812B_bitsToBytes>:
 *
 * right shift is shift of destination data. set for 5 cause 5 empty bytes
 * on the beginning of destination and shifts the rest
 */
void _WS2812B_bitsToBytes(uint8_t *destination, uint8_t *source,
		uint16_t sourceSize, uint16_t rightShift, uint8_t high, int8_t low) {
 800512a:	b5b0      	push	{r4, r5, r7, lr}
 800512c:	b086      	sub	sp, #24
 800512e:	af00      	add	r7, sp, #0
 8005130:	60f8      	str	r0, [r7, #12]
 8005132:	60b9      	str	r1, [r7, #8]
 8005134:	0019      	movs	r1, r3
 8005136:	1dbb      	adds	r3, r7, #6
 8005138:	801a      	strh	r2, [r3, #0]
 800513a:	1d3b      	adds	r3, r7, #4
 800513c:	1c0a      	adds	r2, r1, #0
 800513e:	801a      	strh	r2, [r3, #0]

	uint16_t destinationSize = (sourceSize * 8) + rightShift;
 8005140:	1dbb      	adds	r3, r7, #6
 8005142:	881b      	ldrh	r3, [r3, #0]
 8005144:	00db      	lsls	r3, r3, #3
 8005146:	b299      	uxth	r1, r3
 8005148:	2012      	movs	r0, #18
 800514a:	183b      	adds	r3, r7, r0
 800514c:	1d3a      	adds	r2, r7, #4
 800514e:	8812      	ldrh	r2, [r2, #0]
 8005150:	188a      	adds	r2, r1, r2
 8005152:	801a      	strh	r2, [r3, #0]

	//clear destination
	memset(destination, 0x0, destinationSize);
 8005154:	183b      	adds	r3, r7, r0
 8005156:	881a      	ldrh	r2, [r3, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2100      	movs	r1, #0
 800515c:	0018      	movs	r0, r3
 800515e:	f000 fe59 	bl	8005e14 <memset>

	for (uint16_t i = 0; i < sourceSize; i++) {
 8005162:	2316      	movs	r3, #22
 8005164:	18fb      	adds	r3, r7, r3
 8005166:	2200      	movs	r2, #0
 8005168:	801a      	strh	r2, [r3, #0]
 800516a:	e04e      	b.n	800520a <_WS2812B_bitsToBytes+0xe0>

		for (uint16_t j = 0; j < 8; j++) {
 800516c:	2314      	movs	r3, #20
 800516e:	18fb      	adds	r3, r7, r3
 8005170:	2200      	movs	r2, #0
 8005172:	801a      	strh	r2, [r3, #0]
 8005174:	e03e      	b.n	80051f4 <_WS2812B_bitsToBytes+0xca>

			uint16_t destinationOffset = (i * 8) + j;
 8005176:	2016      	movs	r0, #22
 8005178:	183b      	adds	r3, r7, r0
 800517a:	881b      	ldrh	r3, [r3, #0]
 800517c:	00db      	lsls	r3, r3, #3
 800517e:	b299      	uxth	r1, r3
 8005180:	2410      	movs	r4, #16
 8005182:	193b      	adds	r3, r7, r4
 8005184:	2514      	movs	r5, #20
 8005186:	197a      	adds	r2, r7, r5
 8005188:	8812      	ldrh	r2, [r2, #0]
 800518a:	188a      	adds	r2, r1, r2
 800518c:	801a      	strh	r2, [r3, #0]

			if (source[i] & (1 << (7 - j)))
 800518e:	183b      	adds	r3, r7, r0
 8005190:	881b      	ldrh	r3, [r3, #0]
 8005192:	68ba      	ldr	r2, [r7, #8]
 8005194:	18d3      	adds	r3, r2, r3
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	0019      	movs	r1, r3
 800519a:	197b      	adds	r3, r7, r5
 800519c:	881b      	ldrh	r3, [r3, #0]
 800519e:	2207      	movs	r2, #7
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	4119      	asrs	r1, r3
 80051a4:	000b      	movs	r3, r1
 80051a6:	2201      	movs	r2, #1
 80051a8:	4013      	ands	r3, r2
 80051aa:	d00e      	beq.n	80051ca <_WS2812B_bitsToBytes+0xa0>
				destination[destinationOffset + rightShift] = high;
 80051ac:	193b      	adds	r3, r7, r4
 80051ae:	881a      	ldrh	r2, [r3, #0]
 80051b0:	1d3b      	adds	r3, r7, #4
 80051b2:	881b      	ldrh	r3, [r3, #0]
 80051b4:	18d3      	adds	r3, r2, r3
 80051b6:	001a      	movs	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	189a      	adds	r2, r3, r2
 80051bc:	2320      	movs	r3, #32
 80051be:	2108      	movs	r1, #8
 80051c0:	185b      	adds	r3, r3, r1
 80051c2:	19db      	adds	r3, r3, r7
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	7013      	strb	r3, [r2, #0]
 80051c8:	e00e      	b.n	80051e8 <_WS2812B_bitsToBytes+0xbe>
			else
				destination[destinationOffset + rightShift] = low;
 80051ca:	2310      	movs	r3, #16
 80051cc:	18fb      	adds	r3, r7, r3
 80051ce:	881a      	ldrh	r2, [r3, #0]
 80051d0:	1d3b      	adds	r3, r7, #4
 80051d2:	881b      	ldrh	r3, [r3, #0]
 80051d4:	18d3      	adds	r3, r2, r3
 80051d6:	001a      	movs	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	189b      	adds	r3, r3, r2
 80051dc:	2224      	movs	r2, #36	; 0x24
 80051de:	2108      	movs	r1, #8
 80051e0:	1852      	adds	r2, r2, r1
 80051e2:	19d2      	adds	r2, r2, r7
 80051e4:	7812      	ldrb	r2, [r2, #0]
 80051e6:	701a      	strb	r2, [r3, #0]
		for (uint16_t j = 0; j < 8; j++) {
 80051e8:	2114      	movs	r1, #20
 80051ea:	187b      	adds	r3, r7, r1
 80051ec:	881a      	ldrh	r2, [r3, #0]
 80051ee:	187b      	adds	r3, r7, r1
 80051f0:	3201      	adds	r2, #1
 80051f2:	801a      	strh	r2, [r3, #0]
 80051f4:	2314      	movs	r3, #20
 80051f6:	18fb      	adds	r3, r7, r3
 80051f8:	881b      	ldrh	r3, [r3, #0]
 80051fa:	2b07      	cmp	r3, #7
 80051fc:	d9bb      	bls.n	8005176 <_WS2812B_bitsToBytes+0x4c>
	for (uint16_t i = 0; i < sourceSize; i++) {
 80051fe:	2116      	movs	r1, #22
 8005200:	187b      	adds	r3, r7, r1
 8005202:	881a      	ldrh	r2, [r3, #0]
 8005204:	187b      	adds	r3, r7, r1
 8005206:	3201      	adds	r2, #1
 8005208:	801a      	strh	r2, [r3, #0]
 800520a:	2316      	movs	r3, #22
 800520c:	18fa      	adds	r2, r7, r3
 800520e:	1dbb      	adds	r3, r7, #6
 8005210:	8812      	ldrh	r2, [r2, #0]
 8005212:	881b      	ldrh	r3, [r3, #0]
 8005214:	429a      	cmp	r2, r3
 8005216:	d3a9      	bcc.n	800516c <_WS2812B_bitsToBytes+0x42>

		}
	}

}
 8005218:	46c0      	nop			; (mov r8, r8)
 800521a:	46c0      	nop			; (mov r8, r8)
 800521c:	46bd      	mov	sp, r7
 800521e:	b006      	add	sp, #24
 8005220:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005224 <wsfx_increment>:
/*
 * run this function in main loop, to run as often as possible
 * @param: number of arguments
 * @params: effects to increment(wsfxEffect_TypeDef*)
 */
void wsfx_increment(uint8_t effectsToRun, ...) {
 8005224:	b40f      	push	{r0, r1, r2, r3}
 8005226:	b580      	push	{r7, lr}
 8005228:	b084      	sub	sp, #16
 800522a:	af00      	add	r7, sp, #0

	if (wsfx_flagRun == WSFX_RUN) {
 800522c:	4b39      	ldr	r3, [pc, #228]	; (8005314 <wsfx_increment+0xf0>)
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b01      	cmp	r3, #1
 8005234:	d167      	bne.n	8005306 <wsfx_increment+0xe2>

		wsfx_mainCounter++;
 8005236:	4b38      	ldr	r3, [pc, #224]	; (8005318 <wsfx_increment+0xf4>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	1c5a      	adds	r2, r3, #1
 800523c:	4b36      	ldr	r3, [pc, #216]	; (8005318 <wsfx_increment+0xf4>)
 800523e:	601a      	str	r2, [r3, #0]

		va_list ap;
		va_start(ap, effectsToRun);
 8005240:	231c      	movs	r3, #28
 8005242:	18fb      	adds	r3, r7, r3
 8005244:	603b      	str	r3, [r7, #0]

		for (uint8_t i = 0; i < effectsToRun; i++) { //run this for each effect
 8005246:	230f      	movs	r3, #15
 8005248:	18fb      	adds	r3, r7, r3
 800524a:	2200      	movs	r2, #0
 800524c:	701a      	strb	r2, [r3, #0]
 800524e:	e04f      	b.n	80052f0 <wsfx_increment+0xcc>

			/*
			 * get first/next struct
			 */
			wsfxEffect_TypeDef *currentEffect = va_arg(ap, wsfxEffect_TypeDef*);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	1d1a      	adds	r2, r3, #4
 8005254:	603a      	str	r2, [r7, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	607b      	str	r3, [r7, #4]

			if (currentEffect->flow.state == WSFX_EFFECT_STATE_RUNNING //if effect is running
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	7d9b      	ldrb	r3, [r3, #22]
 800525e:	2b01      	cmp	r3, #1
 8005260:	d140      	bne.n	80052e4 <wsfx_increment+0xc0>
			&& (wsfx_mainCounter % currentEffect->flow.prescaler == 0)) { //and main couter can divide by prescaler
 8005262:	4b2d      	ldr	r3, [pc, #180]	; (8005318 <wsfx_increment+0xf4>)
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	8b1b      	ldrh	r3, [r3, #24]
 800526a:	0019      	movs	r1, r3
 800526c:	0010      	movs	r0, r2
 800526e:	f7fa ffcf 	bl	8000210 <__aeabi_uidivmod>
 8005272:	1e0b      	subs	r3, r1, #0
 8005274:	d136      	bne.n	80052e4 <wsfx_increment+0xc0>

				currentEffect->stepFunction(&currentEffect->flow); //run function
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	0010      	movs	r0, r2
 800527e:	4798      	blx	r3

				currentEffect->flow.counter++; //increment effect coutner
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	881b      	ldrh	r3, [r3, #0]
 8005284:	b29b      	uxth	r3, r3
 8005286:	3301      	adds	r3, #1
 8005288:	b29a      	uxth	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	801a      	strh	r2, [r3, #0]

				if (currentEffect->flow.counter >= currentEffect->flow.steps) { //if step is too large
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	881b      	ldrh	r3, [r3, #0]
 8005292:	b29a      	uxth	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	899b      	ldrh	r3, [r3, #12]
 8005298:	429a      	cmp	r2, r3
 800529a:	d323      	bcc.n	80052e4 <wsfx_increment+0xc0>
					currentEffect->flow.counter = 0;	//reset counter
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	801a      	strh	r2, [r3, #0]
					if (currentEffect->flow.repeat == WSFX_REPEAT_MODE_OFF) {//if repeat is off
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	7ddb      	ldrb	r3, [r3, #23]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d11c      	bne.n	80052e4 <wsfx_increment+0xc0>
						currentEffect->flow.state = WSFX_EFFECT_STATE_STOP; //stop effect
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	759a      	strb	r2, [r3, #22]
						for (int i = currentEffect->flow.beginLED;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	891b      	ldrh	r3, [r3, #8]
 80052b4:	60bb      	str	r3, [r7, #8]
 80052b6:	e00a      	b.n	80052ce <wsfx_increment+0xaa>
								i <= currentEffect->flow.endLED; i++) {
							WS2812B_setLedColorRGB(currentEffect->flow.stripe,
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	b291      	uxth	r1, r2
 80052c0:	2200      	movs	r2, #0
 80052c2:	0018      	movs	r0, r3
 80052c4:	f7ff fd51 	bl	8004d6a <WS2812B_setLedColorRGB>
								i <= currentEffect->flow.endLED; i++) {
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	3301      	adds	r3, #1
 80052cc:	60bb      	str	r3, [r7, #8]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	895b      	ldrh	r3, [r3, #10]
 80052d2:	001a      	movs	r2, r3
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	4293      	cmp	r3, r2
 80052d8:	ddee      	ble.n	80052b8 <wsfx_increment+0x94>
									i, 0x0);
						}
						WS2812B_Refresh(currentEffect->flow.stripe);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	0018      	movs	r0, r3
 80052e0:	f7ff feaa 	bl	8005038 <WS2812B_Refresh>
		for (uint8_t i = 0; i < effectsToRun; i++) { //run this for each effect
 80052e4:	210f      	movs	r1, #15
 80052e6:	187b      	adds	r3, r7, r1
 80052e8:	781a      	ldrb	r2, [r3, #0]
 80052ea:	187b      	adds	r3, r7, r1
 80052ec:	3201      	adds	r2, #1
 80052ee:	701a      	strb	r2, [r3, #0]
 80052f0:	230f      	movs	r3, #15
 80052f2:	18fa      	adds	r2, r7, r3
 80052f4:	2318      	movs	r3, #24
 80052f6:	18fb      	adds	r3, r7, r3
 80052f8:	7812      	ldrb	r2, [r2, #0]
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d3a7      	bcc.n	8005250 <wsfx_increment+0x2c>

		}

		va_end(ap);

		wsfx_flagRun = WSFX_STOP;
 8005300:	4b04      	ldr	r3, [pc, #16]	; (8005314 <wsfx_increment+0xf0>)
 8005302:	2200      	movs	r2, #0
 8005304:	701a      	strb	r2, [r3, #0]

	}
}
 8005306:	46c0      	nop			; (mov r8, r8)
 8005308:	46bd      	mov	sp, r7
 800530a:	b004      	add	sp, #16
 800530c:	bc80      	pop	{r7}
 800530e:	bc08      	pop	{r3}
 8005310:	b004      	add	sp, #16
 8005312:	4718      	bx	r3
 8005314:	20000344 	.word	0x20000344
 8005318:	20000348 	.word	0x20000348

0800531c <wsfx_init>:
 * @param: step function: one of wsfx_effect_*() function
 *
 */
void wsfx_init(wsfxEffect_TypeDef *effect, ws2812_Stripe_TypeDef *stripe,
		uint16_t beginLED, uint16_t endLED,
		void (*stepFunction)(wsfxEffectFlow_TypeDef *flow)) {
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	0019      	movs	r1, r3
 8005328:	1dbb      	adds	r3, r7, #6
 800532a:	801a      	strh	r2, [r3, #0]
 800532c:	1d3b      	adds	r3, r7, #4
 800532e:	1c0a      	adds	r2, r1, #0
 8005330:	801a      	strh	r2, [r3, #0]

	effect->flow.state = WSFX_EFFECT_STATE_STOP;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	759a      	strb	r2, [r3, #22]
	effect->flow.counter = 0;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	801a      	strh	r2, [r3, #0]
	effect->flow.steps = 0;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	819a      	strh	r2, [r3, #12]

	//default values
	effect->flow.repeat = WSFX_REPEAT_MODE_OFF;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	75da      	strb	r2, [r3, #23]
	effect->flow.direction = WSFX_DIRECTION_FORE;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	709a      	strb	r2, [r3, #2]
	effect->flow.prescaler = 20;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2214      	movs	r2, #20
 8005354:	831a      	strh	r2, [r3, #24]
	effect->flow.saturation = 255;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	22ff      	movs	r2, #255	; 0xff
 800535a:	755a      	strb	r2, [r3, #21]
	effect->flow.hue = 0;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2200      	movs	r2, #0
 8005360:	821a      	strh	r2, [r3, #16]
	effect->flow.hue2 = 180;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	22b4      	movs	r2, #180	; 0xb4
 8005366:	825a      	strh	r2, [r3, #18]
	effect->flow.value = 20;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2214      	movs	r2, #20
 800536c:	751a      	strb	r2, [r3, #20]

	effect->flow.stripe = stripe;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	68ba      	ldr	r2, [r7, #8]
 8005372:	605a      	str	r2, [r3, #4]
	effect->flow.beginLED = beginLED;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	1dba      	adds	r2, r7, #6
 8005378:	8812      	ldrh	r2, [r2, #0]
 800537a:	811a      	strh	r2, [r3, #8]
	effect->flow.endLED = endLED;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	1d3a      	adds	r2, r7, #4
 8005380:	8812      	ldrh	r2, [r2, #0]
 8005382:	815a      	strh	r2, [r3, #10]

	effect->stepFunction = stepFunction;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	69ba      	ldr	r2, [r7, #24]
 8005388:	621a      	str	r2, [r3, #32]

}
 800538a:	46c0      	nop			; (mov r8, r8)
 800538c:	46bd      	mov	sp, r7
 800538e:	b004      	add	sp, #16
 8005390:	bd80      	pop	{r7, pc}

08005392 <wsfx_setColor>:
/*
 * set main color for effect
 * @param: effect struct
 * @param: hue 0-359
 */
void wsfx_setColor(wsfxEffect_TypeDef *effect, uint16_t hue) {
 8005392:	b580      	push	{r7, lr}
 8005394:	b082      	sub	sp, #8
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
 800539a:	000a      	movs	r2, r1
 800539c:	1cbb      	adds	r3, r7, #2
 800539e:	801a      	strh	r2, [r3, #0]
	effect->flow.hue = hue;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	1cba      	adds	r2, r7, #2
 80053a4:	8812      	ldrh	r2, [r2, #0]
 80053a6:	821a      	strh	r2, [r3, #16]
}
 80053a8:	46c0      	nop			; (mov r8, r8)
 80053aa:	46bd      	mov	sp, r7
 80053ac:	b002      	add	sp, #8
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <wsfx_setValue>:
/*
 * set main value(brightness) for effect
 * @param: effect
 * @param: value(0-255)
 */
void wsfx_setValue(wsfxEffect_TypeDef *effect, uint8_t value) {
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	000a      	movs	r2, r1
 80053ba:	1cfb      	adds	r3, r7, #3
 80053bc:	701a      	strb	r2, [r3, #0]
	effect->flow.value = value;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	1cfa      	adds	r2, r7, #3
 80053c2:	7812      	ldrb	r2, [r2, #0]
 80053c4:	751a      	strb	r2, [r3, #20]
}
 80053c6:	46c0      	nop			; (mov r8, r8)
 80053c8:	46bd      	mov	sp, r7
 80053ca:	b002      	add	sp, #8
 80053cc:	bd80      	pop	{r7, pc}

080053ce <wsfx_setRepeat>:

void wsfx_setRepeat(wsfxEffect_TypeDef *effect, wsfxRepeatMode repeat) {
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b082      	sub	sp, #8
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
 80053d6:	000a      	movs	r2, r1
 80053d8:	1cfb      	adds	r3, r7, #3
 80053da:	701a      	strb	r2, [r3, #0]
	effect->flow.repeat = repeat;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	1cfa      	adds	r2, r7, #3
 80053e0:	7812      	ldrb	r2, [r2, #0]
 80053e2:	75da      	strb	r2, [r3, #23]
}
 80053e4:	46c0      	nop			; (mov r8, r8)
 80053e6:	46bd      	mov	sp, r7
 80053e8:	b002      	add	sp, #8
 80053ea:	bd80      	pop	{r7, pc}

080053ec <wsfx_setPrescaler>:

void wsfx_setDirection(wsfxEffect_TypeDef *effect, wsfxDirection direction) {
	effect->flow.direction = direction;
}

void wsfx_setPrescaler(wsfxEffect_TypeDef *effect, uint16_t prescaler) {
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	000a      	movs	r2, r1
 80053f6:	1cbb      	adds	r3, r7, #2
 80053f8:	801a      	strh	r2, [r3, #0]
	effect->flow.prescaler = prescaler;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	1cba      	adds	r2, r7, #2
 80053fe:	8812      	ldrh	r2, [r2, #0]
 8005400:	831a      	strh	r2, [r3, #24]
}
 8005402:	46c0      	nop			; (mov r8, r8)
 8005404:	46bd      	mov	sp, r7
 8005406:	b002      	add	sp, #8
 8005408:	bd80      	pop	{r7, pc}

0800540a <wsfx_setSaturation>:

void wsfx_setSaturation(wsfxEffect_TypeDef *effect, uint8_t saturation) {
 800540a:	b580      	push	{r7, lr}
 800540c:	b082      	sub	sp, #8
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
 8005412:	000a      	movs	r2, r1
 8005414:	1cfb      	adds	r3, r7, #3
 8005416:	701a      	strb	r2, [r3, #0]
	effect->flow.saturation = saturation;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	1cfa      	adds	r2, r7, #3
 800541c:	7812      	ldrb	r2, [r2, #0]
 800541e:	755a      	strb	r2, [r3, #21]
}
 8005420:	46c0      	nop			; (mov r8, r8)
 8005422:	46bd      	mov	sp, r7
 8005424:	b002      	add	sp, #8
 8005426:	bd80      	pop	{r7, pc}

08005428 <wsfx_setShift>:

void wsfx_setShift(wsfxEffect_TypeDef *effect, uint16_t shift) {
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	000a      	movs	r2, r1
 8005432:	1cbb      	adds	r3, r7, #2
 8005434:	801a      	strh	r2, [r3, #0]
	effect->flow.shift = shift;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	1cba      	adds	r2, r7, #2
 800543a:	8812      	ldrh	r2, [r2, #0]
 800543c:	81da      	strh	r2, [r3, #14]
}
 800543e:	46c0      	nop			; (mov r8, r8)
 8005440:	46bd      	mov	sp, r7
 8005442:	b002      	add	sp, #8
 8005444:	bd80      	pop	{r7, pc}

08005446 <wsfx_setColorSecond>:

void wsfx_setColorSecond(wsfxEffect_TypeDef *effect, uint16_t hue) {
 8005446:	b580      	push	{r7, lr}
 8005448:	b082      	sub	sp, #8
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
 800544e:	000a      	movs	r2, r1
 8005450:	1cbb      	adds	r3, r7, #2
 8005452:	801a      	strh	r2, [r3, #0]
	effect->flow.hue2 = hue;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	1cba      	adds	r2, r7, #2
 8005458:	8812      	ldrh	r2, [r2, #0]
 800545a:	825a      	strh	r2, [r3, #18]
}
 800545c:	46c0      	nop			; (mov r8, r8)
 800545e:	46bd      	mov	sp, r7
 8005460:	b002      	add	sp, #8
 8005462:	bd80      	pop	{r7, pc}

08005464 <wsfx_start>:

/*
 * start effect
 */
void wsfx_start(wsfxEffect_TypeDef *effect) {
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
	effect->flow.state = WSFX_EFFECT_STATE_RUNNING;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	759a      	strb	r2, [r3, #22]
}
 8005472:	46c0      	nop			; (mov r8, r8)
 8005474:	46bd      	mov	sp, r7
 8005476:	b002      	add	sp, #8
 8005478:	bd80      	pop	{r7, pc}

0800547a <wsfx_stop>:

/*
 * stop effect
 */
void wsfx_stop(wsfxEffect_TypeDef *effect) {
 800547a:	b580      	push	{r7, lr}
 800547c:	b082      	sub	sp, #8
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
	effect->flow.state = WSFX_EFFECT_STATE_STOP;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	759a      	strb	r2, [r3, #22]
	effect->flow.counter = 0;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	801a      	strh	r2, [r3, #0]

	_groupTurnOff(effect->flow.stripe, effect->flow.beginLED,
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6858      	ldr	r0, [r3, #4]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	891b      	ldrh	r3, [r3, #8]
 8005496:	0019      	movs	r1, r3
			effect->flow.endLED);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	895b      	ldrh	r3, [r3, #10]
	_groupTurnOff(effect->flow.stripe, effect->flow.beginLED,
 800549c:	001a      	movs	r2, r3
 800549e:	f000 f83a 	bl	8005516 <_groupTurnOff>
	WS2812B_Refresh(effect->flow.stripe);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	0018      	movs	r0, r3
 80054a8:	f7ff fdc6 	bl	8005038 <WS2812B_Refresh>

}
 80054ac:	46c0      	nop			; (mov r8, r8)
 80054ae:	46bd      	mov	sp, r7
 80054b0:	b002      	add	sp, #8
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <wsfx_interruptCallback>:

/*
 * run this function in interrupt callback
 */
void wsfx_interruptCallback(void) {
 80054b4:	b580      	push	{r7, lr}
 80054b6:	af00      	add	r7, sp, #0
	wsfx_flagRun = WSFX_RUN;
 80054b8:	4b02      	ldr	r3, [pc, #8]	; (80054c4 <wsfx_interruptCallback+0x10>)
 80054ba:	2201      	movs	r2, #1
 80054bc:	701a      	strb	r2, [r3, #0]
}
 80054be:	46c0      	nop			; (mov r8, r8)
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	20000344 	.word	0x20000344

080054c8 <_groupAction>:

void _groupAction(ws2812_Stripe_TypeDef *stripe, int first, int last,
		uint16_t hue, uint8_t saturation, uint8_t value) {
 80054c8:	b590      	push	{r4, r7, lr}
 80054ca:	b089      	sub	sp, #36	; 0x24
 80054cc:	af02      	add	r7, sp, #8
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]
 80054d4:	001a      	movs	r2, r3
 80054d6:	1cbb      	adds	r3, r7, #2
 80054d8:	801a      	strh	r2, [r3, #0]

	for (int i = first; i <= last; i++) {
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	617b      	str	r3, [r7, #20]
 80054de:	e011      	b.n	8005504 <_groupAction+0x3c>
		WS2812B_setLedColorHSV(stripe, i, hue, saturation, value);
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	b299      	uxth	r1, r3
 80054e4:	2328      	movs	r3, #40	; 0x28
 80054e6:	18fb      	adds	r3, r7, r3
 80054e8:	781c      	ldrb	r4, [r3, #0]
 80054ea:	1cbb      	adds	r3, r7, #2
 80054ec:	881a      	ldrh	r2, [r3, #0]
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	232c      	movs	r3, #44	; 0x2c
 80054f2:	18fb      	adds	r3, r7, r3
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	9300      	str	r3, [sp, #0]
 80054f8:	0023      	movs	r3, r4
 80054fa:	f7ff fc71 	bl	8004de0 <WS2812B_setLedColorHSV>
	for (int i = first; i <= last; i++) {
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	3301      	adds	r3, #1
 8005502:	617b      	str	r3, [r7, #20]
 8005504:	697a      	ldr	r2, [r7, #20]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	429a      	cmp	r2, r3
 800550a:	dde9      	ble.n	80054e0 <_groupAction+0x18>
	}

}
 800550c:	46c0      	nop			; (mov r8, r8)
 800550e:	46c0      	nop			; (mov r8, r8)
 8005510:	46bd      	mov	sp, r7
 8005512:	b007      	add	sp, #28
 8005514:	bd90      	pop	{r4, r7, pc}

08005516 <_groupTurnOff>:

void _groupTurnOff(ws2812_Stripe_TypeDef *stripe, int first, int last) {
 8005516:	b580      	push	{r7, lr}
 8005518:	b086      	sub	sp, #24
 800551a:	af00      	add	r7, sp, #0
 800551c:	60f8      	str	r0, [r7, #12]
 800551e:	60b9      	str	r1, [r7, #8]
 8005520:	607a      	str	r2, [r7, #4]

	for (int i = first; i <= last; i++) {
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	617b      	str	r3, [r7, #20]
 8005526:	e009      	b.n	800553c <_groupTurnOff+0x26>
		WS2812B_setLedColorRGB(stripe, i, 0x0);
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	b299      	uxth	r1, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	0018      	movs	r0, r3
 8005532:	f7ff fc1a 	bl	8004d6a <WS2812B_setLedColorRGB>
	for (int i = first; i <= last; i++) {
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	3301      	adds	r3, #1
 800553a:	617b      	str	r3, [r7, #20]
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	429a      	cmp	r2, r3
 8005542:	ddf1      	ble.n	8005528 <_groupTurnOff+0x12>
	}

}
 8005544:	46c0      	nop			; (mov r8, r8)
 8005546:	46c0      	nop			; (mov r8, r8)
 8005548:	46bd      	mov	sp, r7
 800554a:	b006      	add	sp, #24
 800554c:	bd80      	pop	{r7, pc}

0800554e <wsfx_step_movingLight>:

void wsfx_step_movingLight(wsfxEffectFlow_TypeDef *flow) {
 800554e:	b590      	push	{r4, r7, lr}
 8005550:	b089      	sub	sp, #36	; 0x24
 8005552:	af02      	add	r7, sp, #8
 8005554:	6078      	str	r0, [r7, #4]

	int leds = flow->endLED - flow->beginLED + 1;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	895b      	ldrh	r3, [r3, #10]
 800555a:	001a      	movs	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	891b      	ldrh	r3, [r3, #8]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	3301      	adds	r3, #1
 8005564:	60fb      	str	r3, [r7, #12]

	flow->steps = (leds * 2);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	b29b      	uxth	r3, r3
 800556a:	18db      	adds	r3, r3, r3
 800556c:	b29a      	uxth	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	819a      	strh	r2, [r3, #12]

	int currentLED;

	uint8_t glowDirection = 0;
 8005572:	2113      	movs	r1, #19
 8005574:	187b      	adds	r3, r7, r1
 8005576:	2200      	movs	r2, #0
 8005578:	701a      	strb	r2, [r3, #0]

	if (flow->counter < leds) {
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	881b      	ldrh	r3, [r3, #0]
 800557e:	b29b      	uxth	r3, r3
 8005580:	001a      	movs	r2, r3
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	4293      	cmp	r3, r2
 8005586:	dd0b      	ble.n	80055a0 <wsfx_step_movingLight+0x52>

		currentLED = flow->counter + flow->beginLED;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	881b      	ldrh	r3, [r3, #0]
 800558c:	b29b      	uxth	r3, r3
 800558e:	001a      	movs	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	891b      	ldrh	r3, [r3, #8]
 8005594:	18d3      	adds	r3, r2, r3
 8005596:	617b      	str	r3, [r7, #20]
		glowDirection = 0;
 8005598:	187b      	adds	r3, r7, r1
 800559a:	2200      	movs	r2, #0
 800559c:	701a      	strb	r2, [r3, #0]
 800559e:	e00f      	b.n	80055c0 <wsfx_step_movingLight+0x72>

	} else {

		currentLED = flow->steps - flow->counter - 1 + flow->beginLED;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	899b      	ldrh	r3, [r3, #12]
 80055a4:	001a      	movs	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	881b      	ldrh	r3, [r3, #0]
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	3b01      	subs	r3, #1
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	8912      	ldrh	r2, [r2, #8]
 80055b4:	189b      	adds	r3, r3, r2
 80055b6:	617b      	str	r3, [r7, #20]
		glowDirection = 1;
 80055b8:	2313      	movs	r3, #19
 80055ba:	18fb      	adds	r3, r7, r3
 80055bc:	2201      	movs	r2, #1
 80055be:	701a      	strb	r2, [r3, #0]

	}

	if (flow->direction == WSFX_DIRECTION_BACK)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	789b      	ldrb	r3, [r3, #2]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d104      	bne.n	80055d2 <wsfx_step_movingLight+0x84>
		currentLED = leds - 1 - currentLED;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	1e5a      	subs	r2, r3, #1
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	617b      	str	r3, [r7, #20]

	_groupTurnOff(flow->stripe, flow->beginLED, flow->endLED);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6858      	ldr	r0, [r3, #4]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	891b      	ldrh	r3, [r3, #8]
 80055da:	0019      	movs	r1, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	895b      	ldrh	r3, [r3, #10]
 80055e0:	001a      	movs	r2, r3
 80055e2:	f7ff ff98 	bl	8005516 <_groupTurnOff>

	WS2812B_setLedColorHSV(flow->stripe, currentLED, flow->hue,
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6858      	ldr	r0, [r3, #4]
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	b299      	uxth	r1, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	8a1a      	ldrh	r2, [r3, #16]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	7d5c      	ldrb	r4, [r3, #21]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	7d1b      	ldrb	r3, [r3, #20]
 80055fa:	9300      	str	r3, [sp, #0]
 80055fc:	0023      	movs	r3, r4
 80055fe:	f7ff fbef 	bl	8004de0 <WS2812B_setLedColorHSV>
			flow->saturation, flow->value);

	//glow
	if (glowDirection == 0) {
 8005602:	2313      	movs	r3, #19
 8005604:	18fb      	adds	r3, r7, r3
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d130      	bne.n	800566e <wsfx_step_movingLight+0x120>
		if (currentLED > flow->beginLED)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	891b      	ldrh	r3, [r3, #8]
 8005610:	001a      	movs	r2, r3
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	4293      	cmp	r3, r2
 8005616:	dd11      	ble.n	800563c <wsfx_step_movingLight+0xee>
			WS2812B_setLedColorHSV(flow->stripe, currentLED - 1, flow->hue,
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6858      	ldr	r0, [r3, #4]
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	b29b      	uxth	r3, r3
 8005620:	3b01      	subs	r3, #1
 8005622:	b299      	uxth	r1, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	8a1a      	ldrh	r2, [r3, #16]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	7d5c      	ldrb	r4, [r3, #21]
					flow->saturation, flow->value / 2);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	7d1b      	ldrb	r3, [r3, #20]
			WS2812B_setLedColorHSV(flow->stripe, currentLED - 1, flow->hue,
 8005630:	085b      	lsrs	r3, r3, #1
 8005632:	b2db      	uxtb	r3, r3
 8005634:	9300      	str	r3, [sp, #0]
 8005636:	0023      	movs	r3, r4
 8005638:	f7ff fbd2 	bl	8004de0 <WS2812B_setLedColorHSV>
		if (currentLED > flow->beginLED + 1)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	891b      	ldrh	r3, [r3, #8]
 8005640:	3301      	adds	r3, #1
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	429a      	cmp	r2, r3
 8005646:	dd42      	ble.n	80056ce <wsfx_step_movingLight+0x180>
			WS2812B_setLedColorHSV(flow->stripe, currentLED - 2, flow->hue,
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6858      	ldr	r0, [r3, #4]
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	b29b      	uxth	r3, r3
 8005650:	3b02      	subs	r3, #2
 8005652:	b299      	uxth	r1, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	8a1a      	ldrh	r2, [r3, #16]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	7d5c      	ldrb	r4, [r3, #21]
					flow->saturation, flow->value / 4);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	7d1b      	ldrb	r3, [r3, #20]
			WS2812B_setLedColorHSV(flow->stripe, currentLED - 2, flow->hue,
 8005660:	089b      	lsrs	r3, r3, #2
 8005662:	b2db      	uxtb	r3, r3
 8005664:	9300      	str	r3, [sp, #0]
 8005666:	0023      	movs	r3, r4
 8005668:	f7ff fbba 	bl	8004de0 <WS2812B_setLedColorHSV>
 800566c:	e02f      	b.n	80056ce <wsfx_step_movingLight+0x180>
	} else {
		if (currentLED < flow->endLED)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	895b      	ldrh	r3, [r3, #10]
 8005672:	001a      	movs	r2, r3
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	4293      	cmp	r3, r2
 8005678:	da11      	bge.n	800569e <wsfx_step_movingLight+0x150>
			WS2812B_setLedColorHSV(flow->stripe, currentLED + 1, flow->hue,
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6858      	ldr	r0, [r3, #4]
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	b29b      	uxth	r3, r3
 8005682:	3301      	adds	r3, #1
 8005684:	b299      	uxth	r1, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	8a1a      	ldrh	r2, [r3, #16]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	7d5c      	ldrb	r4, [r3, #21]
					flow->saturation, flow->value / 2);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	7d1b      	ldrb	r3, [r3, #20]
			WS2812B_setLedColorHSV(flow->stripe, currentLED + 1, flow->hue,
 8005692:	085b      	lsrs	r3, r3, #1
 8005694:	b2db      	uxtb	r3, r3
 8005696:	9300      	str	r3, [sp, #0]
 8005698:	0023      	movs	r3, r4
 800569a:	f7ff fba1 	bl	8004de0 <WS2812B_setLedColorHSV>
		if (currentLED + 2 < flow->endLED + 1)
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	3301      	adds	r3, #1
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	8952      	ldrh	r2, [r2, #10]
 80056a6:	4293      	cmp	r3, r2
 80056a8:	da11      	bge.n	80056ce <wsfx_step_movingLight+0x180>
			WS2812B_setLedColorHSV(flow->stripe, currentLED + 2, flow->hue,
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6858      	ldr	r0, [r3, #4]
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	3302      	adds	r3, #2
 80056b4:	b299      	uxth	r1, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	8a1a      	ldrh	r2, [r3, #16]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	7d5c      	ldrb	r4, [r3, #21]
					flow->saturation, flow->value / 4);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	7d1b      	ldrb	r3, [r3, #20]
			WS2812B_setLedColorHSV(flow->stripe, currentLED + 2, flow->hue,
 80056c2:	089b      	lsrs	r3, r3, #2
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	0023      	movs	r3, r4
 80056ca:	f7ff fb89 	bl	8004de0 <WS2812B_setLedColorHSV>
	}

	WS2812B_Refresh(flow->stripe);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	0018      	movs	r0, r3
 80056d4:	f7ff fcb0 	bl	8005038 <WS2812B_Refresh>

}
 80056d8:	46c0      	nop			; (mov r8, r8)
 80056da:	46bd      	mov	sp, r7
 80056dc:	b007      	add	sp, #28
 80056de:	bd90      	pop	{r4, r7, pc}

080056e0 <wsfx_step_pulse>:

	WS2812B_Refresh(flow->stripe);

}

void wsfx_step_pulse(wsfxEffectFlow_TypeDef *flow) {
 80056e0:	b5b0      	push	{r4, r5, r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af02      	add	r7, sp, #8
 80056e6:	6078      	str	r0, [r7, #4]

	flow->steps = 20;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2214      	movs	r2, #20
 80056ec:	819a      	strh	r2, [r3, #12]

	uint8_t actualValue = 0;
 80056ee:	200f      	movs	r0, #15
 80056f0:	183b      	adds	r3, r7, r0
 80056f2:	2200      	movs	r2, #0
 80056f4:	701a      	strb	r2, [r3, #0]

	if (flow->counter < 5) {
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	881b      	ldrh	r3, [r3, #0]
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	2b04      	cmp	r3, #4
 80056fe:	d814      	bhi.n	800572a <wsfx_step_pulse+0x4a>
		uint8_t divider = 6 - flow->counter;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	881b      	ldrh	r3, [r3, #0]
 8005704:	b29b      	uxth	r3, r3
 8005706:	b2da      	uxtb	r2, r3
 8005708:	250e      	movs	r5, #14
 800570a:	197b      	adds	r3, r7, r5
 800570c:	2106      	movs	r1, #6
 800570e:	1a8a      	subs	r2, r1, r2
 8005710:	701a      	strb	r2, [r3, #0]
		actualValue = flow->value / divider;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	7d1a      	ldrb	r2, [r3, #20]
 8005716:	183c      	adds	r4, r7, r0
 8005718:	197b      	adds	r3, r7, r5
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	0019      	movs	r1, r3
 800571e:	0010      	movs	r0, r2
 8005720:	f7fa fcf0 	bl	8000104 <__udivsi3>
 8005724:	0003      	movs	r3, r0
 8005726:	7023      	strb	r3, [r4, #0]
 8005728:	e01a      	b.n	8005760 <wsfx_step_pulse+0x80>
	}

	else if (flow->counter == 5) {
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	881b      	ldrh	r3, [r3, #0]
 800572e:	b29b      	uxth	r3, r3
 8005730:	2b05      	cmp	r3, #5
 8005732:	d105      	bne.n	8005740 <wsfx_step_pulse+0x60>
		actualValue = flow->value;
 8005734:	230f      	movs	r3, #15
 8005736:	18fb      	adds	r3, r7, r3
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	7d12      	ldrb	r2, [r2, #20]
 800573c:	701a      	strb	r2, [r3, #0]
 800573e:	e00f      	b.n	8005760 <wsfx_step_pulse+0x80>
	} else {
		actualValue = flow->value / (flow->counter * 2);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	7d1b      	ldrb	r3, [r3, #20]
 8005744:	001a      	movs	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	881b      	ldrh	r3, [r3, #0]
 800574a:	b29b      	uxth	r3, r3
 800574c:	005b      	lsls	r3, r3, #1
 800574e:	0019      	movs	r1, r3
 8005750:	0010      	movs	r0, r2
 8005752:	f7fa fd61 	bl	8000218 <__divsi3>
 8005756:	0003      	movs	r3, r0
 8005758:	001a      	movs	r2, r3
 800575a:	230f      	movs	r3, #15
 800575c:	18fb      	adds	r3, r7, r3
 800575e:	701a      	strb	r2, [r3, #0]
	}

	_groupAction(flow->stripe, flow->beginLED, flow->endLED, flow->hue,
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6858      	ldr	r0, [r3, #4]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	891b      	ldrh	r3, [r3, #8]
 8005768:	001c      	movs	r4, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	895b      	ldrh	r3, [r3, #10]
 800576e:	001d      	movs	r5, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	8a19      	ldrh	r1, [r3, #16]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	7d5b      	ldrb	r3, [r3, #21]
 8005778:	220f      	movs	r2, #15
 800577a:	18ba      	adds	r2, r7, r2
 800577c:	7812      	ldrb	r2, [r2, #0]
 800577e:	9201      	str	r2, [sp, #4]
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	000b      	movs	r3, r1
 8005784:	002a      	movs	r2, r5
 8005786:	0021      	movs	r1, r4
 8005788:	f7ff fe9e 	bl	80054c8 <_groupAction>
			flow->saturation, actualValue);

	WS2812B_Refresh(flow->stripe);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	0018      	movs	r0, r3
 8005792:	f7ff fc51 	bl	8005038 <WS2812B_Refresh>

}
 8005796:	46c0      	nop			; (mov r8, r8)
 8005798:	46bd      	mov	sp, r7
 800579a:	b004      	add	sp, #16
 800579c:	bdb0      	pop	{r4, r5, r7, pc}

0800579e <wsfx_step_blinker>:

void wsfx_step_blinker(wsfxEffectFlow_TypeDef *flow) {
 800579e:	b5b0      	push	{r4, r5, r7, lr}
 80057a0:	b086      	sub	sp, #24
 80057a2:	af02      	add	r7, sp, #8
 80057a4:	6078      	str	r0, [r7, #4]

	flow->steps = 16;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2210      	movs	r2, #16
 80057aa:	819a      	strh	r2, [r3, #12]

	int leds = flow->endLED - flow->beginLED + 1;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	895b      	ldrh	r3, [r3, #10]
 80057b0:	001a      	movs	r2, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	891b      	ldrh	r3, [r3, #8]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	3301      	adds	r3, #1
 80057ba:	60fb      	str	r3, [r7, #12]

	int midLED = leds / 2;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	da00      	bge.n	80057c4 <wsfx_step_blinker+0x26>
 80057c2:	3301      	adds	r3, #1
 80057c4:	105b      	asrs	r3, r3, #1
 80057c6:	60bb      	str	r3, [r7, #8]

	if (flow->counter & 1) { //for odd turn off LEDs
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	881b      	ldrh	r3, [r3, #0]
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	001a      	movs	r2, r3
 80057d0:	2301      	movs	r3, #1
 80057d2:	4013      	ands	r3, r2
 80057d4:	d00a      	beq.n	80057ec <wsfx_step_blinker+0x4e>

		_groupTurnOff(flow->stripe, flow->beginLED, flow->endLED);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6858      	ldr	r0, [r3, #4]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	891b      	ldrh	r3, [r3, #8]
 80057de:	0019      	movs	r1, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	895b      	ldrh	r3, [r3, #10]
 80057e4:	001a      	movs	r2, r3
 80057e6:	f7ff fe96 	bl	8005516 <_groupTurnOff>
 80057ea:	e036      	b.n	800585a <wsfx_step_blinker+0xbc>

	} else {

		if (flow->counter < flow->steps / 2) { // light first color
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	881b      	ldrh	r3, [r3, #0]
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	899b      	ldrh	r3, [r3, #12]
 80057f6:	085b      	lsrs	r3, r3, #1
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d217      	bcs.n	800582e <wsfx_step_blinker+0x90>

			_groupAction(flow->stripe, flow->beginLED, flow->beginLED + midLED,
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6858      	ldr	r0, [r3, #4]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	891b      	ldrh	r3, [r3, #8]
 8005806:	001d      	movs	r5, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	891b      	ldrh	r3, [r3, #8]
 800580c:	001a      	movs	r2, r3
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	18d1      	adds	r1, r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	8a1c      	ldrh	r4, [r3, #16]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	7d5b      	ldrb	r3, [r3, #21]
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	7d12      	ldrb	r2, [r2, #20]
 800581e:	9201      	str	r2, [sp, #4]
 8005820:	9300      	str	r3, [sp, #0]
 8005822:	0023      	movs	r3, r4
 8005824:	000a      	movs	r2, r1
 8005826:	0029      	movs	r1, r5
 8005828:	f7ff fe4e 	bl	80054c8 <_groupAction>
 800582c:	e015      	b.n	800585a <wsfx_step_blinker+0xbc>
					flow->hue, flow->saturation, flow->value);

		} else { //light second color

			_groupAction(flow->stripe, flow->beginLED + midLED, flow->endLED,
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6858      	ldr	r0, [r3, #4]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	891b      	ldrh	r3, [r3, #8]
 8005836:	001a      	movs	r2, r3
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	18d1      	adds	r1, r2, r3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	895b      	ldrh	r3, [r3, #10]
 8005840:	001d      	movs	r5, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	8a5c      	ldrh	r4, [r3, #18]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	7d5b      	ldrb	r3, [r3, #21]
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	7d12      	ldrb	r2, [r2, #20]
 800584e:	9201      	str	r2, [sp, #4]
 8005850:	9300      	str	r3, [sp, #0]
 8005852:	0023      	movs	r3, r4
 8005854:	002a      	movs	r2, r5
 8005856:	f7ff fe37 	bl	80054c8 <_groupAction>
					flow->hue2, flow->saturation, flow->value);

		}
	}

	WS2812B_Refresh(flow->stripe);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	0018      	movs	r0, r3
 8005860:	f7ff fbea 	bl	8005038 <WS2812B_Refresh>

}
 8005864:	46c0      	nop			; (mov r8, r8)
 8005866:	46bd      	mov	sp, r7
 8005868:	b004      	add	sp, #16
 800586a:	bdb0      	pop	{r4, r5, r7, pc}

0800586c <wsfx_step_starting>:

	WS2812B_Refresh(flow->stripe);

}

void wsfx_step_starting(wsfxEffectFlow_TypeDef *flow) {
 800586c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800586e:	46ce      	mov	lr, r9
 8005870:	4647      	mov	r7, r8
 8005872:	b580      	push	{r7, lr}
 8005874:	b089      	sub	sp, #36	; 0x24
 8005876:	af02      	add	r7, sp, #8
 8005878:	6078      	str	r0, [r7, #4]

	int leds = flow->endLED - flow->beginLED + 1;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	895b      	ldrh	r3, [r3, #10]
 800587e:	001a      	movs	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	891b      	ldrh	r3, [r3, #8]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	3301      	adds	r3, #1
 8005888:	617b      	str	r3, [r7, #20]

	flow->steps = (leds) * 2 + 20;
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	330a      	adds	r3, #10
 800588e:	b29b      	uxth	r3, r3
 8005890:	18db      	adds	r3, r3, r3
 8005892:	b29a      	uxth	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	819a      	strh	r2, [r3, #12]

	int currentLED1, currentLED2;

	if (flow->counter < (flow->steps - 20) / 2) { //first stage
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	881b      	ldrh	r3, [r3, #0]
 800589c:	b29b      	uxth	r3, r3
 800589e:	001a      	movs	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	899b      	ldrh	r3, [r3, #12]
 80058a4:	3b14      	subs	r3, #20
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	da00      	bge.n	80058ac <wsfx_step_starting+0x40>
 80058aa:	3301      	adds	r3, #1
 80058ac:	105b      	asrs	r3, r3, #1
 80058ae:	429a      	cmp	r2, r3
 80058b0:	da3a      	bge.n	8005928 <wsfx_step_starting+0xbc>

		_groupTurnOff(flow->stripe, flow->beginLED, flow->endLED);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6858      	ldr	r0, [r3, #4]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	891b      	ldrh	r3, [r3, #8]
 80058ba:	0019      	movs	r1, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	895b      	ldrh	r3, [r3, #10]
 80058c0:	001a      	movs	r2, r3
 80058c2:	f7ff fe28 	bl	8005516 <_groupTurnOff>
		currentLED1 = flow->beginLED + flow->counter;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	891b      	ldrh	r3, [r3, #8]
 80058ca:	001a      	movs	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	881b      	ldrh	r3, [r3, #0]
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	18d3      	adds	r3, r2, r3
 80058d4:	60fb      	str	r3, [r7, #12]
		currentLED2 = flow->endLED - flow->counter;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	895b      	ldrh	r3, [r3, #10]
 80058da:	001a      	movs	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	881b      	ldrh	r3, [r3, #0]
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	60bb      	str	r3, [r7, #8]

		WS2812B_setLedColorHSV(flow->stripe, currentLED1, flow->hue,
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6858      	ldr	r0, [r3, #4]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	b299      	uxth	r1, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	8a1a      	ldrh	r2, [r3, #16]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	7d5c      	ldrb	r4, [r3, #21]
				flow->saturation, flow->value / 4);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	7d1b      	ldrb	r3, [r3, #20]
		WS2812B_setLedColorHSV(flow->stripe, currentLED1, flow->hue,
 80058fa:	089b      	lsrs	r3, r3, #2
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	9300      	str	r3, [sp, #0]
 8005900:	0023      	movs	r3, r4
 8005902:	f7ff fa6d 	bl	8004de0 <WS2812B_setLedColorHSV>
		WS2812B_setLedColorHSV(flow->stripe, currentLED2, flow->hue,
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6858      	ldr	r0, [r3, #4]
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	b299      	uxth	r1, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	8a1a      	ldrh	r2, [r3, #16]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	7d5c      	ldrb	r4, [r3, #21]
				flow->saturation, flow->value / 4);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	7d1b      	ldrb	r3, [r3, #20]
		WS2812B_setLedColorHSV(flow->stripe, currentLED2, flow->hue,
 800591a:	089b      	lsrs	r3, r3, #2
 800591c:	b2db      	uxtb	r3, r3
 800591e:	9300      	str	r3, [sp, #0]
 8005920:	0023      	movs	r3, r4
 8005922:	f7ff fa5d 	bl	8004de0 <WS2812B_setLedColorHSV>
 8005926:	e0b3      	b.n	8005a90 <wsfx_step_starting+0x224>

	} else if (flow->counter < flow->steps - 20 - leds / 2) { //second stage
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	881b      	ldrh	r3, [r3, #0]
 800592c:	b29b      	uxth	r3, r3
 800592e:	0019      	movs	r1, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	899b      	ldrh	r3, [r3, #12]
 8005934:	3b14      	subs	r3, #20
 8005936:	001a      	movs	r2, r3
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	2b00      	cmp	r3, #0
 800593c:	da00      	bge.n	8005940 <wsfx_step_starting+0xd4>
 800593e:	3301      	adds	r3, #1
 8005940:	105b      	asrs	r3, r3, #1
 8005942:	425b      	negs	r3, r3
 8005944:	18d3      	adds	r3, r2, r3
 8005946:	4299      	cmp	r1, r3
 8005948:	da38      	bge.n	80059bc <wsfx_step_starting+0x150>

		currentLED1 = flow->beginLED + (flow->counter - flow->endLED);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	891b      	ldrh	r3, [r3, #8]
 800594e:	001a      	movs	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	881b      	ldrh	r3, [r3, #0]
 8005954:	b29b      	uxth	r3, r3
 8005956:	0019      	movs	r1, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	895b      	ldrh	r3, [r3, #10]
 800595c:	1acb      	subs	r3, r1, r3
 800595e:	18d3      	adds	r3, r2, r3
 8005960:	60fb      	str	r3, [r7, #12]
		currentLED2 = flow->endLED - (flow->counter - flow->endLED);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	895b      	ldrh	r3, [r3, #10]
 8005966:	001a      	movs	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	881b      	ldrh	r3, [r3, #0]
 800596c:	b29b      	uxth	r3, r3
 800596e:	0019      	movs	r1, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	895b      	ldrh	r3, [r3, #10]
 8005974:	1acb      	subs	r3, r1, r3
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	60bb      	str	r3, [r7, #8]

		WS2812B_setLedColorHSV(flow->stripe, currentLED1, flow->hue,
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6858      	ldr	r0, [r3, #4]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	b299      	uxth	r1, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	8a1a      	ldrh	r2, [r3, #16]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	7d5c      	ldrb	r4, [r3, #21]
				flow->saturation, flow->value / 4);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	7d1b      	ldrb	r3, [r3, #20]
		WS2812B_setLedColorHSV(flow->stripe, currentLED1, flow->hue,
 800598e:	089b      	lsrs	r3, r3, #2
 8005990:	b2db      	uxtb	r3, r3
 8005992:	9300      	str	r3, [sp, #0]
 8005994:	0023      	movs	r3, r4
 8005996:	f7ff fa23 	bl	8004de0 <WS2812B_setLedColorHSV>
		WS2812B_setLedColorHSV(flow->stripe, currentLED2, flow->hue,
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6858      	ldr	r0, [r3, #4]
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	b299      	uxth	r1, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	8a1a      	ldrh	r2, [r3, #16]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	7d5c      	ldrb	r4, [r3, #21]
				flow->saturation, flow->value / 4);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	7d1b      	ldrb	r3, [r3, #20]
		WS2812B_setLedColorHSV(flow->stripe, currentLED2, flow->hue,
 80059ae:	089b      	lsrs	r3, r3, #2
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	0023      	movs	r3, r4
 80059b6:	f7ff fa13 	bl	8004de0 <WS2812B_setLedColorHSV>
 80059ba:	e069      	b.n	8005a90 <wsfx_step_starting+0x224>

	} else if (flow->counter <= flow->steps - 20) { //third stage
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	899b      	ldrh	r3, [r3, #12]
 80059c0:	3b13      	subs	r3, #19
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	8812      	ldrh	r2, [r2, #0]
 80059c6:	b292      	uxth	r2, r2
 80059c8:	4293      	cmp	r3, r2
 80059ca:	dd36      	ble.n	8005a3a <wsfx_step_starting+0x1ce>

		currentLED1 = flow->beginLED + (flow->counter - flow->endLED - 1);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	891b      	ldrh	r3, [r3, #8]
 80059d0:	001a      	movs	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	881b      	ldrh	r3, [r3, #0]
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	0019      	movs	r1, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	895b      	ldrh	r3, [r3, #10]
 80059de:	1acb      	subs	r3, r1, r3
 80059e0:	3b01      	subs	r3, #1
 80059e2:	18d3      	adds	r3, r2, r3
 80059e4:	60fb      	str	r3, [r7, #12]
		currentLED2 = flow->endLED - (flow->counter - flow->endLED - 1);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	895b      	ldrh	r3, [r3, #10]
 80059ea:	001a      	movs	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	881b      	ldrh	r3, [r3, #0]
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	0019      	movs	r1, r3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	895b      	ldrh	r3, [r3, #10]
 80059f8:	1acb      	subs	r3, r1, r3
 80059fa:	3b01      	subs	r3, #1
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	60bb      	str	r3, [r7, #8]

		WS2812B_setLedColorHSV(flow->stripe, currentLED1, flow->hue,
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6858      	ldr	r0, [r3, #4]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	b299      	uxth	r1, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	8a1a      	ldrh	r2, [r3, #16]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	7d5c      	ldrb	r4, [r3, #21]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	7d1b      	ldrb	r3, [r3, #20]
 8005a14:	9300      	str	r3, [sp, #0]
 8005a16:	0023      	movs	r3, r4
 8005a18:	f7ff f9e2 	bl	8004de0 <WS2812B_setLedColorHSV>
				flow->saturation, flow->value);
		WS2812B_setLedColorHSV(flow->stripe, currentLED2, flow->hue,
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6858      	ldr	r0, [r3, #4]
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	b299      	uxth	r1, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	8a1a      	ldrh	r2, [r3, #16]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	7d5c      	ldrb	r4, [r3, #21]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	7d1b      	ldrb	r3, [r3, #20]
 8005a30:	9300      	str	r3, [sp, #0]
 8005a32:	0023      	movs	r3, r4
 8005a34:	f7ff f9d4 	bl	8004de0 <WS2812B_setLedColorHSV>
 8005a38:	e02a      	b.n	8005a90 <wsfx_step_starting+0x224>
				flow->saturation, flow->value);

	} else { //last stage

		uint8_t divider = flow->counter - (flow->steps - 20);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	881b      	ldrh	r3, [r3, #0]
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	b2da      	uxtb	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	899b      	ldrh	r3, [r3, #12]
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	b2da      	uxtb	r2, r3
 8005a4c:	2113      	movs	r1, #19
 8005a4e:	187b      	adds	r3, r7, r1
 8005a50:	3214      	adds	r2, #20
 8005a52:	701a      	strb	r2, [r3, #0]

		_groupAction(flow->stripe, flow->beginLED, flow->endLED, flow->hue,
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685d      	ldr	r5, [r3, #4]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	891b      	ldrh	r3, [r3, #8]
 8005a5c:	4698      	mov	r8, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	895b      	ldrh	r3, [r3, #10]
 8005a62:	4699      	mov	r9, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	8a1e      	ldrh	r6, [r3, #16]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	7d5c      	ldrb	r4, [r3, #21]
				flow->saturation, flow->value / divider);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	7d1a      	ldrb	r2, [r3, #20]
		_groupAction(flow->stripe, flow->beginLED, flow->endLED, flow->hue,
 8005a70:	187b      	adds	r3, r7, r1
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	0019      	movs	r1, r3
 8005a76:	0010      	movs	r0, r2
 8005a78:	f7fa fb44 	bl	8000104 <__udivsi3>
 8005a7c:	0003      	movs	r3, r0
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	9301      	str	r3, [sp, #4]
 8005a82:	9400      	str	r4, [sp, #0]
 8005a84:	0033      	movs	r3, r6
 8005a86:	464a      	mov	r2, r9
 8005a88:	4641      	mov	r1, r8
 8005a8a:	0028      	movs	r0, r5
 8005a8c:	f7ff fd1c 	bl	80054c8 <_groupAction>

	}

	WS2812B_Refresh(flow->stripe);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	0018      	movs	r0, r3
 8005a96:	f7ff facf 	bl	8005038 <WS2812B_Refresh>

}
 8005a9a:	46c0      	nop			; (mov r8, r8)
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	b007      	add	sp, #28
 8005aa0:	bcc0      	pop	{r6, r7}
 8005aa2:	46b9      	mov	r9, r7
 8005aa4:	46b0      	mov	r8, r6
 8005aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005aa8 <wsfx_step_constantColor>:

void wsfx_step_constantColor(wsfxEffectFlow_TypeDef *flow) {
 8005aa8:	b5b0      	push	{r4, r5, r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af02      	add	r7, sp, #8
 8005aae:	6078      	str	r0, [r7, #4]

	flow->steps = 20;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2214      	movs	r2, #20
 8005ab4:	819a      	strh	r2, [r3, #12]

	_groupAction(flow->stripe, flow->beginLED, flow->endLED, flow->hue,
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6858      	ldr	r0, [r3, #4]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	891b      	ldrh	r3, [r3, #8]
 8005abe:	001c      	movs	r4, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	895b      	ldrh	r3, [r3, #10]
 8005ac4:	001d      	movs	r5, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	8a19      	ldrh	r1, [r3, #16]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	7d5b      	ldrb	r3, [r3, #21]
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	7d12      	ldrb	r2, [r2, #20]
 8005ad2:	9201      	str	r2, [sp, #4]
 8005ad4:	9300      	str	r3, [sp, #0]
 8005ad6:	000b      	movs	r3, r1
 8005ad8:	002a      	movs	r2, r5
 8005ada:	0021      	movs	r1, r4
 8005adc:	f7ff fcf4 	bl	80054c8 <_groupAction>
			flow->saturation, flow->value);

	WS2812B_Refresh(flow->stripe);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	0018      	movs	r0, r3
 8005ae6:	f7ff faa7 	bl	8005038 <WS2812B_Refresh>

}
 8005aea:	46c0      	nop			; (mov r8, r8)
 8005aec:	46bd      	mov	sp, r7
 8005aee:	b002      	add	sp, #8
 8005af0:	bdb0      	pop	{r4, r5, r7, pc}

08005af2 <wsfx_step_warpHalf>:

	WS2812B_Refresh(flow->stripe);

}

void wsfx_step_warpHalf(wsfxEffectFlow_TypeDef *flow) {
 8005af2:	b590      	push	{r4, r7, lr}
 8005af4:	b089      	sub	sp, #36	; 0x24
 8005af6:	af02      	add	r7, sp, #8
 8005af8:	6078      	str	r0, [r7, #4]

	int leds = flow->endLED - flow->beginLED + 1;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	895b      	ldrh	r3, [r3, #10]
 8005afe:	001a      	movs	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	891b      	ldrh	r3, [r3, #8]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	3301      	adds	r3, #1
 8005b08:	617b      	str	r3, [r7, #20]

	flow->steps = (leds) / 2 / 2;
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	da00      	bge.n	8005b12 <wsfx_step_warpHalf+0x20>
 8005b10:	3303      	adds	r3, #3
 8005b12:	109b      	asrs	r3, r3, #2
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	819a      	strh	r2, [r3, #12]

	int currentLED1, currentLED2;

	_groupTurnOff(flow->stripe, flow->beginLED, flow->beginLED + flow->steps);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6858      	ldr	r0, [r3, #4]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	891b      	ldrh	r3, [r3, #8]
 8005b22:	0019      	movs	r1, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	891b      	ldrh	r3, [r3, #8]
 8005b28:	001a      	movs	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	899b      	ldrh	r3, [r3, #12]
 8005b2e:	18d3      	adds	r3, r2, r3
 8005b30:	001a      	movs	r2, r3
 8005b32:	f7ff fcf0 	bl	8005516 <_groupTurnOff>
	_groupTurnOff(flow->stripe, flow->endLED - flow->steps, flow->endLED);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6858      	ldr	r0, [r3, #4]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	895b      	ldrh	r3, [r3, #10]
 8005b3e:	001a      	movs	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	899b      	ldrh	r3, [r3, #12]
 8005b44:	1ad1      	subs	r1, r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	895b      	ldrh	r3, [r3, #10]
 8005b4a:	001a      	movs	r2, r3
 8005b4c:	f7ff fce3 	bl	8005516 <_groupTurnOff>

	currentLED1 = flow->beginLED + flow->counter;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	891b      	ldrh	r3, [r3, #8]
 8005b54:	001a      	movs	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	881b      	ldrh	r3, [r3, #0]
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	18d3      	adds	r3, r2, r3
 8005b5e:	613b      	str	r3, [r7, #16]
	currentLED2 = flow->endLED - flow->counter;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	895b      	ldrh	r3, [r3, #10]
 8005b64:	001a      	movs	r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	881b      	ldrh	r3, [r3, #0]
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	60fb      	str	r3, [r7, #12]

	WS2812B_setLedColorHSV(flow->stripe, currentLED1, flow->hue,
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6858      	ldr	r0, [r3, #4]
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	b299      	uxth	r1, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	8a1a      	ldrh	r2, [r3, #16]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	7d5c      	ldrb	r4, [r3, #21]
			flow->saturation, flow->value / 4);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	7d1b      	ldrb	r3, [r3, #20]
	WS2812B_setLedColorHSV(flow->stripe, currentLED1, flow->hue,
 8005b84:	089b      	lsrs	r3, r3, #2
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	9300      	str	r3, [sp, #0]
 8005b8a:	0023      	movs	r3, r4
 8005b8c:	f7ff f928 	bl	8004de0 <WS2812B_setLedColorHSV>
	WS2812B_setLedColorHSV(flow->stripe, currentLED2, flow->hue,
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6858      	ldr	r0, [r3, #4]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	b299      	uxth	r1, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	8a1a      	ldrh	r2, [r3, #16]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	7d5c      	ldrb	r4, [r3, #21]
			flow->saturation, flow->value / 4);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	7d1b      	ldrb	r3, [r3, #20]
	WS2812B_setLedColorHSV(flow->stripe, currentLED2, flow->hue,
 8005ba4:	089b      	lsrs	r3, r3, #2
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	9300      	str	r3, [sp, #0]
 8005baa:	0023      	movs	r3, r4
 8005bac:	f7ff f918 	bl	8004de0 <WS2812B_setLedColorHSV>

	WS2812B_Refresh(flow->stripe);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	0018      	movs	r0, r3
 8005bb6:	f7ff fa3f 	bl	8005038 <WS2812B_Refresh>

}
 8005bba:	46c0      	nop			; (mov r8, r8)
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	b007      	add	sp, #28
 8005bc0:	bd90      	pop	{r4, r7, pc}

08005bc2 <wsfx_step_wave>:

void wsfx_step_wave(wsfxEffectFlow_TypeDef *flow) {
 8005bc2:	b5b0      	push	{r4, r5, r7, lr}
 8005bc4:	b086      	sub	sp, #24
 8005bc6:	af02      	add	r7, sp, #8
 8005bc8:	6078      	str	r0, [r7, #4]

	flow->steps = 360;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	22b4      	movs	r2, #180	; 0xb4
 8005bce:	0052      	lsls	r2, r2, #1
 8005bd0:	819a      	strh	r2, [r3, #12]

	int baseColor = flow->counter;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	881b      	ldrh	r3, [r3, #0]
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	60bb      	str	r3, [r7, #8]

	for (int led = 0; led < flow->endLED - flow->beginLED; led++) {
 8005bda:	2300      	movs	r3, #0
 8005bdc:	60fb      	str	r3, [r7, #12]
 8005bde:	e01f      	b.n	8005c20 <wsfx_step_wave+0x5e>
		WS2812B_setLedColorHSV(flow->stripe, led, (baseColor+(led * flow->shift))%359,
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685c      	ldr	r4, [r3, #4]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	b29d      	uxth	r5, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	89db      	ldrh	r3, [r3, #14]
 8005bec:	001a      	movs	r2, r3
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	435a      	muls	r2, r3
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	18d3      	adds	r3, r2, r3
 8005bf6:	2268      	movs	r2, #104	; 0x68
 8005bf8:	32ff      	adds	r2, #255	; 0xff
 8005bfa:	0011      	movs	r1, r2
 8005bfc:	0018      	movs	r0, r3
 8005bfe:	f7fa fbf1 	bl	80003e4 <__aeabi_idivmod>
 8005c02:	000b      	movs	r3, r1
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	7d59      	ldrb	r1, [r3, #21]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	7d1b      	ldrb	r3, [r3, #20]
 8005c0e:	9300      	str	r3, [sp, #0]
 8005c10:	000b      	movs	r3, r1
 8005c12:	0029      	movs	r1, r5
 8005c14:	0020      	movs	r0, r4
 8005c16:	f7ff f8e3 	bl	8004de0 <WS2812B_setLedColorHSV>
	for (int led = 0; led < flow->endLED - flow->beginLED; led++) {
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	60fb      	str	r3, [r7, #12]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	895b      	ldrh	r3, [r3, #10]
 8005c24:	001a      	movs	r2, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	891b      	ldrh	r3, [r3, #8]
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	dbd6      	blt.n	8005be0 <wsfx_step_wave+0x1e>
				flow->saturation, flow->value);
	}

	WS2812B_Refresh(flow->stripe);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	0018      	movs	r0, r3
 8005c38:	f7ff f9fe 	bl	8005038 <WS2812B_Refresh>

}
 8005c3c:	46c0      	nop			; (mov r8, r8)
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	b004      	add	sp, #16
 8005c42:	bdb0      	pop	{r4, r5, r7, pc}

08005c44 <Reset_Handler>:
 8005c44:	480d      	ldr	r0, [pc, #52]	; (8005c7c <LoopForever+0x2>)
 8005c46:	4685      	mov	sp, r0
 8005c48:	f7fe ffd4 	bl	8004bf4 <SystemInit>
 8005c4c:	480c      	ldr	r0, [pc, #48]	; (8005c80 <LoopForever+0x6>)
 8005c4e:	490d      	ldr	r1, [pc, #52]	; (8005c84 <LoopForever+0xa>)
 8005c50:	4a0d      	ldr	r2, [pc, #52]	; (8005c88 <LoopForever+0xe>)
 8005c52:	2300      	movs	r3, #0
 8005c54:	e002      	b.n	8005c5c <LoopCopyDataInit>

08005c56 <CopyDataInit>:
 8005c56:	58d4      	ldr	r4, [r2, r3]
 8005c58:	50c4      	str	r4, [r0, r3]
 8005c5a:	3304      	adds	r3, #4

08005c5c <LoopCopyDataInit>:
 8005c5c:	18c4      	adds	r4, r0, r3
 8005c5e:	428c      	cmp	r4, r1
 8005c60:	d3f9      	bcc.n	8005c56 <CopyDataInit>
 8005c62:	4a0a      	ldr	r2, [pc, #40]	; (8005c8c <LoopForever+0x12>)
 8005c64:	4c0a      	ldr	r4, [pc, #40]	; (8005c90 <LoopForever+0x16>)
 8005c66:	2300      	movs	r3, #0
 8005c68:	e001      	b.n	8005c6e <LoopFillZerobss>

08005c6a <FillZerobss>:
 8005c6a:	6013      	str	r3, [r2, #0]
 8005c6c:	3204      	adds	r2, #4

08005c6e <LoopFillZerobss>:
 8005c6e:	42a2      	cmp	r2, r4
 8005c70:	d3fb      	bcc.n	8005c6a <FillZerobss>
 8005c72:	f000 f8ef 	bl	8005e54 <__libc_init_array>
 8005c76:	f7fe fcaf 	bl	80045d8 <main>

08005c7a <LoopForever>:
 8005c7a:	e7fe      	b.n	8005c7a <LoopForever>
 8005c7c:	20009000 	.word	0x20009000
 8005c80:	20000000 	.word	0x20000000
 8005c84:	2000005c 	.word	0x2000005c
 8005c88:	080060f4 	.word	0x080060f4
 8005c8c:	2000005c 	.word	0x2000005c
 8005c90:	20000494 	.word	0x20000494

08005c94 <ADC1_COMP_IRQHandler>:
 8005c94:	e7fe      	b.n	8005c94 <ADC1_COMP_IRQHandler>
	...

08005c98 <malloc>:
 8005c98:	b510      	push	{r4, lr}
 8005c9a:	4b03      	ldr	r3, [pc, #12]	; (8005ca8 <malloc+0x10>)
 8005c9c:	0001      	movs	r1, r0
 8005c9e:	6818      	ldr	r0, [r3, #0]
 8005ca0:	f000 f826 	bl	8005cf0 <_malloc_r>
 8005ca4:	bd10      	pop	{r4, pc}
 8005ca6:	46c0      	nop			; (mov r8, r8)
 8005ca8:	20000058 	.word	0x20000058

08005cac <sbrk_aligned>:
 8005cac:	b570      	push	{r4, r5, r6, lr}
 8005cae:	4e0f      	ldr	r6, [pc, #60]	; (8005cec <sbrk_aligned+0x40>)
 8005cb0:	000d      	movs	r5, r1
 8005cb2:	6831      	ldr	r1, [r6, #0]
 8005cb4:	0004      	movs	r4, r0
 8005cb6:	2900      	cmp	r1, #0
 8005cb8:	d102      	bne.n	8005cc0 <sbrk_aligned+0x14>
 8005cba:	f000 f8b3 	bl	8005e24 <_sbrk_r>
 8005cbe:	6030      	str	r0, [r6, #0]
 8005cc0:	0029      	movs	r1, r5
 8005cc2:	0020      	movs	r0, r4
 8005cc4:	f000 f8ae 	bl	8005e24 <_sbrk_r>
 8005cc8:	1c43      	adds	r3, r0, #1
 8005cca:	d00a      	beq.n	8005ce2 <sbrk_aligned+0x36>
 8005ccc:	2303      	movs	r3, #3
 8005cce:	1cc5      	adds	r5, r0, #3
 8005cd0:	439d      	bics	r5, r3
 8005cd2:	42a8      	cmp	r0, r5
 8005cd4:	d007      	beq.n	8005ce6 <sbrk_aligned+0x3a>
 8005cd6:	1a29      	subs	r1, r5, r0
 8005cd8:	0020      	movs	r0, r4
 8005cda:	f000 f8a3 	bl	8005e24 <_sbrk_r>
 8005cde:	3001      	adds	r0, #1
 8005ce0:	d101      	bne.n	8005ce6 <sbrk_aligned+0x3a>
 8005ce2:	2501      	movs	r5, #1
 8005ce4:	426d      	negs	r5, r5
 8005ce6:	0028      	movs	r0, r5
 8005ce8:	bd70      	pop	{r4, r5, r6, pc}
 8005cea:	46c0      	nop			; (mov r8, r8)
 8005cec:	20000350 	.word	0x20000350

08005cf0 <_malloc_r>:
 8005cf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cf2:	2203      	movs	r2, #3
 8005cf4:	1ccb      	adds	r3, r1, #3
 8005cf6:	4393      	bics	r3, r2
 8005cf8:	3308      	adds	r3, #8
 8005cfa:	0006      	movs	r6, r0
 8005cfc:	001f      	movs	r7, r3
 8005cfe:	2b0c      	cmp	r3, #12
 8005d00:	d238      	bcs.n	8005d74 <_malloc_r+0x84>
 8005d02:	270c      	movs	r7, #12
 8005d04:	42b9      	cmp	r1, r7
 8005d06:	d837      	bhi.n	8005d78 <_malloc_r+0x88>
 8005d08:	0030      	movs	r0, r6
 8005d0a:	f000 f873 	bl	8005df4 <__malloc_lock>
 8005d0e:	4b38      	ldr	r3, [pc, #224]	; (8005df0 <_malloc_r+0x100>)
 8005d10:	9300      	str	r3, [sp, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	001c      	movs	r4, r3
 8005d16:	2c00      	cmp	r4, #0
 8005d18:	d133      	bne.n	8005d82 <_malloc_r+0x92>
 8005d1a:	0039      	movs	r1, r7
 8005d1c:	0030      	movs	r0, r6
 8005d1e:	f7ff ffc5 	bl	8005cac <sbrk_aligned>
 8005d22:	0004      	movs	r4, r0
 8005d24:	1c43      	adds	r3, r0, #1
 8005d26:	d15e      	bne.n	8005de6 <_malloc_r+0xf6>
 8005d28:	9b00      	ldr	r3, [sp, #0]
 8005d2a:	681c      	ldr	r4, [r3, #0]
 8005d2c:	0025      	movs	r5, r4
 8005d2e:	2d00      	cmp	r5, #0
 8005d30:	d14e      	bne.n	8005dd0 <_malloc_r+0xe0>
 8005d32:	2c00      	cmp	r4, #0
 8005d34:	d051      	beq.n	8005dda <_malloc_r+0xea>
 8005d36:	6823      	ldr	r3, [r4, #0]
 8005d38:	0029      	movs	r1, r5
 8005d3a:	18e3      	adds	r3, r4, r3
 8005d3c:	0030      	movs	r0, r6
 8005d3e:	9301      	str	r3, [sp, #4]
 8005d40:	f000 f870 	bl	8005e24 <_sbrk_r>
 8005d44:	9b01      	ldr	r3, [sp, #4]
 8005d46:	4283      	cmp	r3, r0
 8005d48:	d147      	bne.n	8005dda <_malloc_r+0xea>
 8005d4a:	6823      	ldr	r3, [r4, #0]
 8005d4c:	0030      	movs	r0, r6
 8005d4e:	1aff      	subs	r7, r7, r3
 8005d50:	0039      	movs	r1, r7
 8005d52:	f7ff ffab 	bl	8005cac <sbrk_aligned>
 8005d56:	3001      	adds	r0, #1
 8005d58:	d03f      	beq.n	8005dda <_malloc_r+0xea>
 8005d5a:	6823      	ldr	r3, [r4, #0]
 8005d5c:	19db      	adds	r3, r3, r7
 8005d5e:	6023      	str	r3, [r4, #0]
 8005d60:	9b00      	ldr	r3, [sp, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d040      	beq.n	8005dea <_malloc_r+0xfa>
 8005d68:	685a      	ldr	r2, [r3, #4]
 8005d6a:	42a2      	cmp	r2, r4
 8005d6c:	d133      	bne.n	8005dd6 <_malloc_r+0xe6>
 8005d6e:	2200      	movs	r2, #0
 8005d70:	605a      	str	r2, [r3, #4]
 8005d72:	e014      	b.n	8005d9e <_malloc_r+0xae>
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	dac5      	bge.n	8005d04 <_malloc_r+0x14>
 8005d78:	230c      	movs	r3, #12
 8005d7a:	2500      	movs	r5, #0
 8005d7c:	6033      	str	r3, [r6, #0]
 8005d7e:	0028      	movs	r0, r5
 8005d80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005d82:	6821      	ldr	r1, [r4, #0]
 8005d84:	1bc9      	subs	r1, r1, r7
 8005d86:	d420      	bmi.n	8005dca <_malloc_r+0xda>
 8005d88:	290b      	cmp	r1, #11
 8005d8a:	d918      	bls.n	8005dbe <_malloc_r+0xce>
 8005d8c:	19e2      	adds	r2, r4, r7
 8005d8e:	6027      	str	r7, [r4, #0]
 8005d90:	42a3      	cmp	r3, r4
 8005d92:	d112      	bne.n	8005dba <_malloc_r+0xca>
 8005d94:	9b00      	ldr	r3, [sp, #0]
 8005d96:	601a      	str	r2, [r3, #0]
 8005d98:	6863      	ldr	r3, [r4, #4]
 8005d9a:	6011      	str	r1, [r2, #0]
 8005d9c:	6053      	str	r3, [r2, #4]
 8005d9e:	0030      	movs	r0, r6
 8005da0:	0025      	movs	r5, r4
 8005da2:	f000 f82f 	bl	8005e04 <__malloc_unlock>
 8005da6:	2207      	movs	r2, #7
 8005da8:	350b      	adds	r5, #11
 8005daa:	1d23      	adds	r3, r4, #4
 8005dac:	4395      	bics	r5, r2
 8005dae:	1aea      	subs	r2, r5, r3
 8005db0:	429d      	cmp	r5, r3
 8005db2:	d0e4      	beq.n	8005d7e <_malloc_r+0x8e>
 8005db4:	1b5b      	subs	r3, r3, r5
 8005db6:	50a3      	str	r3, [r4, r2]
 8005db8:	e7e1      	b.n	8005d7e <_malloc_r+0x8e>
 8005dba:	605a      	str	r2, [r3, #4]
 8005dbc:	e7ec      	b.n	8005d98 <_malloc_r+0xa8>
 8005dbe:	6862      	ldr	r2, [r4, #4]
 8005dc0:	42a3      	cmp	r3, r4
 8005dc2:	d1d5      	bne.n	8005d70 <_malloc_r+0x80>
 8005dc4:	9b00      	ldr	r3, [sp, #0]
 8005dc6:	601a      	str	r2, [r3, #0]
 8005dc8:	e7e9      	b.n	8005d9e <_malloc_r+0xae>
 8005dca:	0023      	movs	r3, r4
 8005dcc:	6864      	ldr	r4, [r4, #4]
 8005dce:	e7a2      	b.n	8005d16 <_malloc_r+0x26>
 8005dd0:	002c      	movs	r4, r5
 8005dd2:	686d      	ldr	r5, [r5, #4]
 8005dd4:	e7ab      	b.n	8005d2e <_malloc_r+0x3e>
 8005dd6:	0013      	movs	r3, r2
 8005dd8:	e7c4      	b.n	8005d64 <_malloc_r+0x74>
 8005dda:	230c      	movs	r3, #12
 8005ddc:	0030      	movs	r0, r6
 8005dde:	6033      	str	r3, [r6, #0]
 8005de0:	f000 f810 	bl	8005e04 <__malloc_unlock>
 8005de4:	e7cb      	b.n	8005d7e <_malloc_r+0x8e>
 8005de6:	6027      	str	r7, [r4, #0]
 8005de8:	e7d9      	b.n	8005d9e <_malloc_r+0xae>
 8005dea:	605b      	str	r3, [r3, #4]
 8005dec:	deff      	udf	#255	; 0xff
 8005dee:	46c0      	nop			; (mov r8, r8)
 8005df0:	2000034c 	.word	0x2000034c

08005df4 <__malloc_lock>:
 8005df4:	b510      	push	{r4, lr}
 8005df6:	4802      	ldr	r0, [pc, #8]	; (8005e00 <__malloc_lock+0xc>)
 8005df8:	f000 f850 	bl	8005e9c <__retarget_lock_acquire_recursive>
 8005dfc:	bd10      	pop	{r4, pc}
 8005dfe:	46c0      	nop			; (mov r8, r8)
 8005e00:	20000490 	.word	0x20000490

08005e04 <__malloc_unlock>:
 8005e04:	b510      	push	{r4, lr}
 8005e06:	4802      	ldr	r0, [pc, #8]	; (8005e10 <__malloc_unlock+0xc>)
 8005e08:	f000 f849 	bl	8005e9e <__retarget_lock_release_recursive>
 8005e0c:	bd10      	pop	{r4, pc}
 8005e0e:	46c0      	nop			; (mov r8, r8)
 8005e10:	20000490 	.word	0x20000490

08005e14 <memset>:
 8005e14:	0003      	movs	r3, r0
 8005e16:	1882      	adds	r2, r0, r2
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d100      	bne.n	8005e1e <memset+0xa>
 8005e1c:	4770      	bx	lr
 8005e1e:	7019      	strb	r1, [r3, #0]
 8005e20:	3301      	adds	r3, #1
 8005e22:	e7f9      	b.n	8005e18 <memset+0x4>

08005e24 <_sbrk_r>:
 8005e24:	2300      	movs	r3, #0
 8005e26:	b570      	push	{r4, r5, r6, lr}
 8005e28:	4d06      	ldr	r5, [pc, #24]	; (8005e44 <_sbrk_r+0x20>)
 8005e2a:	0004      	movs	r4, r0
 8005e2c:	0008      	movs	r0, r1
 8005e2e:	602b      	str	r3, [r5, #0]
 8005e30:	f7fe feaa 	bl	8004b88 <_sbrk>
 8005e34:	1c43      	adds	r3, r0, #1
 8005e36:	d103      	bne.n	8005e40 <_sbrk_r+0x1c>
 8005e38:	682b      	ldr	r3, [r5, #0]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d000      	beq.n	8005e40 <_sbrk_r+0x1c>
 8005e3e:	6023      	str	r3, [r4, #0]
 8005e40:	bd70      	pop	{r4, r5, r6, pc}
 8005e42:	46c0      	nop			; (mov r8, r8)
 8005e44:	2000048c 	.word	0x2000048c

08005e48 <__errno>:
 8005e48:	4b01      	ldr	r3, [pc, #4]	; (8005e50 <__errno+0x8>)
 8005e4a:	6818      	ldr	r0, [r3, #0]
 8005e4c:	4770      	bx	lr
 8005e4e:	46c0      	nop			; (mov r8, r8)
 8005e50:	20000058 	.word	0x20000058

08005e54 <__libc_init_array>:
 8005e54:	b570      	push	{r4, r5, r6, lr}
 8005e56:	2600      	movs	r6, #0
 8005e58:	4c0c      	ldr	r4, [pc, #48]	; (8005e8c <__libc_init_array+0x38>)
 8005e5a:	4d0d      	ldr	r5, [pc, #52]	; (8005e90 <__libc_init_array+0x3c>)
 8005e5c:	1b64      	subs	r4, r4, r5
 8005e5e:	10a4      	asrs	r4, r4, #2
 8005e60:	42a6      	cmp	r6, r4
 8005e62:	d109      	bne.n	8005e78 <__libc_init_array+0x24>
 8005e64:	2600      	movs	r6, #0
 8005e66:	f000 f8c3 	bl	8005ff0 <_init>
 8005e6a:	4c0a      	ldr	r4, [pc, #40]	; (8005e94 <__libc_init_array+0x40>)
 8005e6c:	4d0a      	ldr	r5, [pc, #40]	; (8005e98 <__libc_init_array+0x44>)
 8005e6e:	1b64      	subs	r4, r4, r5
 8005e70:	10a4      	asrs	r4, r4, #2
 8005e72:	42a6      	cmp	r6, r4
 8005e74:	d105      	bne.n	8005e82 <__libc_init_array+0x2e>
 8005e76:	bd70      	pop	{r4, r5, r6, pc}
 8005e78:	00b3      	lsls	r3, r6, #2
 8005e7a:	58eb      	ldr	r3, [r5, r3]
 8005e7c:	4798      	blx	r3
 8005e7e:	3601      	adds	r6, #1
 8005e80:	e7ee      	b.n	8005e60 <__libc_init_array+0xc>
 8005e82:	00b3      	lsls	r3, r6, #2
 8005e84:	58eb      	ldr	r3, [r5, r3]
 8005e86:	4798      	blx	r3
 8005e88:	3601      	adds	r6, #1
 8005e8a:	e7f2      	b.n	8005e72 <__libc_init_array+0x1e>
 8005e8c:	080060ec 	.word	0x080060ec
 8005e90:	080060ec 	.word	0x080060ec
 8005e94:	080060f0 	.word	0x080060f0
 8005e98:	080060ec 	.word	0x080060ec

08005e9c <__retarget_lock_acquire_recursive>:
 8005e9c:	4770      	bx	lr

08005e9e <__retarget_lock_release_recursive>:
 8005e9e:	4770      	bx	lr

08005ea0 <memcpy>:
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	b510      	push	{r4, lr}
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d100      	bne.n	8005eaa <memcpy+0xa>
 8005ea8:	bd10      	pop	{r4, pc}
 8005eaa:	5ccc      	ldrb	r4, [r1, r3]
 8005eac:	54c4      	strb	r4, [r0, r3]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	e7f8      	b.n	8005ea4 <memcpy+0x4>

08005eb2 <fmodf>:
 8005eb2:	b570      	push	{r4, r5, r6, lr}
 8005eb4:	1c06      	adds	r6, r0, #0
 8005eb6:	1c0d      	adds	r5, r1, #0
 8005eb8:	f000 f818 	bl	8005eec <__ieee754_fmodf>
 8005ebc:	1c29      	adds	r1, r5, #0
 8005ebe:	1c04      	adds	r4, r0, #0
 8005ec0:	1c30      	adds	r0, r6, #0
 8005ec2:	f7fb f93f 	bl	8001144 <__aeabi_fcmpun>
 8005ec6:	2800      	cmp	r0, #0
 8005ec8:	d10e      	bne.n	8005ee8 <fmodf+0x36>
 8005eca:	2100      	movs	r1, #0
 8005ecc:	1c28      	adds	r0, r5, #0
 8005ece:	f7fa fa9b 	bl	8000408 <__aeabi_fcmpeq>
 8005ed2:	2800      	cmp	r0, #0
 8005ed4:	d008      	beq.n	8005ee8 <fmodf+0x36>
 8005ed6:	f7ff ffb7 	bl	8005e48 <__errno>
 8005eda:	2321      	movs	r3, #33	; 0x21
 8005edc:	2100      	movs	r1, #0
 8005ede:	6003      	str	r3, [r0, #0]
 8005ee0:	1c08      	adds	r0, r1, #0
 8005ee2:	f7fa fc77 	bl	80007d4 <__aeabi_fdiv>
 8005ee6:	1c04      	adds	r4, r0, #0
 8005ee8:	1c20      	adds	r0, r4, #0
 8005eea:	bd70      	pop	{r4, r5, r6, pc}

08005eec <__ieee754_fmodf>:
 8005eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eee:	004b      	lsls	r3, r1, #1
 8005ef0:	085f      	lsrs	r7, r3, #1
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d008      	beq.n	8005f08 <__ieee754_fmodf+0x1c>
 8005ef6:	22ff      	movs	r2, #255	; 0xff
 8005ef8:	0043      	lsls	r3, r0, #1
 8005efa:	0006      	movs	r6, r0
 8005efc:	085b      	lsrs	r3, r3, #1
 8005efe:	05d2      	lsls	r2, r2, #23
 8005f00:	4293      	cmp	r3, r2
 8005f02:	da01      	bge.n	8005f08 <__ieee754_fmodf+0x1c>
 8005f04:	4297      	cmp	r7, r2
 8005f06:	dd05      	ble.n	8005f14 <__ieee754_fmodf+0x28>
 8005f08:	f7fa fe2e 	bl	8000b68 <__aeabi_fmul>
 8005f0c:	1c01      	adds	r1, r0, #0
 8005f0e:	f7fa fc61 	bl	80007d4 <__aeabi_fdiv>
 8005f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f14:	42bb      	cmp	r3, r7
 8005f16:	dbfc      	blt.n	8005f12 <__ieee754_fmodf+0x26>
 8005f18:	0fc4      	lsrs	r4, r0, #31
 8005f1a:	07e4      	lsls	r4, r4, #31
 8005f1c:	42bb      	cmp	r3, r7
 8005f1e:	d103      	bne.n	8005f28 <__ieee754_fmodf+0x3c>
 8005f20:	4b31      	ldr	r3, [pc, #196]	; (8005fe8 <__ieee754_fmodf+0xfc>)
 8005f22:	0f64      	lsrs	r4, r4, #29
 8005f24:	58e0      	ldr	r0, [r4, r3]
 8005f26:	e7f4      	b.n	8005f12 <__ieee754_fmodf+0x26>
 8005f28:	4210      	tst	r0, r2
 8005f2a:	d137      	bne.n	8005f9c <__ieee754_fmodf+0xb0>
 8005f2c:	207e      	movs	r0, #126	; 0x7e
 8005f2e:	021a      	lsls	r2, r3, #8
 8005f30:	4240      	negs	r0, r0
 8005f32:	2a00      	cmp	r2, #0
 8005f34:	dc2f      	bgt.n	8005f96 <__ieee754_fmodf+0xaa>
 8005f36:	22ff      	movs	r2, #255	; 0xff
 8005f38:	05d2      	lsls	r2, r2, #23
 8005f3a:	420a      	tst	r2, r1
 8005f3c:	d134      	bne.n	8005fa8 <__ieee754_fmodf+0xbc>
 8005f3e:	227e      	movs	r2, #126	; 0x7e
 8005f40:	023d      	lsls	r5, r7, #8
 8005f42:	4252      	negs	r2, r2
 8005f44:	2d00      	cmp	r5, #0
 8005f46:	da2c      	bge.n	8005fa2 <__ieee754_fmodf+0xb6>
 8005f48:	0005      	movs	r5, r0
 8005f4a:	357e      	adds	r5, #126	; 0x7e
 8005f4c:	db2f      	blt.n	8005fae <__ieee754_fmodf+0xc2>
 8005f4e:	2380      	movs	r3, #128	; 0x80
 8005f50:	0276      	lsls	r6, r6, #9
 8005f52:	0a76      	lsrs	r6, r6, #9
 8005f54:	041b      	lsls	r3, r3, #16
 8005f56:	4333      	orrs	r3, r6
 8005f58:	0015      	movs	r5, r2
 8005f5a:	357e      	adds	r5, #126	; 0x7e
 8005f5c:	db2c      	blt.n	8005fb8 <__ieee754_fmodf+0xcc>
 8005f5e:	024d      	lsls	r5, r1, #9
 8005f60:	2180      	movs	r1, #128	; 0x80
 8005f62:	0a6d      	lsrs	r5, r5, #9
 8005f64:	0409      	lsls	r1, r1, #16
 8005f66:	4329      	orrs	r1, r5
 8005f68:	1a80      	subs	r0, r0, r2
 8005f6a:	1a5d      	subs	r5, r3, r1
 8005f6c:	2800      	cmp	r0, #0
 8005f6e:	d129      	bne.n	8005fc4 <__ieee754_fmodf+0xd8>
 8005f70:	2d00      	cmp	r5, #0
 8005f72:	db00      	blt.n	8005f76 <__ieee754_fmodf+0x8a>
 8005f74:	002b      	movs	r3, r5
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d0d2      	beq.n	8005f20 <__ieee754_fmodf+0x34>
 8005f7a:	2180      	movs	r1, #128	; 0x80
 8005f7c:	0409      	lsls	r1, r1, #16
 8005f7e:	428b      	cmp	r3, r1
 8005f80:	db27      	blt.n	8005fd2 <__ieee754_fmodf+0xe6>
 8005f82:	0011      	movs	r1, r2
 8005f84:	317e      	adds	r1, #126	; 0x7e
 8005f86:	db27      	blt.n	8005fd8 <__ieee754_fmodf+0xec>
 8005f88:	4918      	ldr	r1, [pc, #96]	; (8005fec <__ieee754_fmodf+0x100>)
 8005f8a:	327f      	adds	r2, #127	; 0x7f
 8005f8c:	1858      	adds	r0, r3, r1
 8005f8e:	05d2      	lsls	r2, r2, #23
 8005f90:	4320      	orrs	r0, r4
 8005f92:	4310      	orrs	r0, r2
 8005f94:	e7bd      	b.n	8005f12 <__ieee754_fmodf+0x26>
 8005f96:	3801      	subs	r0, #1
 8005f98:	0052      	lsls	r2, r2, #1
 8005f9a:	e7ca      	b.n	8005f32 <__ieee754_fmodf+0x46>
 8005f9c:	15d8      	asrs	r0, r3, #23
 8005f9e:	387f      	subs	r0, #127	; 0x7f
 8005fa0:	e7c9      	b.n	8005f36 <__ieee754_fmodf+0x4a>
 8005fa2:	3a01      	subs	r2, #1
 8005fa4:	006d      	lsls	r5, r5, #1
 8005fa6:	e7cd      	b.n	8005f44 <__ieee754_fmodf+0x58>
 8005fa8:	15fa      	asrs	r2, r7, #23
 8005faa:	3a7f      	subs	r2, #127	; 0x7f
 8005fac:	e7cc      	b.n	8005f48 <__ieee754_fmodf+0x5c>
 8005fae:	257e      	movs	r5, #126	; 0x7e
 8005fb0:	426d      	negs	r5, r5
 8005fb2:	1a2d      	subs	r5, r5, r0
 8005fb4:	40ab      	lsls	r3, r5
 8005fb6:	e7cf      	b.n	8005f58 <__ieee754_fmodf+0x6c>
 8005fb8:	217e      	movs	r1, #126	; 0x7e
 8005fba:	4249      	negs	r1, r1
 8005fbc:	1a89      	subs	r1, r1, r2
 8005fbe:	408f      	lsls	r7, r1
 8005fc0:	0039      	movs	r1, r7
 8005fc2:	e7d1      	b.n	8005f68 <__ieee754_fmodf+0x7c>
 8005fc4:	005b      	lsls	r3, r3, #1
 8005fc6:	2d00      	cmp	r5, #0
 8005fc8:	db01      	blt.n	8005fce <__ieee754_fmodf+0xe2>
 8005fca:	d0a9      	beq.n	8005f20 <__ieee754_fmodf+0x34>
 8005fcc:	006b      	lsls	r3, r5, #1
 8005fce:	3801      	subs	r0, #1
 8005fd0:	e7cb      	b.n	8005f6a <__ieee754_fmodf+0x7e>
 8005fd2:	005b      	lsls	r3, r3, #1
 8005fd4:	3a01      	subs	r2, #1
 8005fd6:	e7d2      	b.n	8005f7e <__ieee754_fmodf+0x92>
 8005fd8:	217e      	movs	r1, #126	; 0x7e
 8005fda:	4249      	negs	r1, r1
 8005fdc:	1a8a      	subs	r2, r1, r2
 8005fde:	4113      	asrs	r3, r2
 8005fe0:	4323      	orrs	r3, r4
 8005fe2:	0018      	movs	r0, r3
 8005fe4:	e795      	b.n	8005f12 <__ieee754_fmodf+0x26>
 8005fe6:	46c0      	nop			; (mov r8, r8)
 8005fe8:	080060e4 	.word	0x080060e4
 8005fec:	ff800000 	.word	0xff800000

08005ff0 <_init>:
 8005ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ff2:	46c0      	nop			; (mov r8, r8)
 8005ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ff6:	bc08      	pop	{r3}
 8005ff8:	469e      	mov	lr, r3
 8005ffa:	4770      	bx	lr

08005ffc <_fini>:
 8005ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ffe:	46c0      	nop			; (mov r8, r8)
 8006000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006002:	bc08      	pop	{r3}
 8006004:	469e      	mov	lr, r3
 8006006:	4770      	bx	lr
